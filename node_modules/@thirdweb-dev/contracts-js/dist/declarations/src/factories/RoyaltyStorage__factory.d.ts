import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RoyaltyStorage, RoyaltyStorageInterface } from "../RoyaltyStorage.js";
type RoyaltyStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class RoyaltyStorage__factory extends ContractFactory {
    constructor(...args: RoyaltyStorageConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<RoyaltyStorage>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): RoyaltyStorage;
    connect(signer: Signer): RoyaltyStorage__factory;
    static readonly bytecode = "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806316b1da1e146038575b600080fd5b605e7f995f01bd2df7283cdccde6ac870b4e9dc366a11c2005b318f39305029bc84a2381565b60405190815260200160405180910390f3fea2646970667358221220e4e21fb2921075f350b7256731ca47c19a17b54b316a65531ca2ce3e1338773764736f6c634300080c0033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): RoyaltyStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): RoyaltyStorage;
}
export {};
//# sourceMappingURL=RoyaltyStorage__factory.d.ts.map