import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export interface IERC6551AccountInterface extends utils.Interface {
    functions: {
        "executeCall(address,uint256,bytes)": FunctionFragment;
        "nonce()": FunctionFragment;
        "owner()": FunctionFragment;
        "token()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "executeCall" | "nonce" | "owner" | "token"): FunctionFragment;
    encodeFunctionData(functionFragment: "executeCall", values: [string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    decodeFunctionResult(functionFragment: "executeCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    events: {
        "TransactionExecuted(address,uint256,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
}
export interface TransactionExecutedEventObject {
    target: string;
    value: BigNumber;
    data: string;
}
export type TransactionExecutedEvent = TypedEvent<[
    string,
    BigNumber,
    string
], TransactionExecutedEventObject>;
export type TransactionExecutedEventFilter = TypedEventFilter<TransactionExecutedEvent>;
export interface IERC6551Account extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IERC6551AccountInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executeCall(to: string, value: BigNumberish, data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        nonce(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        token(overrides?: CallOverrides): Promise<[
            BigNumber,
            string,
            BigNumber
        ] & {
            chainId: BigNumber;
            tokenContract: string;
            tokenId: BigNumber;
        }>;
    };
    executeCall(to: string, value: BigNumberish, data: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    nonce(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    token(overrides?: CallOverrides): Promise<[
        BigNumber,
        string,
        BigNumber
    ] & {
        chainId: BigNumber;
        tokenContract: string;
        tokenId: BigNumber;
    }>;
    callStatic: {
        executeCall(to: string, value: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<string>;
        nonce(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        token(overrides?: CallOverrides): Promise<[
            BigNumber,
            string,
            BigNumber
        ] & {
            chainId: BigNumber;
            tokenContract: string;
            tokenId: BigNumber;
        }>;
    };
    filters: {
        "TransactionExecuted(address,uint256,bytes)"(target?: string | null, value?: BigNumberish | null, data?: null): TransactionExecutedEventFilter;
        TransactionExecuted(target?: string | null, value?: BigNumberish | null, data?: null): TransactionExecutedEventFilter;
    };
    estimateGas: {
        executeCall(to: string, value: BigNumberish, data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        nonce(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        executeCall(to: string, value: BigNumberish, data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IERC6551Account.d.ts.map