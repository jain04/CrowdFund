{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct IClaimCondition.ClaimCondition[]",
          "name": "claimConditions",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "resetEligibility",
          "type": "bool"
        }
      ],
      "name": "ClaimConditionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimConditionIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDrop1155.AllowlistProof",
          "name": "allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IClaimCondition.ClaimCondition[]",
          "name": "phases",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "claim(address,uint256,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": "57bc3d78",
    "setClaimConditions(uint256,(uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)": "183718d1"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition[]\",\"name\":\"claimConditions\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimConditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDrop1155.AllowlistProof\",\"name\":\"allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition[]\",\"name\":\"phases\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"params\":{\"allowlistProof\":\"The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.\",\"currency\":\"The currency in which to pay for the claim.\",\"data\":\"Arbitrary bytes data that can be leveraged in the implementation of this interface.\",\"pricePerToken\":\"The price per token to pay for the claim.\",\"quantity\":\"The quantity of NFTs to claim.\",\"receiver\":\"The receiver of the NFTs to claim.\",\"tokenId\":\"The tokenId of the NFT to claim.\"}},\"setClaimConditions(uint256,(uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)\":{\"params\":{\"phases\":\"Claim conditions in ascending order by `startTimestamp`.\",\"resetClaimEligibility\":\"Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,                                  in the new claim conditions being set.\",\"tokenId\":\"The token ID for which to set mint conditions.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimConditionsUpdated(uint256,(uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)\":{\"notice\":\"Emitted when the contract's claim conditions are updated.\"},\"TokensClaimed(uint256,address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are claimed.\"}},\"kind\":\"user\",\"methods\":{\"claim(address,uint256,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"notice\":\"Lets an account claim a given quantity of NFTs.\"},\"setClaimConditions(uint256,(uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)\":{\"notice\":\"Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\"}},\"notice\":\"The interface `IDrop1155` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten  or added to by the contract admin. At any moment, there is only one active claim condition.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IDrop1155.sol\":\"IDrop1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IClaimConditionMultiPhase.sol\":{\"keccak256\":\"0x8388214d6cc8f1fd481aed7e062a8b23d5959e870a56076017fcf474404dbbfa\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://54c039ba9f0e674a6bdbb0ab015ad4054feffaea7eb3cc7c485aa95761156125\",\"dweb:/ipfs/QmTya89XYsc1iGAhfsHeZkgGaAv7ivA5Vr4jrGCifYHmKh\"]},\"contracts/extension/interface/IDrop1155.sol\":{\"keccak256\":\"0xee20b25b4c52a1b931f8258758d1b8b5e44c4b7c365b6d5ebcb3d7ef2714c703\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6234aa8e83511c56f93d2f30a61625e065c27a87df2c4fc041ca721490187a89\",\"dweb:/ipfs/QmVWJTVM7Na3ZZRTkWuG52k7PaeVpf5zoke1e3ogB4YUir\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "struct IClaimCondition.ClaimCondition[]",
              "name": "claimConditions",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "resetEligibility",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionsUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "claimConditionIndex",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDrop1155.AllowlistProof",
              "name": "allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "struct IClaimCondition.ClaimCondition[]",
              "name": "phases",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "claim(address,uint256,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "params": {
              "allowlistProof": "The proof of the claimer's inclusion in the merkle root allowlist                                        of the claim conditions that apply.",
              "currency": "The currency in which to pay for the claim.",
              "data": "Arbitrary bytes data that can be leveraged in the implementation of this interface.",
              "pricePerToken": "The price per token to pay for the claim.",
              "quantity": "The quantity of NFTs to claim.",
              "receiver": "The receiver of the NFTs to claim.",
              "tokenId": "The tokenId of the NFT to claim."
            }
          },
          "setClaimConditions(uint256,(uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)": {
            "params": {
              "phases": "Claim conditions in ascending order by `startTimestamp`.",
              "resetClaimEligibility": "Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,                                  in the new claim conditions being set.",
              "tokenId": "The token ID for which to set mint conditions."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claim(address,uint256,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "notice": "Lets an account claim a given quantity of NFTs."
          },
          "setClaimConditions(uint256,(uint256,uint256,uint256,uint256,bytes32,uint256,address,string)[],bool)": {
            "notice": "Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/extension/interface/IDrop1155.sol": "IDrop1155"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/extension/interface/IClaimCondition.sol": {
        "keccak256": "0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6",
        "urls": [
          "bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459",
          "dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimConditionMultiPhase.sol": {
        "keccak256": "0x8388214d6cc8f1fd481aed7e062a8b23d5959e870a56076017fcf474404dbbfa",
        "urls": [
          "bzz-raw://54c039ba9f0e674a6bdbb0ab015ad4054feffaea7eb3cc7c485aa95761156125",
          "dweb:/ipfs/QmTya89XYsc1iGAhfsHeZkgGaAv7ivA5Vr4jrGCifYHmKh"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDrop1155.sol": {
        "keccak256": "0xee20b25b4c52a1b931f8258758d1b8b5e44c4b7c365b6d5ebcb3d7ef2714c703",
        "urls": [
          "bzz-raw://6234aa8e83511c56f93d2f30a61625e065c27a87df2c4fc041ca721490187a89",
          "dweb:/ipfs/QmVWJTVM7Na3ZZRTkWuG52k7PaeVpf5zoke1e3ogB4YUir"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/extension/interface/IDrop1155.sol",
    "id": 49888,
    "exportedSymbols": {
      "IClaimCondition": [
        49527
      ],
      "IClaimConditionMultiPhase": [
        49550
      ],
      "IDrop1155": [
        49887
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:3383:175",
    "nodes": [
      {
        "id": 49817,
        "nodeType": "PragmaDirective",
        "src": "39:23:175",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 49818,
        "nodeType": "ImportDirective",
        "src": "86:41:175",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IClaimConditionMultiPhase.sol",
        "file": "./IClaimConditionMultiPhase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49888,
        "sourceUnit": 49551,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 49887,
        "nodeType": "ContractDefinition",
        "src": "579:2842:175",
        "nodes": [
          {
            "id": 49831,
            "nodeType": "StructDefinition",
            "src": "1055:151:175",
            "nodes": [],
            "canonicalName": "IDrop1155.AllowlistProof",
            "members": [
              {
                "constant": false,
                "id": 49824,
                "mutability": "mutable",
                "name": "proof",
                "nameLocation": "1097:5:175",
                "nodeType": "VariableDeclaration",
                "scope": 49831,
                "src": "1087:15:175",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                  "typeString": "bytes32[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 49822,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1087:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 49823,
                  "nodeType": "ArrayTypeName",
                  "src": "1087:9:175",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                    "typeString": "bytes32[]"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 49826,
                "mutability": "mutable",
                "name": "quantityLimitPerWallet",
                "nameLocation": "1120:22:175",
                "nodeType": "VariableDeclaration",
                "scope": 49831,
                "src": "1112:30:175",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 49825,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1112:7:175",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 49828,
                "mutability": "mutable",
                "name": "pricePerToken",
                "nameLocation": "1160:13:175",
                "nodeType": "VariableDeclaration",
                "scope": 49831,
                "src": "1152:21:175",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 49827,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1152:7:175",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 49830,
                "mutability": "mutable",
                "name": "currency",
                "nameLocation": "1191:8:175",
                "nodeType": "VariableDeclaration",
                "scope": 49831,
                "src": "1183:16:175",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 49829,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1183:7:175",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "AllowlistProof",
            "nameLocation": "1062:14:175",
            "scope": 49887,
            "visibility": "public"
          },
          {
            "id": 49844,
            "nodeType": "EventDefinition",
            "src": "1261:196:175",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 49832,
              "nodeType": "StructuredDocumentation",
              "src": "1212:44:175",
              "text": "@notice Emitted when tokens are claimed."
            },
            "name": "TokensClaimed",
            "nameLocation": "1267:13:175",
            "parameters": {
              "id": 49843,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49834,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimConditionIndex",
                  "nameLocation": "1306:19:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49844,
                  "src": "1290:35:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 49833,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1290:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49836,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "1351:7:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49844,
                  "src": "1335:23:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 49835,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1335:7:175",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49838,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "1384:8:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49844,
                  "src": "1368:24:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 49837,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1368:7:175",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49840,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1410:7:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49844,
                  "src": "1402:15:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 49839,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1402:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49842,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "quantityClaimed",
                  "nameLocation": "1435:15:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49844,
                  "src": "1427:23:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 49841,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1427:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1280:176:175"
            }
          },
          {
            "id": 49855,
            "nodeType": "EventDefinition",
            "src": "1537:111:175",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 49845,
              "nodeType": "StructuredDocumentation",
              "src": "1463:69:175",
              "text": "@notice Emitted when the contract's claim conditions are updated."
            },
            "name": "ClaimConditionsUpdated",
            "nameLocation": "1543:22:175",
            "parameters": {
              "id": 49854,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49847,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1582:7:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49855,
                  "src": "1566:23:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 49846,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1566:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49851,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "claimConditions",
                  "nameLocation": "1608:15:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49855,
                  "src": "1591:32:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$49526_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct IClaimCondition.ClaimCondition[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 49849,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 49848,
                        "name": "ClaimCondition",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 49526,
                        "src": "1591:14:175"
                      },
                      "referencedDeclaration": 49526,
                      "src": "1591:14:175",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClaimCondition_$49526_storage_ptr",
                        "typeString": "struct IClaimCondition.ClaimCondition"
                      }
                    },
                    "id": 49850,
                    "nodeType": "ArrayTypeName",
                    "src": "1591:16:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$49526_storage_$dyn_storage_ptr",
                      "typeString": "struct IClaimCondition.ClaimCondition[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49853,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "resetEligibility",
                  "nameLocation": "1630:16:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49855,
                  "src": "1625:21:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 49852,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1625:4:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1565:82:175"
            }
          },
          {
            "id": 49874,
            "nodeType": "FunctionDefinition",
            "src": "2480:247:175",
            "nodes": [],
            "documentation": {
              "id": 49856,
              "nodeType": "StructuredDocumentation",
              "src": "1654:821:175",
              "text": "  @notice Lets an account claim a given quantity of NFTs.\n  @param receiver                       The receiver of the NFTs to claim.\n  @param tokenId                        The tokenId of the NFT to claim.\n  @param quantity                       The quantity of NFTs to claim.\n  @param currency                       The currency in which to pay for the claim.\n  @param pricePerToken                  The price per token to pay for the claim.\n  @param allowlistProof                 The proof of the claimer's inclusion in the merkle root allowlist\n                                        of the claim conditions that apply.\n  @param data                           Arbitrary bytes data that can be leveraged in the implementation of this interface."
            },
            "functionSelector": "57bc3d78",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "claim",
            "nameLocation": "2489:5:175",
            "parameters": {
              "id": 49872,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49858,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "2512:8:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49874,
                  "src": "2504:16:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 49857,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2504:7:175",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49860,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2538:7:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49874,
                  "src": "2530:15:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 49859,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2530:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49862,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nameLocation": "2563:8:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49874,
                  "src": "2555:16:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 49861,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2555:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49864,
                  "mutability": "mutable",
                  "name": "currency",
                  "nameLocation": "2589:8:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49874,
                  "src": "2581:16:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 49863,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2581:7:175",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49866,
                  "mutability": "mutable",
                  "name": "pricePerToken",
                  "nameLocation": "2615:13:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49874,
                  "src": "2607:21:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 49865,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2607:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49869,
                  "mutability": "mutable",
                  "name": "allowlistProof",
                  "nameLocation": "2662:14:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49874,
                  "src": "2638:38:175",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AllowlistProof_$49831_calldata_ptr",
                    "typeString": "struct IDrop1155.AllowlistProof"
                  },
                  "typeName": {
                    "id": 49868,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49867,
                      "name": "AllowlistProof",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 49831,
                      "src": "2638:14:175"
                    },
                    "referencedDeclaration": 49831,
                    "src": "2638:14:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AllowlistProof_$49831_storage_ptr",
                      "typeString": "struct IDrop1155.AllowlistProof"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49871,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "2699:4:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49874,
                  "src": "2686:17:175",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 49870,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2686:5:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2494:215:175"
            },
            "returnParameters": {
              "id": 49873,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2726:0:175"
            },
            "scope": 49887,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49886,
            "nodeType": "FunctionDefinition",
            "src": "3273:146:175",
            "nodes": [],
            "documentation": {
              "id": 49875,
              "nodeType": "StructuredDocumentation",
              "src": "2733:535:175",
              "text": "  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\n  @param tokenId                  The token ID for which to set mint conditions.\n  @param phases                   Claim conditions in ascending order by `startTimestamp`.\n  @param resetClaimEligibility    Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,\n                                  in the new claim conditions being set."
            },
            "functionSelector": "183718d1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimConditions",
            "nameLocation": "3282:18:175",
            "parameters": {
              "id": 49884,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49877,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "3318:7:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49886,
                  "src": "3310:15:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 49876,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3310:7:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49881,
                  "mutability": "mutable",
                  "name": "phases",
                  "nameLocation": "3361:6:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49886,
                  "src": "3335:32:175",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$49526_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct IClaimCondition.ClaimCondition[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 49879,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 49878,
                        "name": "ClaimCondition",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 49526,
                        "src": "3335:14:175"
                      },
                      "referencedDeclaration": 49526,
                      "src": "3335:14:175",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ClaimCondition_$49526_storage_ptr",
                        "typeString": "struct IClaimCondition.ClaimCondition"
                      }
                    },
                    "id": 49880,
                    "nodeType": "ArrayTypeName",
                    "src": "3335:16:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_ClaimCondition_$49526_storage_$dyn_storage_ptr",
                      "typeString": "struct IClaimCondition.ClaimCondition[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49883,
                  "mutability": "mutable",
                  "name": "resetClaimEligibility",
                  "nameLocation": "3382:21:175",
                  "nodeType": "VariableDeclaration",
                  "scope": 49886,
                  "src": "3377:26:175",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 49882,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3377:4:175",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3300:109:175"
            },
            "returnParameters": {
              "id": 49885,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3418:0:175"
            },
            "scope": 49887,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 49820,
              "name": "IClaimConditionMultiPhase",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 49550,
              "src": "602:25:175"
            },
            "id": 49821,
            "nodeType": "InheritanceSpecifier",
            "src": "602:25:175"
          }
        ],
        "canonicalName": "IDrop1155",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 49819,
          "nodeType": "StructuredDocumentation",
          "src": "129:448:175",
          "text": "  The interface `IDrop1155` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\n  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.\n  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\n  or added to by the contract admin. At any moment, there is only one active claim condition."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          49887,
          49550,
          49527
        ],
        "name": "IDrop1155",
        "nameLocation": "589:9:175",
        "scope": 49888,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 175
}