{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_primarySaleRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "condition",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "resetEligibility",
          "type": "bool"
        }
      ],
      "name": "ClaimConditionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimarySaleRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "pos",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "votes",
              "type": "uint224"
            }
          ],
          "internalType": "struct ERC20Votes.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCondition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaimableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantityLimitPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "pricePerToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "getSupplyClaimedByWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primarySaleRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ],
          "internalType": "struct IClaimCondition.ClaimCondition",
          "name": "_condition",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_resetClaimEligibility",
          "type": "bool"
        }
      ],
      "name": "setClaimConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_saleRecipient",
          "type": "address"
        }
      ],
      "name": "setPrimarySaleRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerToken",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct IDropSinglePhase.AllowlistProof",
          "name": "_allowlistProof",
          "type": "tuple"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOverride",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6101006040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0523480156200003657600080fd5b5060405162003e2738038062003e27833981016040819052620000599162000423565b8282818181600590805190602001906200007592919062000293565b5080516200008b90600690602084019062000293565b50504660a052503060c052620000a0620000c6565b60805250620000b19050846200015d565b620000bc81620001af565b50505050620004f0565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000f3620001f9565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b6060600580546200020a90620004b3565b80601f01602080910402602001604051908101604052809291908181526020018280546200023890620004b3565b8015620002895780601f106200025d5761010080835404028352916020019162000289565b820191906000526020600020905b8154815290600101906020018083116200026b57829003601f168201915b5050505050905090565b828054620002a190620004b3565b90600052602060002090601f016020900481019282620002c5576000855562000310565b82601f10620002e057805160ff191683800117855562000310565b8280016001018555821562000310579182015b8281111562000310578251825591602001919060010190620002f3565b506200031e92915062000322565b5090565b5b808211156200031e576000815560010162000323565b80516001600160a01b03811681146200035157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200037e57600080fd5b81516001600160401b03808211156200039b576200039b62000356565b604051601f8301601f19908116603f01168101908282118183101715620003c657620003c662000356565b81604052838152602092508683858801011115620003e357600080fd5b600091505b83821015620004075785820183015181830184015290820190620003e8565b83821115620004195760008385830101525b9695505050505050565b600080600080608085870312156200043a57600080fd5b620004458562000339565b60208601519094506001600160401b03808211156200046357600080fd5b62000471888389016200036c565b945060408701519150808211156200048857600080fd5b5062000497878288016200036c565b925050620004a86060860162000339565b905092959194509250565b600181811c90821680620004c857607f821691505b60208210811415620004ea57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516138fd6200052a60003960006110d001526000610793015260006107bd015260006107e701526138fd6000f3fe6080604052600436106101a45760003560e01c806370a08231116100e857806370a082311461041c5780637ecebe001461043c57806384bb1e421461045c5780638da5cb5b1461046f5780638e539e8c14610484578063938e3d7b146104a457806395d89b41146104c45780639ab24eb0146104d9578063a457c2d7146104f9578063a9059cbb14610519578063ac9650d814610539578063c3cda52014610566578063d505accf14610586578063d637ed59146105a6578063dd62ed3e146105cf578063e8a3d485146105ef578063eec8897c14610604578063f1127ed81461062457600080fd5b806306fdde03146101a9578063079fe40e146101d4578063095ea7b31461020157806313af40351461023157806318160ddd1461025357806323b872dd14610272578063313ce5671461029257806335b65e1f146102ae5780633644e515146102f257806339509351146103075780633a46b1a814610327578063426cfaf31461034757806342966c6814610367578063587cde1e146103875780635c19a95c146103a75780636f4f2837146103c75780636fcfff45146103e7575b600080fd5b3480156101b557600080fd5b506101be61066e565b6040516101cb9190612f99565b60405180910390f35b3480156101e057600080fd5b506101e9610700565b6040516001600160a01b0390911681526020016101cb565b34801561020d57600080fd5b5061022161021c366004612fc8565b61070f565b60405190151581526020016101cb565b34801561023d57600080fd5b5061025161024c366004612ff2565b610727565b005b34801561025f57600080fd5b506004545b6040519081526020016101cb565b34801561027e57600080fd5b5061022161028d36600461300d565b610760565b34801561029e57600080fd5b50604051601281526020016101cb565b3480156102ba57600080fd5b506102646102c9366004612ff2565b60145460009081526015602090815260408083206001600160a01b039094168352929052205490565b3480156102fe57600080fd5b50610264610786565b34801561031357600080fd5b50610221610322366004612fc8565b610816565b34801561033357600080fd5b50610264610342366004612fc8565b610855565b34801561035357600080fd5b50610251610362366004613057565b610898565b34801561037357600080fd5b506102516103823660046130ae565b610aa8565b34801561039357600080fd5b506101e96103a2366004612ff2565b610aff565b3480156103b357600080fd5b506102516103c2366004612ff2565b610b1d565b3480156103d357600080fd5b506102516103e2366004612ff2565b610b27565b3480156103f357600080fd5b50610407610402366004612ff2565b610b54565b60405163ffffffff90911681526020016101cb565b34801561042857600080fd5b50610264610437366004612ff2565b610b7c565b34801561044857600080fd5b50610264610457366004612ff2565b610b97565b61025161046a366004613164565b610bb5565b34801561047b57600080fd5b506101e9610c82565b34801561049057600080fd5b5061026461049f3660046130ae565b610c91565b3480156104b057600080fd5b506102516104bf36600461320e565b610cbd565b3480156104d057600080fd5b506101be610cea565b3480156104e557600080fd5b506102646104f4366004612ff2565b610cf9565b34801561050557600080fd5b50610221610514366004612fc8565b610d7f565b34801561052557600080fd5b50610221610534366004612fc8565b610e1c565b34801561054557600080fd5b50610559610554366004613256565b610e2a565b6040516101cb91906132ca565b34801561057257600080fd5b5061025161058136600461333d565b610f1e565b34801561059257600080fd5b506102516105a1366004613395565b61107c565b3480156105b257600080fd5b506105bb6111e2565b6040516101cb9897969594939291906133ff565b3480156105db57600080fd5b506102646105ea366004613454565b6112a1565b3480156105fb57600080fd5b506101be6112cc565b34801561061057600080fd5b5061022161061f366004613487565b61135a565b34801561063057600080fd5b5061064461063f3660046134f8565b611705565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016101cb565b60606005805461067d9061352d565b80601f01602080910402602001604051908101604052809291908181526020018280546106a99061352d565b80156106f65780601f106106cb576101008083540402835291602001916106f6565b820191906000526020600020905b8154815290600101906020018083116106d957829003601f168201915b5050505050905090565b600b546001600160a01b031690565b60003361071d818585611788565b5060019392505050565b61072f6118ac565b6107545760405162461bcd60e51b815260040161074b90613562565b60405180910390fd5b61075d816118cf565b50565b60003361076e858285611921565b61077985858561199b565b60019150505b9392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156107df57507f000000000000000000000000000000000000000000000000000000000000000046145b1561080957507f000000000000000000000000000000000000000000000000000000000000000090565b610811611b5d565b905090565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919061071d90829086906108509087906135a0565b611788565b60004382106108765760405162461bcd60e51b815260040161074b906135b8565b6001600160a01b038316600090815260096020526040902061077f9083611bf2565b6108a06118ac565b6108bc5760405162461bcd60e51b815260040161074b90613562565b601454600e548215610906575060003360405160609190911b6001600160601b03191660208201524360348201526054016040516020818303038152906040528051906020012091505b836020013581111561094f5760405162461bcd60e51b81526020600482015260126024820152711b585e081cdd5c1c1b1e4818db185a5b595960721b604482015260640161074b565b604051806101000160405280856000013581526020018560200135815260200182815260200185606001358152602001856080013581526020018560a0013581526020018560c00160208101906109a69190612ff2565b6001600160a01b031681526020016109c160e08701876135ef565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152508051600c908155602080830151600d556040830151600e556060830151600f55608083015160105560a083015160115560c0830151601280546001600160a01b0319166001600160a01b0390921691909117905560e08301518051610a60926013920190612eb1565b50505060148290556040517f6dab9d7d05d468100139089b2516cb8ff286c3972ff070d3b509e371f0d0d4b890610a9a9086908690613665565b60405180910390a150505050565b80610ab233610b7c565b1015610af55760405162461bcd60e51b81526020600482015260126024820152716e6f7420656e6f7567682062616c616e636560701b604482015260640161074b565b61075d3382611cae565b6001600160a01b039081166000908152600860205260409020541690565b61075d3382611cc6565b610b2f6118ac565b610b4b5760405162461bcd60e51b815260040161074b90613562565b61075d81611d46565b6001600160a01b038116600090815260096020526040812054610b7690611d90565b92915050565b6001600160a01b031660009081526002602052604090205490565b6001600160a01b038116600090815260076020526040812054610b76565b601454610bc5338787878761135a565b5085600c6002016000828254610bdb91906135a0565b9091555050600081815260156020908152604080832033845290915281208054889290610c099084906135a0565b90915550610c1c90506000878787611df9565b6000610c288888611f49565b9050806001600160a01b038916336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de68a604051610c7091815260200190565b60405180910390a45050505050505050565b6001546001600160a01b031690565b6000438210610cb25760405162461bcd60e51b815260040161074b906135b8565b610b76600a83611bf2565b610cc56118ac565b610ce15760405162461bcd60e51b815260040161074b90613562565b61075d81611f5e565b60606006805461067d9061352d565b6001600160a01b0381166000908152600960205260408120548015610d6c576001600160a01b0383166000908152600960205260409020610d3b600183613731565b81548110610d4b57610d4b613748565b600091825260209091200154600160201b90046001600160e01b0316610d6f565b60005b6001600160e01b03169392505050565b3360008181526003602090815260408083206001600160a01b038716845290915281205490919083811015610e045760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161074b565b610e118286868403611788565b506001949350505050565b60003361071d81858561199b565b6060816001600160401b03811115610e4457610e446130d9565b604051908082528060200260200182016040528015610e7757816020015b6060815260200190600190039081610e625790505b50905060005b82811015610f1757610ee730858584818110610e9b57610e9b613748565b9050602002810190610ead91906135ef565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061203f92505050565b828281518110610ef957610ef9613748565b60200260200101819052508080610f0f9061375e565b915050610e7d565b5092915050565b83421115610f6e5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161074b565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b03881691810191909152606081018690526080810185905260009060a0016040516020818303038152906040528051906020012090506000611002610fe2610786565b8360405161190160f01b8152600281019290925260228201526042902090565b9050600061101282878787612064565b905061101d8161208c565b88146110675760405162461bcd60e51b81526020600482015260196024820152784552433230566f7465733a20696e76616c6964206e6f6e636560381b604482015260640161074b565b611071818a611cc6565b505050505050505050565b834211156110cc5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161074b565b60007f00000000000000000000000000000000000000000000000000000000000000008888886110fb8c61208c565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000611158610fe2610786565b9050600061116882878787612064565b9050896001600160a01b0316816001600160a01b0316146111cb5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161074b565b6111d68a8a8a611788565b50505050505050505050565b600c8054600d54600e54600f54601054601154601254601380549798969795969495939492936001600160a01b03909216929161121e9061352d565b80601f016020809104026020016040519081016040528092919081815260200182805461124a9061352d565b80156112975780601f1061126c57610100808354040283529160200191611297565b820191906000526020600020905b81548152906001019060200180831161127a57829003601f168201915b5050505050905088565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600080546112d99061352d565b80601f01602080910402602001604051908101604052809291908181526020018280546113059061352d565b80156113525780601f1061132757610100808354040283529160200191611352565b820191906000526020600020905b81548152906001019060200180831161133557829003601f168201915b505050505081565b6040805161010081018252600c80548252600d546020830152600e5492820192909252600f546060820152601054608082015260115460a08201526012546001600160a01b031660c082015260138054600093849392909160e0840191906113c19061352d565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed9061352d565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b50505091909252505050606081015160a082015160c0830151608084015193945091929091901561151a576115166114728780613779565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505060808088015191508d9060208b01359060408c0135906114c7908d0160608e01612ff2565b6040516001600160601b0319606095861b811660208301526034820194909452605481019290925290921b166074820152608801604051602081830303815290604052805190602001206120b4565b5094505b841561159f57602086013561152f5782611535565b85602001355b92506000198660400135141561154b5781611551565b85604001355b9150600019866040013514158015611582575060006115766080880160608901612ff2565b6001600160a01b031614155b61158c578061159c565b61159c6080870160608801612ff2565b90505b60145460009081526015602090815260408083206001600160a01b03808f168552925290912054908981169083161415806115da5750828814155b1561161a5760405162461bcd60e51b815260206004820152601060248201526f2150726963654f7243757272656e637960801b604482015260640161074b565b89158061162f57508361162d828c6135a0565b115b156116655760405162461bcd60e51b815260040161074b906020808252600490820152632151747960e01b604082015260600190565b84602001518a866040015161167a91906135a0565b11156116b55760405162461bcd60e51b815260206004820152600a602482015269214d6178537570706c7960b01b604482015260640161074b565b84514210156116f75760405162461bcd60e51b815260206004820152600e60248201526d18d85b9d0818db185a5b481e595d60921b604482015260640161074b565b505050505095945050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600960205260409020805463ffffffff841690811061174957611749613748565b60009182526020918290206040805180820190915291015463ffffffff81168252600160201b90046001600160e01b0316918101919091529392505050565b6001600160a01b0383166117ea5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161074b565b6001600160a01b03821661184b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161074b565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006118b6610c82565b6001600160a01b0316336001600160a01b031614905090565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b600061192d84846112a1565b9050600019811461199557818110156119885760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161074b565b6119958484848403611788565b50505050565b6001600160a01b0383166119ff5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161074b565b6001600160a01b038216611a615760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161074b565b6001600160a01b03831660009081526002602052604090205481811015611ad95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161074b565b6001600160a01b03808516600090815260026020526040808220858503905591851681529081208054849290611b109084906135a0565b92505081905550826001600160a01b0316846001600160a01b03166000805160206138a883398151915284604051611b4a91815260200190565b60405180910390a3611995848484612187565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611b8861066e565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8154600090815b81811015611c56576000611c0d82846121a2565b905084868281548110611c2257611c22613748565b60009182526020909120015463ffffffff161115611c4257809250611c50565b611c4d8160016135a0565b91505b50611bf9565b8115611c995784611c68600184613731565b81548110611c7857611c78613748565b600091825260209091200154600160201b90046001600160e01b0316611c9c565b60005b6001600160e01b031695945050505050565b611cb882826121bd565b611995600a6123008361230c565b6000611cd183610aff565b90506000611cde84610b7c565b6001600160a01b0385811660008181526008602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611995828483612483565b600b80546001600160a01b0319166001600160a01b0383169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a250565b600063ffffffff821115611df55760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840161074b565b5090565b80611e3a573415611e355760405162461bcd60e51b81526020600482015260066024820152652156616c756560d01b604482015260640161074b565b611995565b6000670de0b6b3a7640000611e4f83866137c2565b611e5991906137e1565b905060008111611e9e5760405162461bcd60e51b815260206004820152601060248201526f7175616e7469747920746f6f206c6f7760801b604482015260640161074b565b60006001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611ece5750348114611ed2565b5034155b80611f135760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206d73672076616c756560781b604482015260640161074b565b60006001600160a01b03871615611f2a5786611f32565b611f32610700565b9050611f40853383866125c0565b50505050505050565b6000611f558383612605565b50600092915050565b6000808054611f6c9061352d565b80601f0160208091040260200160405190810160405280929190818152602001828054611f989061352d565b8015611fe55780601f10611fba57610100808354040283529160200191611fe5565b820191906000526020600020905b815481529060010190602001808311611fc857829003601f168201915b5050855193945061200193600093506020870192509050612eb1565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051612033929190613803565b60405180910390a15050565b606061077f83836040518060600160405280602781526020016138816027913961268f565b60008060006120758787878761276a565b9150915061208281612824565b5095945050505050565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6000808281805b8751811015612176576120cf6002836137c2565b915060008882815181106120e5576120e5613748565b60200260200101519050808411612127576040805160208101869052908101829052606001604051602081830303815290604052805190602001209350612163565b604080516020810183905290810185905260600160405160208183030381529060405280519060200120935060018361216091906135a0565b92505b508061216e8161375e565b9150506120bb565b50941495939450505050565b505050565b61218261219384610aff565b61219c84610aff565b83612483565b60006121b160028484186137e1565b61077f908484166135a0565b6001600160a01b03821661221d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161074b565b6001600160a01b038216600090815260026020526040902054818110156122915760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161074b565b6001600160a01b03831660009081526002602052604081208383039055600480548492906122c0908490613731565b90915550506040518281526000906001600160a01b038516906000805160206138a88339815191529060200160405180910390a361218283600084612187565b600061077f8284613731565b8254600090819080156123565785612325600183613731565b8154811061233557612335613748565b600091825260209091200154600160201b90046001600160e01b0316612359565b60005b6001600160e01b0316925061237283858763ffffffff16565b91506000811180156123b05750438661238c600184613731565b8154811061239c5761239c613748565b60009182526020909120015463ffffffff16145b15612410576123be8261296d565b866123ca600184613731565b815481106123da576123da613748565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b0316021790555061247a565b85604051806040016040528061242543611d90565b63ffffffff1681526020016124398561296d565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b50935093915050565b816001600160a01b0316836001600160a01b0316141580156124a55750600081115b15612182576001600160a01b03831615612533576001600160a01b038316600090815260096020526040812081906124e0906123008561230c565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612528929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615612182576001600160a01b03821660009081526009602052604081208190612569906129d68561230c565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516125b1929190918252602082015260400190565b60405180910390a25050505050565b806125ca57611995565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156125f957611e3582826129e2565b61199584848484612a84565b61260f8282612add565b6004546001600160e01b0310156126815760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b606482015260840161074b565b611995600a6129d68361230c565b606061269a84612bb6565b6126f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161074b565b600080856001600160a01b0316856040516127109190613831565b600060405180830381855af49150503d806000811461274b576040519150601f19603f3d011682016040523d82523d6000602084013e612750565b606091505b5091509150612760828286612bc5565b9695505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115612797575060009050600361281b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127eb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128145760006001925092505061281b565b9150600090505b94509492505050565b60008160048111156128385761283861384d565b14156128415750565b60018160048111156128555761285561384d565b141561289e5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015260640161074b565b60028160048111156128b2576128b261384d565b14156129005760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161074b565b60038160048111156129145761291461384d565b141561075d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161074b565b60006001600160e01b03821115611df55760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840161074b565b600061077f82846135a0565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612a2f576040519150601f19603f3d011682016040523d82523d6000602084013e612a34565b606091505b50509050806121825760405162461bcd60e51b815260206004820152601c60248201527b1b985d1a5d99481d1bdad95b881d1c985b9cd9995c8819985a5b195960221b604482015260640161074b565b816001600160a01b0316836001600160a01b03161415612aa357611995565b6001600160a01b038316301415612ac857611e356001600160a01b0385168383612bfe565b6119956001600160a01b038516848484612c61565b6001600160a01b038216612b335760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161074b565b8060046000828254612b4591906135a0565b90915550506001600160a01b03821660009081526002602052604081208054839290612b729084906135a0565b90915550506040518181526001600160a01b038316906000906000805160206138a88339815191529060200160405180910390a3612bb260008383612187565b5050565b6001600160a01b03163b151590565b60608315612bd457508161077f565b825115612be45782518084602001fd5b8160405162461bcd60e51b815260040161074b9190612f99565b6040516001600160a01b03831660248201526044810182905261218290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c99565b6040516001600160a01b03808516602483015283166044820152606481018290526119959085906323b872dd60e01b90608401612c2a565b6000612cee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d6b9092919063ffffffff16565b8051909150156121825780806020019051810190612d0c9190613863565b6121825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161074b565b6060612d7a8484600085612d82565b949350505050565b606082471015612de35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161074b565b612dec85612bb6565b612e385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161074b565b600080866001600160a01b03168587604051612e549190613831565b60006040518083038185875af1925050503d8060008114612e91576040519150601f19603f3d011682016040523d82523d6000602084013e612e96565b606091505b5091509150612ea6828286612bc5565b979650505050505050565b828054612ebd9061352d565b90600052602060002090601f016020900481019282612edf5760008555612f25565b82601f10612ef857805160ff1916838001178555612f25565b82800160010185558215612f25579182015b82811115612f25578251825591602001919060010190612f0a565b50611df59291505b80821115611df55760008155600101612f2d565b60005b83811015612f5c578181015183820152602001612f44565b838111156119955750506000910152565b60008151808452612f85816020860160208601612f41565b601f01601f19169290920160200192915050565b60208152600061077f6020830184612f6d565b80356001600160a01b0381168114612fc357600080fd5b919050565b60008060408385031215612fdb57600080fd5b612fe483612fac565b946020939093013593505050565b60006020828403121561300457600080fd5b61077f82612fac565b60008060006060848603121561302257600080fd5b61302b84612fac565b925061303960208501612fac565b9150604084013590509250925092565b801515811461075d57600080fd5b6000806040838503121561306a57600080fd5b82356001600160401b0381111561308057600080fd5b8301610100818603121561309357600080fd5b915060208301356130a381613049565b809150509250929050565b6000602082840312156130c057600080fd5b5035919050565b6000608082840312156120ae57600080fd5b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115613109576131096130d9565b604051601f8501601f19908116603f01168101908282118183101715613131576131316130d9565b8160405280935085815286868601111561314a57600080fd5b858560208301376000602087830101525050509392505050565b60008060008060008060c0878903121561317d57600080fd5b61318687612fac565b95506020870135945061319b60408801612fac565b93506060870135925060808701356001600160401b03808211156131be57600080fd5b6131ca8a838b016130c7565b935060a08901359150808211156131e057600080fd5b508701601f810189136131f257600080fd5b613201898235602084016130ef565b9150509295509295509295565b60006020828403121561322057600080fd5b81356001600160401b0381111561323657600080fd5b8201601f8101841361324757600080fd5b612d7a848235602084016130ef565b6000806020838503121561326957600080fd5b82356001600160401b038082111561328057600080fd5b818501915085601f83011261329457600080fd5b8135818111156132a357600080fd5b8660208260051b85010111156132b857600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561331f57603f1988860301845261330d858351612f6d565b945092850192908501906001016132f1565b5092979650505050505050565b803560ff81168114612fc357600080fd5b60008060008060008060c0878903121561335657600080fd5b61335f87612fac565b9550602087013594506040870135935061337b6060880161332c565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a0312156133b057600080fd5b6133b988612fac565b96506133c760208901612fac565b955060408801359450606088013593506133e36080890161332c565b925060a0880135915060c0880135905092959891949750929550565b60006101008a83528960208401528860408401528760608401528660808401528560a084015260018060a01b03851660c08401528060e084015261344581840185612f6d565b9b9a5050505050505050505050565b6000806040838503121561346757600080fd5b61347083612fac565b915061347e60208401612fac565b90509250929050565b600080600080600060a0868803121561349f57600080fd5b6134a886612fac565b9450602086013593506134bd60408701612fac565b92506060860135915060808601356001600160401b038111156134df57600080fd5b6134eb888289016130c7565b9150509295509295909350565b6000806040838503121561350b57600080fd5b61351483612fac565b9150602083013563ffffffff811681146130a357600080fd5b600181811c9082168061354157607f821691505b602082108114156120ae57634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156135b3576135b361358a565b500190565b6020808252601f908201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604082015260600190565b6000808335601e1984360301811261360657600080fd5b8301803591506001600160401b0382111561362057600080fd5b60200191503681900382131561363557600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152823560408201526020830135606082015260408301356080820152606083013560a0820152608083013560c082015260a083013560e082015260006136b060c08501612fac565b6001600160a01b03166101008381019190915260e08501359036869003601e190182126136dc57600080fd5b9085019081356001600160401b038111156136f657600080fd5b80360387131561370557600080fd5b8161012086015261371e6101408601826020860161363c565b935050505061077f602083018415159052565b6000828210156137435761374361358a565b500390565b634e487b7160e01b600052603260045260246000fd5b60006000198214156137725761377261358a565b5060010190565b6000808335601e1984360301811261379057600080fd5b8301803591506001600160401b038211156137aa57600080fd5b6020019150600581901b360382131561363557600080fd5b60008160001904831182151516156137dc576137dc61358a565b500290565b6000826137fe57634e487b7160e01b600052601260045260246000fd5b500490565b6040815260006138166040830185612f6d565b82810360208401526138288185612f6d565b95945050505050565b60008251613843818460208701612f41565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561387557600080fd5b815161077f8161304956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e76720d0c8deb141b7e081e2f9c4be832221e6a715fd1de369438eea3cf97d3564736f6c634300080c0033",
    "sourceMap": "1299:3686:24:-:0;;;1440:95:319;1387:148;;1589:278:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1749:5;1756:7;1829:5:319;1836:7;2083:5:318;2075;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2098:17:318;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;1874:13:319::1;1855:32;::::0;-1:-1:-1;1920:4:319::1;1897:28;::::0;1962:23:::1;:21;:23::i;:::-;1935:50;::::0;-1:-1:-1;1775:26:24::1;::::0;-1:-1:-1;1787:13:24;1775:11:::1;:26::i;:::-;1811:49;1838:21:::0;1811:26:::1;:49::i;:::-;1589:278:::0;;;;1299:3686;;3293:438:319;3348:7;3445:95;3578:6;:4;:6::i;:::-;3562:24;;;;;;;3413:297;;;;;;2215:25:641;;;;2256:18;;;2249:34;;;;3608:14:319;2299:18:641;;;2292:34;3644:13:319;2342:18:641;;;2335:34;3687:4:319;2385:19:641;;;2378:61;2187:19;;3413:297:319;;;;;;;;;;;;3386:338;;;;;;3367:357;;3293:438;:::o;1421:172:132:-;1501:6;;;-1:-1:-1;;;;;1517:18:132;;;-1:-1:-1;;;;;;1517:18:132;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;1499:170:136:-;1578:9;:26;;-1:-1:-1;;;;;;1578:26:136;-1:-1:-1;;;;;1578:26:136;;;;;;;;1619:43;;;;-1:-1:-1;;1619:43:136;1499:170;:::o;2187:98:318:-;2241:13;2273:5;2266:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2187:98;:::o;1299:3686:24:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1299:3686:24;;;-1:-1:-1;1299:3686:24;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:641;93:13;;-1:-1:-1;;;;;135:31:641;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:885;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:641;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:641;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;912:3;907:2;902;894:6;890:15;886:24;883:33;880:53;;;929:1;926;919:12;880:53;951:1;942:10;;961:133;975:2;972:1;969:9;961:133;;;1063:14;;;1059:23;;1053:30;1032:14;;;1028:23;;1021:63;986:10;;;;961:133;;;1112:2;1109:1;1106:9;1103:80;;;1171:1;1166:2;1161;1153:6;1149:15;1145:24;1138:35;1103:80;1201:6;328:885;-1:-1:-1;;;;;;328:885:641:o;1218:733::-;1335:6;1343;1351;1359;1412:3;1400:9;1391:7;1387:23;1383:33;1380:53;;;1429:1;1426;1419:12;1380:53;1452:40;1482:9;1452:40;:::i;:::-;1536:2;1521:18;;1515:25;1442:50;;-1:-1:-1;;;;;;1589:14:641;;;1586:34;;;1616:1;1613;1606:12;1586:34;1639:61;1692:7;1683:6;1672:9;1668:22;1639:61;:::i;:::-;1629:71;;1746:2;1735:9;1731:18;1725:25;1709:41;;1775:2;1765:8;1762:16;1759:36;;;1791:1;1788;1781:12;1759:36;;1814:63;1869:7;1858:8;1847:9;1843:24;1814:63;:::i;:::-;1804:73;;;1896:49;1941:2;1930:9;1926:18;1896:49;:::i;:::-;1886:59;;1218:733;;;;;;;:::o;2450:380::-;2529:1;2525:12;;;;2572;;;2593:61;;2647:4;2639:6;2635:17;2625:27;;2593:61;2700:2;2692:6;2689:14;2669:18;2666:38;2663:161;;;2746:10;2741:3;2737:20;2734:1;2727:31;2781:4;2778:1;2771:15;2809:4;2806:1;2799:15;2663:161;;2450:380;;;:::o;:::-;1299:3686:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "1299:3686:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2187:98:318;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;676:104:136;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;929:32:641;;;911:51;;899:2;884:18;676:104:136;765:203:641;4464:197:318;;;;;;;;;;-1:-1:-1;4464:197:318;;;;;:::i;:::-;;:::i;:::-;;;1671:14:641;;1664:22;1646:41;;1634:2;1619:18;4464:197:318;1506:187:641;1133:173:132;;;;;;;;;;-1:-1:-1;1133:173:132;;;;;:::i;:::-;;:::i;:::-;;3275:106:318;;;;;;;;;;-1:-1:-1;3362:12:318;;3275:106;;;2035:25:641;;;2023:2;2008:18;3275:106:318;1889:177:641;5223:286:318;;;;;;;;;;-1:-1:-1;5223:286:318;;;;;:::i;:::-;;:::i;3124:91::-;;;;;;;;;;-1:-1:-1;3124:91:318;;3206:2;2546:36:641;;2534:2;2519:18;3124:91:318;2404:184:641;5881:150:122;;;;;;;;;;-1:-1:-1;5881:150:122;;;;;:::i;:::-;6002:11;;5954:7;5980:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;5980:44:122;;;;;;;;;;;5881:150;3015:272:319;;;;;;;;;;;;;:::i;5904:236:318:-;;;;;;;;;;-1:-1:-1;5904:236:318;;;;;:::i;:::-;;:::i;2756:265:320:-;;;;;;;;;;-1:-1:-1;2756:265:320;;;;;:::i;:::-;;:::i;2330:1219:122:-;;;;;;;;;;-1:-1:-1;2330:1219:122;;;;;:::i;:::-;;:::i;2269:164:24:-;;;;;;;;;;-1:-1:-1;2269:164:24;;;;;:::i;:::-;;:::i;2149:126:320:-;;;;;;;;;;-1:-1:-1;2149:126:320;;;;;:::i;:::-;;:::i;5179:167::-;;;;;;;;;;-1:-1:-1;5179:167:320;;;;;:::i;:::-;;:::i;1189:228:136:-;;;;;;;;;;-1:-1:-1;1189:228:136;;;;;:::i;:::-;;:::i;1912:149:320:-;;;;;;;;;;-1:-1:-1;1912:149:320;;;;;:::i;:::-;;:::i;:::-;;;3786:10:641;3774:23;;;3756:42;;3744:2;3729:18;1912:149:320;3612:192:641;3439:125:318;;;;;;;;;;-1:-1:-1;3439:125:318;;;;;:::i;:::-;;:::i;2765:126:319:-;;;;;;;;;;-1:-1:-1;2765:126:319;;;;;:::i;:::-;;:::i;1181:1086:122:-;;;;;;:::i;:::-;;:::i;871:86:132:-;;;;;;;;;;;;;:::i;3300:256:320:-;;;;;;;;;;-1:-1:-1;3300:256:320;;;;;:::i;:::-;;:::i;1003:188:116:-;;;;;;;;;;-1:-1:-1;1003:188:116;;;;;:::i;:::-;;:::i;2398:102:318:-;;;;;;;;;;;;;:::i;2354:209:320:-;;;;;;;;;;-1:-1:-1;2354:209:320;;;;;:::i;:::-;;:::i;6627:429:318:-;;;;;;;;;;-1:-1:-1;6627:429:318;;;;;:::i;:::-;;:::i;3760:189::-;;;;;;;;;;-1:-1:-1;3760:189:318;;;;;:::i;:::-;;:::i;698:319:127:-;;;;;;;;;;-1:-1:-1;698:319:127;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5615:613:320:-;;;;;;;;;;-1:-1:-1;5615:613:320;;;;;:::i;:::-;;:::i;2053:651:319:-;;;;;;;;;;-1:-1:-1;2053:651:319;;;;;:::i;:::-;;:::i;463:36:122:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;4007:149:318:-;;;;;;;;;;-1:-1:-1;4007:149:318;;;;;:::i;:::-;;:::i;565:34:116:-;;;;;;;;;;;;;:::i;3646:2154:122:-;;;;;;;;;;-1:-1:-1;3646:2154:122;;;;;:::i;:::-;;:::i;1689:148:320:-;;;;;;;;;;-1:-1:-1;1689:148:320;;;;;:::i;:::-;;:::i;:::-;;;;11238:13:641;;11253:10;11234:30;11216:49;;11325:4;11313:17;;;11307:24;-1:-1:-1;;;;;11303:50:641;11281:20;;;11274:80;;;;11189:18;1689:148:320;11012:348:641;2187:98:318;2241:13;2273:5;2266:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2187:98;:::o;676:104:136:-;764:9;;-1:-1:-1;;;;;764:9:136;;676:104::o;4464:197:318:-;4547:4;719:10:325;4601:32:318;719:10:325;4617:7:318;4626:6;4601:8;:32::i;:::-;-1:-1:-1;4650:4:318;;4464:197;-1:-1:-1;;;4464:197:318:o;1133:173:132:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:132;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;5223:286:318:-;5350:4;719:10:325;5406:38:318;5422:4;719:10:325;5437:6:318;5406:15;:38::i;:::-;5454:27;5464:4;5470:2;5474:6;5454:9;:27::i;:::-;5498:4;5491:11;;;5223:286;;;;;;:::o;3015:272:319:-;3073:7;3104:4;-1:-1:-1;;;;;3113:12:319;3096:29;;:66;;;;;3146:16;3129:13;:33;3096:66;3092:189;;;-1:-1:-1;3185:24:319;;3015:272::o;3092:189::-;3247:23;:21;:23::i;:::-;3240:30;;3015:272;:::o;5904:236:318:-;719:10:325;5992:4:318;6071:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6071:27:318;;;;;;;;;;5992:4;;719:10:325;6046:66:318;;719:10:325;;6071:27:318;;:40;;6101:10;;6071:40;:::i;:::-;6046:8;:66::i;2756:265:320:-;2854:7;2895:12;2881:11;:26;2873:70;;;;-1:-1:-1;;;2873:70:320;;;;;;;:::i;:::-;-1:-1:-1;;;;;2979:21:320;;;;;;:12;:21;;;;;2960:54;;3002:11;2960:18;:54::i;2330:1219:122:-;2456:24;:22;:24::i;:::-;2451:80;;2496:24;;-1:-1:-1;;;2496:24:122;;;;;;;:::i;2451:80::-;2569:11;;2621:28;;2660:170;;;;-1:-1:-1;2725:1:122;719:10:325;2770:48:122;;12920:2:641;12891:15;;;;-1:-1:-1;;;;;;12887:45:641;2770:48:122;;;12875:58:641;2805:12:122;12949::641;;;12942:28;12986:12;;2770:48:122;;;;;;;;;;;;2760:59;;;;;;2740:79;;2660:170;2867:10;:29;;;2844:20;:52;2840:111;;;2912:28;;-1:-1:-1;;;2912:28:122;;13211:2:641;2912:28:122;;;13193:21:641;13250:2;13230:18;;;13223:30;-1:-1:-1;;;13269:18:641;;;13262:48;13327:18;;2912:28:122;13009:342:641;2840:111:122;2978:450;;;;;;;;3023:10;:25;;;2978:450;;;;3082:10;:29;;;2978:450;;;;3140:20;2978:450;;;;3198:10;:33;;;2978:450;;;;3257:10;:21;;;2978:450;;;;3307:10;:24;;;2978:450;;;;3355:10;:19;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2978:450:122;;;;;3398:19;;;;:10;:19;:::i;:::-;2978:450;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2978:450:122;;-1:-1:-1;2961:467:122;;:14;:467;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2961:467:122;-1:-1:-1;;;;;2961:467:122;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;3438:11:122;:31;;;3485:57;;;;;;3507:10;;3519:22;;3485:57;:::i;:::-;;;;;;;;2441:1108;;2330:1219;;:::o;2269:164:24:-;2360:7;2335:21;2345:10;2335:9;:21::i;:::-;:32;;2327:63;;;;-1:-1:-1;;;2327:63:24;;15725:2:641;2327:63:24;;;15707:21:641;15764:2;15744:18;;;15737:30;-1:-1:-1;;;15783:18:641;;;15776:48;15841:18;;2327:63:24;15523:342:641;2327:63:24;2400:26;2406:10;2418:7;2400:5;:26::i;2149:126:320:-;-1:-1:-1;;;;;2249:19:320;;;2223:7;2249:19;;;:10;:19;;;;;;;;2149:126::o;5179:167::-;5305:34;719:10:325;5329:9:320;5305;:34::i;1189:228:136:-;1279:29;:27;:29::i;:::-;1274:85;;1324:24;;-1:-1:-1;;;1324:24:136;;;;;;;:::i;1274:85::-;1368:42;1395:14;1368:26;:42::i;1912:149:320:-;-1:-1:-1;;;;;2025:21:320;;1982:6;2025:21;;;:12;:21;;;;;:28;2007:47;;:17;:47::i;:::-;2000:54;1912:149;-1:-1:-1;;1912:149:320:o;3439:125:318:-;-1:-1:-1;;;;;3539:18:318;3513:7;3539:18;;;:9;:18;;;;;;;3439:125::o;2765:126:319:-;-1:-1:-1;;;;;2860:14:319;;2834:7;2860:14;;;:7;:14;;;;;918::326;2860:24:319;827:112:326;1181:1086:122;1558:11;;1580:84;719:10:325;1610:9:122;1621;1632:14;1648:15;1580:11;:84::i;:::-;;1741:9;1709:14;:28;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;1760:40:122;;;;:21;:40;;;;;;;;719:10:325;1760:58:122;;;;;;;:71;;1822:9;;1760:40;:71;;1822:9;;1760:71;:::i;:::-;;;;-1:-1:-1;1888:70:122;;-1:-1:-1;1917:1:122;1921:9;1932;1943:14;1888:20;:70::i;:::-;2015:20;2038:44;2061:9;2072;2038:22;:44::i;:::-;2015:67;-1:-1:-1;2015:67:122;-1:-1:-1;;;;;2098:67:122;;719:10:325;-1:-1:-1;;;;;2098:67:122;;2155:9;2098:67;;;;2035:25:641;;2023:2;2008:18;;1889:177;2098:67:122;;;;;;;;1424:843;;1181:1086;;;;;;:::o;871:86:132:-;944:6;;-1:-1:-1;;;;;944:6:132;;871:86::o;3300:256:320:-;3387:7;3428:12;3414:11;:26;3406:70;;;;-1:-1:-1;;;3406:70:320;;;;;;;:::i;:::-;3493:56;3512:23;3537:11;3493:18;:56::i;1003:188:116:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:116;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;2398:102:318:-;2454:13;2486:7;2479:14;;;;;:::i;2354:209:320:-;-1:-1:-1;;;;;2460:21:320;;2427:7;2460:21;;;:12;:21;;;;;:28;2505:8;;:51;;-1:-1:-1;;;;;2520:21:320;;;;;;:12;:21;;;;;2542:7;2548:1;2542:3;:7;:::i;:::-;2520:30;;;;;;;;:::i;:::-;;;;;;;;;;:36;-1:-1:-1;;;2520:36:320;;-1:-1:-1;;;;;2520:36:320;2505:51;;;2516:1;2505:51;-1:-1:-1;;;;;2498:58:320;;2354:209;-1:-1:-1;;;2354:209:320:o;6627:429:318:-;719:10:325;6720:4:318;6801:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6801:27:318;;;;;;;;;;6720:4;;719:10:325;6846:35:318;;;;6838:85;;;;-1:-1:-1;;;6838:85:318;;16334:2:641;6838:85:318;;;16316:21:641;16373:2;16353:18;;;16346:30;16412:34;16392:18;;;16385:62;-1:-1:-1;;;16463:18:641;;;16456:35;16508:19;;6838:85:318;16132:401:641;6838:85:318;6957:60;6966:5;6973:7;7001:15;6982:16;:34;6957:8;:60::i;:::-;-1:-1:-1;7045:4:318;;6627:429;-1:-1:-1;;;;6627:429:318:o;3760:189::-;3839:4;719:10:325;3893:28:318;719:10:325;3910:2:318;3914:6;3893:9;:28::i;698:319:127:-;775:22;831:4;-1:-1:-1;;;;;819:24:127;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:127;;-1:-1:-1;;;922:54:127:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;5615:613:320:-;5834:6;5815:15;:25;;5807:67;;;;-1:-1:-1;;;5807:67:320;;17406:2:641;5807:67:320;;;17388:21:641;17445:2;17425:18;;;17418:30;17484:31;17464:18;;;17457:59;17533:18;;5807:67:320;17204:353:641;5807:67:320;5916:58;;;1378:71;5916:58;;;17793:25:641;-1:-1:-1;;;;;17854:32:641;;17834:18;;;17827:60;;;;17903:18;;;17896:34;;;17946:18;;;17939:34;;;5885:18:320;;17765:19:641;;5916:58:320;;;;;;;;;;;;5906:69;;;;;;5885:90;;5985:12;6000:53;6022:18;:16;:18::i;:::-;6042:10;8686:4:332;8680:11;-1:-1:-1;;;8704:23:332;;8756:4;8747:14;;8740:39;;;;8808:4;8799:14;;8792:34;8862:4;8847:20;;;8486:397;6000:53:320;5985:68;;6063:14;6080:28;6094:4;6100:1;6103;6106;6080:13;:28::i;:::-;6063:45;;6136:17;6146:6;6136:9;:17::i;:::-;6127:5;:26;6119:64;;;;-1:-1:-1;;;6119:64:320;;18186:2:641;6119:64:320;;;18168:21:641;18225:2;18205:18;;;18198:30;-1:-1:-1;;;18244:18:641;;;18237:55;18309:18;;6119:64:320;17984:349:641;6119:64:320;6193:28;6203:6;6211:9;6193;:28::i;:::-;5797:431;;;5615:613;;;;;;:::o;2053:651:319:-;2288:8;2269:15;:27;;2261:69;;;;-1:-1:-1;;;2261:69:319;;18540:2:641;2261:69:319;;;18522:21:641;18579:2;18559:18;;;18552:30;18618:31;18598:18;;;18591:59;18667:18;;2261:69:319;18338:353:641;2261:69:319;2341:18;2383:16;2401:5;2408:7;2417:5;2424:16;2434:5;2424:9;:16::i;:::-;2372:79;;;;;;18983:25:641;;;;-1:-1:-1;;;;;19082:15:641;;;19062:18;;;19055:43;19134:15;;;;19114:18;;;19107:43;19166:18;;;19159:34;19209:19;;;19202:35;19253:19;;;19246:35;;;18955:19;;2372:79:319;;;;;;;;;;;;2362:90;;;;;;2341:111;;2463:12;2478:53;2500:18;:16;:18::i;2478:53::-;2463:68;;2542:14;2559:28;2573:4;2579:1;2582;2585;2559:13;:28::i;:::-;2542:45;;2615:5;-1:-1:-1;;;;;2605:15:319;:6;-1:-1:-1;;;;;2605:15:319;;2597:58;;;;-1:-1:-1;;;2597:58:319;;19494:2:641;2597:58:319;;;19476:21:641;19533:2;19513:18;;;19506:30;19572:32;19552:18;;;19545:60;19622:18;;2597:58:319;19292:354:641;2597:58:319;2666:31;2675:5;2682:7;2691:5;2666:8;:31::i;:::-;2251:453;;;2053:651;;;;;;;:::o;463:36:122:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;463:36:122;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4007:149:318:-;-1:-1:-1;;;;;4122:18:318;;;4096:7;4122:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4007:149::o;565:34:116:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3646:2154:122:-;3882:56;;;;;;;;3924:14;3882:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3882:56:122;;;;;;;;3855:15;;;;3882:56;3924:14;;3882:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3882:56:122;;;;-1:-1:-1;;;3969:40:122;;;;4040:31;;;;4105:26;;;;4146:28;;;;3882:56;;-1:-1:-1;3969:40:122;;4040:31;;4105:26;4146:42;4142:515;;4221:425;4257:21;:15;;:21;:::i;:::-;4221:425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4296:28:122;;;;;;-1:-1:-1;4415:8:122;;4449:38;;;;;4513:29;;;;;4568:24;;;;;;;;:::i;:::-;4373:241;;-1:-1:-1;;;;;;20436:2:641;20472:15;;;20468:24;;4373:241:122;;;20456:37:641;20509:12;;;20502:28;;;;20546:12;;;20539:28;;;;20601:15;;;20597:24;20583:12;;;20576:46;20638:13;;4373:241:122;;;;;;;;;;;;4342:290;;;;;;4221:18;:425::i;:::-;-1:-1:-1;4204:442:122;-1:-1:-1;4142:515:122;4671:10;4667:534;;;4710:38;;;;:129;;4829:10;4710:129;;;4772:15;:38;;;4710:129;4697:142;;-1:-1:-1;;4866:15:122;:29;;;:50;;:127;;4983:10;4866:127;;;4935:15;:29;;;4866:127;4853:140;;-1:-1:-1;;5023:15:122;:29;;;:50;;:92;;;;-1:-1:-1;5113:1:122;5077:24;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5077:38:122;;;5023:92;:167;;5177:13;5023:167;;;5134:24;;;;;;;;:::i;:::-;5007:183;;4667:534;5266:11;;5211:30;5244:34;;;:21;:34;;;;;;;;-1:-1:-1;;;;;5244:44:122;;;;;;;;;;;;5303:26;;;;;;;;;:58;;;5351:10;5333:14;:28;;5303:58;5299:115;;;5377:26;;-1:-1:-1;;;5377:26:122;;20864:2:641;5377:26:122;;;20846:21:641;20903:2;20883:18;;;20876:30;-1:-1:-1;;;20922:18:641;;;20915:46;20978:18;;5377:26:122;20662:340:641;5299:115:122;5428:14;;;:67;;-1:-1:-1;5484:10:122;5447:34;5459:22;5447:9;:34;:::i;:::-;:47;5428:67;5424:112;;;5511:14;;-1:-1:-1;;;5511:14:122;;;;;;21209:2:641;21191:21;;;21248:1;21228:18;;;21221:29;-1:-1:-1;;;21281:2:641;21266:18;;21259:34;21325:2;21310:18;;21007:327;5424:112:122;5596:17;:36;;;5584:9;5550:17;:31;;;:43;;;;:::i;:::-;:82;5546:133;;;5648:20;;-1:-1:-1;;;5648:20:122;;21541:2:641;5648:20:122;;;21523:21:641;21580:2;21560:18;;;21553:30;-1:-1:-1;;;21599:18:641;;;21592:40;21649:18;;5648:20:122;21339:334:641;5546:133:122;5693:32;;5728:15;-1:-1:-1;5689:105:122;;;5759:24;;-1:-1:-1;;;5759:24:122;;21880:2:641;5759:24:122;;;21862:21:641;21919:2;21899:18;;;21892:30;-1:-1:-1;;;21938:18:641;;;21931:44;21992:18;;5759:24:122;21678:338:641;5689:105:122;3872:1928;;;;;3646:2154;;;;;;;:::o;1689:148:320:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;1804:21:320;;;;;;:12;:21;;;;;:26;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1797:33;;;;;;;;;1804:26;;1797:33;;;;;;-1:-1:-1;;;1797:33:320;;-1:-1:-1;;;;;1797:33:320;;;;;;;;;1689:148;-1:-1:-1;;;1689:148:320:o;10154:370:318:-;-1:-1:-1;;;;;10285:19:318;;10277:68;;;;-1:-1:-1;;;10277:68:318;;22223:2:641;10277:68:318;;;22205:21:641;22262:2;22242:18;;;22235:30;22301:34;22281:18;;;22274:62;-1:-1:-1;;;22352:18:641;;;22345:34;22396:19;;10277:68:318;22021:400:641;10277:68:318;-1:-1:-1;;;;;10363:21:318;;10355:68;;;;-1:-1:-1;;;10355:68:318;;22628:2:641;10355:68:318;;;22610:21:641;22667:2;22647:18;;;22640:30;22706:34;22686:18;;;22679:62;-1:-1:-1;;;22757:18:641;;;22750:32;22799:19;;10355:68:318;22426:398:641;10355:68:318;-1:-1:-1;;;;;10434:18:318;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10485:32;;2035:25:641;;;10485:32:318;;2008:18:641;10485:32:318;;;;;;;10154:370;;;:::o;4637:115:24:-;4701:4;4738:7;:5;:7::i;:::-;-1:-1:-1;;;;;4724:21:24;:10;-1:-1:-1;;;;;4724:21:24;;4717:28;;4637:115;:::o;1421:172:132:-;1501:6;;;-1:-1:-1;;;;;1517:18:132;;;-1:-1:-1;;;;;;1517:18:132;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;10801:441:318:-;10931:24;10958:25;10968:5;10975:7;10958:9;:25::i;:::-;10931:52;;-1:-1:-1;;10997:16:318;:37;10993:243;;11078:6;11058:16;:26;;11050:68;;;;-1:-1:-1;;;11050:68:318;;23031:2:641;11050:68:318;;;23013:21:641;23070:2;23050:18;;;23043:30;23109:31;23089:18;;;23082:59;23158:18;;11050:68:318;22829:353:641;11050:68:318;11160:51;11169:5;11176:7;11204:6;11185:16;:25;11160:8;:51::i;:::-;10921:321;10801:441;;;:::o;7519:651::-;-1:-1:-1;;;;;7645:18:318;;7637:68;;;;-1:-1:-1;;;7637:68:318;;23389:2:641;7637:68:318;;;23371:21:641;23428:2;23408:18;;;23401:30;23467:34;23447:18;;;23440:62;-1:-1:-1;;;23518:18:641;;;23511:35;23563:19;;7637:68:318;23187:401:641;7637:68:318;-1:-1:-1;;;;;7723:16:318;;7715:64;;;;-1:-1:-1;;;7715:64:318;;23795:2:641;7715:64:318;;;23777:21:641;23834:2;23814:18;;;23807:30;23873:34;23853:18;;;23846:62;-1:-1:-1;;;23924:18:641;;;23917:33;23967:19;;7715:64:318;23593:399:641;7715:64:318;-1:-1:-1;;;;;7861:15:318;;7839:19;7861:15;;;:9;:15;;;;;;7894:21;;;;7886:72;;;;-1:-1:-1;;;7886:72:318;;24199:2:641;7886:72:318;;;24181:21:641;24238:2;24218:18;;;24211:30;24277:34;24257:18;;;24250:62;-1:-1:-1;;;24328:18:641;;;24321:36;24374:19;;7886:72:318;23997:402:641;7886:72:318;-1:-1:-1;;;;;7992:15:318;;;;;;;:9;:15;;;;;;8010:20;;;7992:38;;8050:13;;;;;;;;:23;;8024:6;;7992:15;8050:23;;8024:6;;8050:23;:::i;:::-;;;;;;;;8104:2;-1:-1:-1;;;;;8089:26:318;8098:4;-1:-1:-1;;;;;8089:26:318;-1:-1:-1;;;;;;;;;;;8108:6:318;8089:26;;;;2035:25:641;;2023:2;2008:18;;1889:177;8089:26:318;;;;;;;;8126:37;8146:4;8152:2;8156:6;8126:19;:37::i;3293:438:319:-;3348:7;3445:95;3578:6;:4;:6::i;:::-;3562:24;;;;;;;3413:297;;;;;;24663:25:641;;;;24704:18;;;24697:34;;;;3608:14:319;24747:18:641;;;24740:34;3644:13:319;24790:18:641;;;24783:34;3687:4:319;24833:19:641;;;24826:61;24635:19;;3413:297:319;;;;;;;;;;;;3386:338;;;;;;3367:357;;3293:438;:::o;3640:1458:320:-;4761:12;;3739:7;;;4808:229;4821:4;4815:3;:10;4808:229;;;4841:11;4855:23;4868:3;4873:4;4855:12;:23::i;:::-;4841:37;;4919:11;4896:5;4902:3;4896:10;;;;;;;;:::i;:::-;;;;;;;;;;:20;;;:34;4892:135;;;4957:3;4950:10;;4892:135;;;5005:7;:3;5011:1;5005:7;:::i;:::-;4999:13;;4892:135;4827:210;4808:229;;;5054:9;;:37;;5070:5;5076:8;5083:1;5076:4;:8;:::i;:::-;5070:15;;;;;;;;:::i;:::-;;;;;;;;;;:21;-1:-1:-1;;;5070:21:320;;-1:-1:-1;;;;;5070:21:320;5054:37;;;5066:1;5054:37;-1:-1:-1;;;;;5047:44:320;;3640:1458;-1:-1:-1;;;;;3640:1458:320:o;6896:190::-;6980:28;6992:7;7001:6;6980:11;:28::i;:::-;7019:60;7036:23;7061:9;7072:6;7019:16;:60::i;7630:380::-;7714:23;7740:20;7750:9;7740;:20::i;:::-;7714:46;;7770:24;7797:20;7807:9;7797;:20::i;:::-;-1:-1:-1;;;;;7827:21:320;;;;;;;:10;:21;;;;;;:33;;-1:-1:-1;;;;;;7827:33:320;;;;;;;;;;7876:54;;7770:47;;-1:-1:-1;7827:33:320;7876:54;;;;;;7827:21;7876:54;7941:62;7958:15;7975:9;7986:16;7941;:62::i;1499:170:136:-;1578:9;:26;;-1:-1:-1;;;;;;1578:26:136;-1:-1:-1;;;;;1578:26:136;;;;;;;;1619:43;;;;-1:-1:-1;;1619:43:136;1499:170;:::o;3045:187:335:-;3101:6;3136:16;3127:25;;;3119:76;;;;-1:-1:-1;;;3119:76:335;;25100:2:641;3119:76:335;;;25082:21:641;25139:2;25119:18;;;25112:30;25178:34;25158:18;;;25151:62;-1:-1:-1;;;25229:18:641;;;25222:36;25275:19;;3119:76:335;24898:402:641;3119:76:335;-1:-1:-1;3219:5:335;3045:187::o;2722:925:24:-;2930:19;2926:103;;2973:9;:14;2965:33;;;;-1:-1:-1;;;2965:33:24;;25507:2:641;2965:33:24;;;25489:21:641;25546:1;25526:18;;;25519:29;-1:-1:-1;;;25564:18:641;;;25557:36;25610:18;;2965:33:24;25305:329:641;2965:33:24;3012:7;;2926:103;3039:18;3098:7;3061:33;3080:14;3061:16;:33;:::i;:::-;3060:45;;;;:::i;:::-;3039:66;;3136:1;3123:10;:14;3115:43;;;;-1:-1:-1;;;3115:43:24;;26236:2:641;3115:43:24;;;26218:21:641;26275:2;26255:18;;;26248:30;-1:-1:-1;;;26294:18:641;;;26287:46;26350:18;;3115:43:24;26034:340:641;3115:43:24;3169:18;-1:-1:-1;;;;;3201:45:24;;397:42:277;3201:45:24;3197:176;;;-1:-1:-1;3278:9:24;:23;;3197:176;;;-1:-1:-1;3348:9:24;:14;3197:176;3390:13;3382:43;;;;-1:-1:-1;;;3382:43:24;;26581:2:641;3382:43:24;;;26563:21:641;26620:2;26600:18;;;26593:30;-1:-1:-1;;;26639:18:641;;;26632:47;26696:18;;3382:43:24;26379:341:641;3382:43:24;3436:21;-1:-1:-1;;;;;3460:35:24;;;:84;;3523:21;3460:84;;;3498:22;:20;:22::i;:::-;3436:108;;3554:86;3591:9;3602:10;3614:13;3629:10;3554:36;:86::i;:::-;2916:731;;;2722:925;;;;:::o;3702:224::-;3845:7;3868:33;3874:3;3879:21;3868:5;:33::i;:::-;-1:-1:-1;3918:1:24;3702:224;;;;:::o;1273:185:116:-;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:116;;1339:35;;-1:-1:-1;1384:18:116;;:11;;-1:-1:-1;1384:18:116;;;;-1:-1:-1;1384:18:116;-1:-1:-1;1384:18:116;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;6538:198:281:-;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;6708:270:332:-;6831:7;6851:17;6870:18;6892:25;6903:4;6909:1;6912;6915;6892:10;:25::i;:::-;6850:67;;;;6927:18;6939:5;6927:11;:18::i;:::-;-1:-1:-1;6962:9:332;6708:270;-1:-1:-1;;;;;6708:270:332:o;3862:203:319:-;-1:-1:-1;;;;;3982:14:319;;3922:15;3982:14;;;:7;:14;;;;;918::326;;1050:1;1032:19;;;;918:14;4041:17:319;3939:126;3862:203;;;:::o;898:906:279:-;1019:4;;1067;1019;;1109:567;1133:5;:12;1129:1;:16;1109:567;;;1166:10;1175:1;1166:10;;:::i;:::-;;;1190:20;1213:5;1219:1;1213:8;;;;;;;;:::i;:::-;;;;;;;1190:31;;1256:12;1240;:28;1236:430;;1391:44;;;;;;27270:19:641;;;27305:12;;;27298:28;;;27342:12;;1391:44:279;;;;;;;;;;;;1381:55;;;;;;1366:70;;1236:430;;;1578:44;;;;;;27270:19:641;;;27305:12;;;27298:28;;;27342:12;;1578:44:279;;;;;;;;;;;;1568:55;;;;;;1553:70;;1650:1;1641:10;;;;;:::i;:::-;;;1236:430;-1:-1:-1;1147:3:279;;;;:::i;:::-;;;;1109:567;;;-1:-1:-1;1769:20:279;;;;;-1:-1:-1;;;;898:906:279:o;11826:121:318:-;;;;:::o;7219:254:320:-;7410:56;7427:15;7437:4;7427:9;:15::i;:::-;7444:13;7454:2;7444:9;:13::i;:::-;7459:6;7410:16;:56::i;678:153:334:-;740:7;813:11;823:1;814:5;;;813:11;:::i;:::-;803:21;;804:5;;;803:21;:::i;9155:576:318:-;-1:-1:-1;;;;;9238:21:318;;9230:67;;;;-1:-1:-1;;;9230:67:318;;27567:2:641;9230:67:318;;;27549:21:641;27606:2;27586:18;;;27579:30;27645:34;27625:18;;;27618:62;-1:-1:-1;;;27696:18:641;;;27689:31;27737:19;;9230:67:318;27365:397:641;9230:67:318;-1:-1:-1;;;;;9393:18:318;;9368:22;9393:18;;;:9;:18;;;;;;9429:24;;;;9421:71;;;;-1:-1:-1;;;9421:71:318;;27969:2:641;9421:71:318;;;27951:21:641;28008:2;27988:18;;;27981:30;28047:34;28027:18;;;28020:62;-1:-1:-1;;;28098:18:641;;;28091:32;28140:19;;9421:71:318;27767:398:641;9421:71:318;-1:-1:-1;;;;;9526:18:318;;;;;;:9;:18;;;;;9547:23;;;9526:44;;9590:12;:22;;9564:6;;9526:18;9590:22;;9564:6;;9590:22;:::i;:::-;;;;-1:-1:-1;;9628:37:318;;2035:25:641;;;9654:1:318;;-1:-1:-1;;;;;9628:37:318;;;-1:-1:-1;;;;;;;;;;;9628:37:318;2023:2:641;2008:18;9628:37:318;;;;;;;9676:48;9696:7;9713:1;9717:6;9676:19;:48::i;9420:101:320:-;9483:7;9509:5;9513:1;9509;:5;:::i;8649:663::-;8881:12;;8819:17;;;;8915:8;;:35;;8930:5;8936:7;8942:1;8936:3;:7;:::i;:::-;8930:14;;;;;;;;:::i;:::-;;;;;;;;;;:20;-1:-1:-1;;;8930:20:320;;-1:-1:-1;;;;;8930:20:320;8915:35;;;8926:1;8915:35;-1:-1:-1;;;;;8903:47:320;;;8972:20;8975:9;8986:5;8972:2;:20;;:::i;:::-;8960:32;;9013:1;9007:3;:7;:51;;;;-1:-1:-1;9046:12:320;9018:5;9024:7;9030:1;9024:3;:7;:::i;:::-;9018:14;;;;;;;;:::i;:::-;;;;;;;;;;:24;;;:40;9007:51;9003:303;;;9097:29;9116:9;9097:18;:29::i;:::-;9074:5;9080:7;9086:1;9080:3;:7;:::i;:::-;9074:14;;;;;;;;:::i;:::-;;;;;;;;:20;;;:52;;;;;-1:-1:-1;;;;;9074:52:320;;;;;-1:-1:-1;;;;;9074:52:320;;;;;;9003:303;;;9157:5;9185:96;;;;;;;;9209:31;9227:12;9209:17;:31::i;:::-;9185:96;;;;;;9249:29;9268:9;9249:18;:29::i;:::-;-1:-1:-1;;;;;9185:96:320;;;;;;9157:138;;;;;;;-1:-1:-1;9157:138:320;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9157:138:320;;;;;;;;;;;;9003:303;8857:455;8649:663;;;;;;:::o;8016:627::-;8143:3;-1:-1:-1;;;;;8136:10:320;:3;-1:-1:-1;;;;;8136:10:320;;;:24;;;;;8159:1;8150:6;:10;8136:24;8132:505;;;-1:-1:-1;;;;;8180:17:320;;;8176:221;;-1:-1:-1;;;;;8275:17:320;;8218;8275;;;:12;:17;;;;;8218;;8258:54;;8294:9;8305:6;8258:16;:54::i;:::-;8217:95;;;;8356:3;-1:-1:-1;;;;;8335:47:320;;8361:9;8372;8335:47;;;;;;28344:25:641;;;28400:2;28385:18;;28378:34;28332:2;28317:18;;28170:248;8335:47:320;;;;;;;;8199:198;;8176:221;-1:-1:-1;;;;;8415:17:320;;;8411:216;;-1:-1:-1;;;;;8510:17:320;;8453;8510;;;:12;:17;;;;;8453;;8493:49;;8529:4;8535:6;8493:16;:49::i;:::-;8452:90;;;;8586:3;-1:-1:-1;;;;;8565:47:320;;8591:9;8602;8565:47;;;;;;28344:25:641;;;28400:2;28385:18;;28378:34;28332:2;28317:18;;28170:248;8565:47:320;;;;;;;;8434:193;;8016:627;;;:::o;497:385:277:-;648:12;644:49;;676:7;;644:49;-1:-1:-1;;;;;707:25:277;;397:42;707:25;703:173;;;748:37;772:3;777:7;748:23;:37::i;703:173::-;816:49;834:9;845:5;852:3;857:7;816:17;:49::i;6522:285:320:-;6606:28;6618:7;6627:6;6606:11;:28::i;:::-;3362:12:318;;-1:-1:-1;;;;;;6652:29:320;6644:90;;;;-1:-1:-1;;;6644:90:320;;28625:2:641;6644:90:320;;;28607:21:641;28664:2;28644:18;;;28637:30;28703:34;28683:18;;;28676:62;-1:-1:-1;;;28754:18:641;;;28747:46;28810:19;;6644:90:320;28423:412:641;6644:90:320;6745:55;6762:23;6787:4;6793:6;6745:16;:55::i;6922:387:281:-;7063:12;7095:18;7106:6;7095:10;:18::i;:::-;7087:69;;;;-1:-1:-1;;;7087:69:281;;29042:2:641;7087:69:281;;;29024:21:641;29081:2;29061:18;;;29054:30;29120:34;29100:18;;;29093:62;-1:-1:-1;;;29171:18:641;;;29164:36;29217:19;;7087:69:281;28840:402:641;7087:69:281;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:281;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;:::-;7244:58;6922:387;-1:-1:-1;;;;;;6922:387:281:o;5081:1494:332:-;5207:7;;-1:-1:-1;;;;;6118:79:332;;6114:161;;;-1:-1:-1;6229:1:332;;-1:-1:-1;6233:30:332;6213:51;;6114:161;6386:24;;;6369:14;6386:24;;;;;;;;;29753:25:641;;;29826:4;29814:17;;29794:18;;;29787:45;;;;29848:18;;;29841:34;;;29891:18;;;29884:34;;;6386:24:332;;29725:19:641;;6386:24:332;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6386:24:332;;-1:-1:-1;;6386:24:332;;;-1:-1:-1;;;;;;;6424:20:332;;6420:101;;6476:1;6480:29;6460:50;;;;;;;6420:101;6539:6;-1:-1:-1;6547:20:332;;-1:-1:-1;5081:1494:332;;;;;;;;:::o;582:511::-;659:20;650:5;:29;;;;;;;;:::i;:::-;;646:441;;;582:511;:::o;646:441::-;755:29;746:5;:38;;;;;;;;:::i;:::-;;742:345;;;800:34;;-1:-1:-1;;;800:34:332;;30263:2:641;800:34:332;;;30245:21:641;30302:2;30282:18;;;30275:30;-1:-1:-1;;;30321:18:641;;;30314:54;30385:18;;800:34:332;30061:348:641;742:345:332;864:35;855:5;:44;;;;;;;;:::i;:::-;;851:236;;;915:41;;-1:-1:-1;;;915:41:332;;30616:2:641;915:41:332;;;30598:21:641;30655:2;30635:18;;;30628:30;30694:33;30674:18;;;30667:61;30745:18;;915:41:332;30414:355:641;851:236:332;986:30;977:5;:39;;;;;;;;:::i;:::-;;973:114;;;1032:44;;-1:-1:-1;;;1032:44:332;;30976:2:641;1032:44:332;;;30958:21:641;31015:2;30995:18;;;30988:30;31054:34;31034:18;;;31027:62;-1:-1:-1;;;31105:18:641;;;31098:32;31147:19;;1032:44:332;30774:398:641;1135:192:335;1192:7;-1:-1:-1;;;;;1219:26:335;;;1211:78;;;;-1:-1:-1;;;1211:78:335;;31379:2:641;1211:78:335;;;31361:21:641;31418:2;31398:18;;;31391:30;31457:34;31437:18;;;31430:62;-1:-1:-1;;;31508:18:641;;;31501:37;31555:19;;1211:78:335;31177:403:641;9318:96:320;9376:7;9402:5;9406:1;9402;:5;:::i;2521:292:277:-;2703:12;2721:2;-1:-1:-1;;;;;2721:7:277;2737:5;2721:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2702:46;;;2766:7;2758:48;;;;-1:-1:-1;;;2758:48:277;;31997:2:641;2758:48:277;;;31979:21:641;32036:2;32016:18;;;32009:30;-1:-1:-1;;;32055:18:641;;;32048:58;32123:18;;2758:48:277;31795:352:641;2062:396:277;2223:3;-1:-1:-1;;;;;2214:12:277;:5;-1:-1:-1;;;;;2214:12:277;;2210:49;;;2242:7;;2210:49;-1:-1:-1;;;;;2273:22:277;;2290:4;2273:22;2269:183;;;2311:44;-1:-1:-1;;;;;2311:30:277;;2342:3;2347:7;2311:30;:44::i;2269:183::-;2386:55;-1:-1:-1;;;;;2386:34:277;;2421:5;2428:3;2433:7;2386:34;:55::i;8446:389:318:-;-1:-1:-1;;;;;8529:21:318;;8521:65;;;;-1:-1:-1;;;8521:65:318;;32354:2:641;8521:65:318;;;32336:21:641;32393:2;32373:18;;;32366:30;32432:33;32412:18;;;32405:61;32483:18;;8521:65:318;32152:355:641;8521:65:318;8673:6;8657:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8689:18:318;;;;;;:9;:18;;;;;:28;;8711:6;;8689:18;:28;;8711:6;;8689:28;:::i;:::-;;;;-1:-1:-1;;8732:37:318;;2035:25:641;;;-1:-1:-1;;;;;8732:37:318;;;8749:1;;-1:-1:-1;;;;;;;;;;;8732:37:318;2023:2:641;2008:18;8732:37:318;;;;;;;8780:48;8808:1;8812:7;8821:6;8780:19;:48::i;:::-;8446:389;;:::o;1137:320:281:-;-1:-1:-1;;;;;1427:19:281;;:23;;;1137:320::o;7529:692::-;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:281;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:281;;;;;;;;:::i;729:205:321:-;868:58;;-1:-1:-1;;;;;32704:32:641;;868:58:321;;;32686:51:641;32753:18;;;32746:34;;;841:86:321;;861:5;;-1:-1:-1;;;891:23:321;32659:18:641;;868:58:321;;;;-1:-1:-1;;868:58:321;;;;;;;;;;;;;;-1:-1:-1;;;;;868:58:321;-1:-1:-1;;;;;;868:58:321;;;;;;;;;;841:19;:86::i;940:241::-;1105:68;;-1:-1:-1;;;;;33049:15:641;;;1105:68:321;;;33031:34:641;33101:15;;33081:18;;;33074:43;33133:18;;;33126:34;;;1078:96:321;;1098:5;;-1:-1:-1;;;1128:27:321;32966:18:641;;1105:68:321;32791:375:641;3235:706:321;3654:23;3680:69;3708:4;3680:69;;;;;;;;;;;;;;;;;3688:5;-1:-1:-1;;;;;3680:27:321;;;:69;;;;;:::i;:::-;3763:17;;3654:95;;-1:-1:-1;3763:21:321;3759:176;;3858:10;3847:30;;;;;;;;;;;;:::i;:::-;3839:85;;;;-1:-1:-1;;;3839:85:321;;33623:2:641;3839:85:321;;;33605:21:641;33662:2;33642:18;;;33635:30;33701:34;33681:18;;;33674:62;-1:-1:-1;;;33752:18:641;;;33745:40;33802:19;;3839:85:321;33421:406:641;3827:223:281;3960:12;3991:52;4013:6;4021:4;4027:1;4030:12;3991:21;:52::i;:::-;3984:59;3827:223;-1:-1:-1;;;;3827:223:281:o;4914:501::-;5079:12;5136:5;5111:21;:30;;5103:81;;;;-1:-1:-1;;;5103:81:281;;34034:2:641;5103:81:281;;;34016:21:641;34073:2;34053:18;;;34046:30;34112:34;34092:18;;;34085:62;-1:-1:-1;;;34163:18:641;;;34156:36;34209:19;;5103:81:281;33832:402:641;5103:81:281;5202:18;5213:6;5202:10;:18::i;:::-;5194:60;;;;-1:-1:-1;;;5194:60:281;;34441:2:641;5194:60:281;;;34423:21:641;34480:2;34460:18;;;34453:30;34519:31;34499:18;;;34492:59;34568:18;;5194:60:281;34239:353:641;5194:60:281;5266:12;5280:23;5307:6;-1:-1:-1;;;;;5307:11:281;5327:5;5335:4;5307:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5265:75;;;;5357:51;5374:7;5383:10;5395:12;5357:16;:51::i;:::-;5350:58;4914:501;-1:-1:-1;;;;;;;4914:501:281:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:258:641;86:1;96:113;110:6;107:1;104:13;96:113;;;186:11;;;180:18;167:11;;;160:39;132:2;125:10;96:113;;;227:6;224:1;221:13;218:48;;;-1:-1:-1;;262:1:641;244:16;;237:27;14:258::o;277:::-;319:3;357:5;351:12;384:6;379:3;372:19;400:63;456:6;449:4;444:3;440:14;433:4;426:5;422:16;400:63;:::i;:::-;517:2;496:15;-1:-1:-1;;492:29:641;483:39;;;;524:4;479:50;;277:258;-1:-1:-1;;277:258:641:o;540:220::-;689:2;678:9;671:21;652:4;709:45;750:2;739:9;735:18;727:6;709:45;:::i;973:173::-;1041:20;;-1:-1:-1;;;;;1090:31:641;;1080:42;;1070:70;;1136:1;1133;1126:12;1070:70;973:173;;;:::o;1151:254::-;1219:6;1227;1280:2;1268:9;1259:7;1255:23;1251:32;1248:52;;;1296:1;1293;1286:12;1248:52;1319:29;1338:9;1319:29;:::i;:::-;1309:39;1395:2;1380:18;;;;1367:32;;-1:-1:-1;;;1151:254:641:o;1698:186::-;1757:6;1810:2;1798:9;1789:7;1785:23;1781:32;1778:52;;;1826:1;1823;1816:12;1778:52;1849:29;1868:9;1849:29;:::i;2071:328::-;2148:6;2156;2164;2217:2;2205:9;2196:7;2192:23;2188:32;2185:52;;;2233:1;2230;2223:12;2185:52;2256:29;2275:9;2256:29;:::i;:::-;2246:39;;2304:38;2338:2;2327:9;2323:18;2304:38;:::i;:::-;2294:48;;2389:2;2378:9;2374:18;2361:32;2351:42;;2071:328;;;;;:::o;2775:118::-;2861:5;2854:13;2847:21;2840:5;2837:32;2827:60;;2883:1;2880;2873:12;2898:524;2998:6;3006;3059:2;3047:9;3038:7;3034:23;3030:32;3027:52;;;3075:1;3072;3065:12;3027:52;3115:9;3102:23;-1:-1:-1;;;;;3140:6:641;3137:30;3134:50;;;3180:1;3177;3170:12;3134:50;3203:22;;3259:3;3241:16;;;3237:26;3234:46;;;3276:1;3273;3266:12;3234:46;3299:2;-1:-1:-1;3351:2:641;3336:18;;3323:32;3364:28;3323:32;3364:28;:::i;:::-;3411:5;3401:15;;;2898:524;;;;;:::o;3427:180::-;3486:6;3539:2;3527:9;3518:7;3514:23;3510:32;3507:52;;;3555:1;3552;3545:12;3507:52;-1:-1:-1;3578:23:641;;3427:180;-1:-1:-1;3427:180:641:o;3809:163::-;3876:5;3921:3;3912:6;3907:3;3903:16;3899:26;3896:46;;;3938:1;3935;3928:12;3977:127;4038:10;4033:3;4029:20;4026:1;4019:31;4069:4;4066:1;4059:15;4093:4;4090:1;4083:15;4109:631;4173:5;-1:-1:-1;;;;;4244:2:641;4236:6;4233:14;4230:40;;;4250:18;;:::i;:::-;4325:2;4319:9;4293:2;4379:15;;-1:-1:-1;;4375:24:641;;;4401:2;4371:33;4367:42;4355:55;;;4425:18;;;4445:22;;;4422:46;4419:72;;;4471:18;;:::i;:::-;4511:10;4507:2;4500:22;4540:6;4531:15;;4570:6;4562;4555:22;4610:3;4601:6;4596:3;4592:16;4589:25;4586:45;;;4627:1;4624;4617:12;4586:45;4677:6;4672:3;4665:4;4657:6;4653:17;4640:44;4732:1;4725:4;4716:6;4708;4704:19;4700:30;4693:41;;;;4109:631;;;;;:::o;4745:1006::-;4893:6;4901;4909;4917;4925;4933;4986:3;4974:9;4965:7;4961:23;4957:33;4954:53;;;5003:1;5000;4993:12;4954:53;5026:29;5045:9;5026:29;:::i;:::-;5016:39;;5102:2;5091:9;5087:18;5074:32;5064:42;;5125:38;5159:2;5148:9;5144:18;5125:38;:::i;:::-;5115:48;;5210:2;5199:9;5195:18;5182:32;5172:42;;5265:3;5254:9;5250:19;5237:33;-1:-1:-1;;;;;5330:2:641;5322:6;5319:14;5316:34;;;5346:1;5343;5336:12;5316:34;5369:74;5435:7;5426:6;5415:9;5411:22;5369:74;:::i;:::-;5359:84;;5496:3;5485:9;5481:19;5468:33;5452:49;;5526:2;5516:8;5513:16;5510:36;;;5542:1;5539;5532:12;5510:36;-1:-1:-1;5565:24:641;;5620:4;5612:13;;5608:27;-1:-1:-1;5598:55:641;;5649:1;5646;5639:12;5598:55;5672:73;5737:7;5732:2;5719:16;5714:2;5710;5706:11;5672:73;:::i;:::-;5662:83;;;4745:1006;;;;;;;;:::o;5756:450::-;5825:6;5878:2;5866:9;5857:7;5853:23;5849:32;5846:52;;;5894:1;5891;5884:12;5846:52;5934:9;5921:23;-1:-1:-1;;;;;5959:6:641;5956:30;5953:50;;;5999:1;5996;5989:12;5953:50;6022:22;;6075:4;6067:13;;6063:27;-1:-1:-1;6053:55:641;;6104:1;6101;6094:12;6053:55;6127:73;6192:7;6187:2;6174:16;6169:2;6165;6161:11;6127:73;:::i;6211:626::-;6308:6;6316;6369:2;6357:9;6348:7;6344:23;6340:32;6337:52;;;6385:1;6382;6375:12;6337:52;6425:9;6412:23;-1:-1:-1;;;;;6495:2:641;6487:6;6484:14;6481:34;;;6511:1;6508;6501:12;6481:34;6549:6;6538:9;6534:22;6524:32;;6594:7;6587:4;6583:2;6579:13;6575:27;6565:55;;6616:1;6613;6606:12;6565:55;6656:2;6643:16;6682:2;6674:6;6671:14;6668:34;;;6698:1;6695;6688:12;6668:34;6751:7;6746:2;6736:6;6733:1;6729:14;6725:2;6721:23;6717:32;6714:45;6711:65;;;6772:1;6769;6762:12;6711:65;6803:2;6795:11;;;;;6825:6;;-1:-1:-1;6211:626:641;;-1:-1:-1;;;;6211:626:641:o;6842:801::-;7002:4;7031:2;7071;7060:9;7056:18;7101:2;7090:9;7083:21;7124:6;7159;7153:13;7190:6;7182;7175:22;7228:2;7217:9;7213:18;7206:25;;7290:2;7280:6;7277:1;7273:14;7262:9;7258:30;7254:39;7240:53;;7328:2;7320:6;7316:15;7349:1;7359:255;7373:6;7370:1;7367:13;7359:255;;;7466:2;7462:7;7450:9;7442:6;7438:22;7434:36;7429:3;7422:49;7494:40;7527:6;7518;7512:13;7494:40;:::i;:::-;7484:50;-1:-1:-1;7592:12:641;;;;7557:15;;;;7395:1;7388:9;7359:255;;;-1:-1:-1;7631:6:641;;6842:801;-1:-1:-1;;;;;;;6842:801:641:o;7648:156::-;7714:20;;7774:4;7763:16;;7753:27;;7743:55;;7794:1;7791;7784:12;7809:531;7911:6;7919;7927;7935;7943;7951;8004:3;7992:9;7983:7;7979:23;7975:33;7972:53;;;8021:1;8018;8011:12;7972:53;8044:29;8063:9;8044:29;:::i;:::-;8034:39;;8120:2;8109:9;8105:18;8092:32;8082:42;;8171:2;8160:9;8156:18;8143:32;8133:42;;8194:36;8226:2;8215:9;8211:18;8194:36;:::i;:::-;8184:46;;8277:3;8266:9;8262:19;8249:33;8239:43;;8329:3;8318:9;8314:19;8301:33;8291:43;;7809:531;;;;;;;;:::o;8345:606::-;8456:6;8464;8472;8480;8488;8496;8504;8557:3;8545:9;8536:7;8532:23;8528:33;8525:53;;;8574:1;8571;8564:12;8525:53;8597:29;8616:9;8597:29;:::i;:::-;8587:39;;8645:38;8679:2;8668:9;8664:18;8645:38;:::i;:::-;8635:48;;8730:2;8719:9;8715:18;8702:32;8692:42;;8781:2;8770:9;8766:18;8753:32;8743:42;;8804:37;8836:3;8825:9;8821:19;8804:37;:::i;:::-;8794:47;;8888:3;8877:9;8873:19;8860:33;8850:43;;8940:3;8929:9;8925:19;8912:33;8902:43;;8345:606;;;;;;;;;;:::o;8956:769::-;9264:4;9293:3;9323:6;9312:9;9305:25;9366:6;9361:2;9350:9;9346:18;9339:34;9409:6;9404:2;9393:9;9389:18;9382:34;9452:6;9447:2;9436:9;9432:18;9425:34;9496:6;9490:3;9479:9;9475:19;9468:35;9540:6;9534:3;9523:9;9519:19;9512:35;9613:1;9609;9604:3;9600:11;9596:19;9588:6;9584:32;9578:3;9567:9;9563:19;9556:61;9654:2;9648:3;9637:9;9633:19;9626:31;9674:45;9715:2;9704:9;9700:18;9692:6;9674:45;:::i;:::-;9666:53;8956:769;-1:-1:-1;;;;;;;;;;;8956:769:641:o;9730:260::-;9798:6;9806;9859:2;9847:9;9838:7;9834:23;9830:32;9827:52;;;9875:1;9872;9865:12;9827:52;9898:29;9917:9;9898:29;:::i;:::-;9888:39;;9946:38;9980:2;9969:9;9965:18;9946:38;:::i;:::-;9936:48;;9730:260;;;;;:::o;9995:657::-;10125:6;10133;10141;10149;10157;10210:3;10198:9;10189:7;10185:23;10181:33;10178:53;;;10227:1;10224;10217:12;10178:53;10250:29;10269:9;10250:29;:::i;:::-;10240:39;;10326:2;10315:9;10311:18;10298:32;10288:42;;10349:38;10383:2;10372:9;10368:18;10349:38;:::i;:::-;10339:48;;10434:2;10423:9;10419:18;10406:32;10396:42;;10489:3;10478:9;10474:19;10461:33;-1:-1:-1;;;;;10509:6:641;10506:30;10503:50;;;10549:1;10546;10539:12;10503:50;10572:74;10638:7;10629:6;10618:9;10614:22;10572:74;:::i;:::-;10562:84;;;9995:657;;;;;;;;:::o;10657:350::-;10724:6;10732;10785:2;10773:9;10764:7;10760:23;10756:32;10753:52;;;10801:1;10798;10791:12;10753:52;10824:29;10843:9;10824:29;:::i;:::-;10814:39;;10903:2;10892:9;10888:18;10875:32;10947:10;10940:5;10936:22;10929:5;10926:33;10916:61;;10973:1;10970;10963:12;11365:380;11444:1;11440:12;;;;11487;;;11508:61;;11562:4;11554:6;11550:17;11540:27;;11508:61;11615:2;11607:6;11604:14;11584:18;11581:38;11578:161;;;11661:10;11656:3;11652:20;11649:1;11642:31;11696:4;11693:1;11686:15;11724:4;11721:1;11714:15;11750:338;11952:2;11934:21;;;11991:2;11971:18;;;11964:30;-1:-1:-1;;;12025:2:641;12010:18;;12003:44;12079:2;12064:18;;11750:338::o;12093:127::-;12154:10;12149:3;12145:20;12142:1;12135:31;12185:4;12182:1;12175:15;12209:4;12206:1;12199:15;12225:128;12265:3;12296:1;12292:6;12289:1;12286:13;12283:39;;;12302:18;;:::i;:::-;-1:-1:-1;12338:9:641;;12225:128::o;12358:355::-;12560:2;12542:21;;;12599:2;12579:18;;;12572:30;12638:33;12633:2;12618:18;;12611:61;12704:2;12689:18;;12358:355::o;13356:522::-;13434:4;13440:6;13500:11;13487:25;13594:2;13590:7;13579:8;13563:14;13559:29;13555:43;13535:18;13531:68;13521:96;;13613:1;13610;13603:12;13521:96;13640:33;;13692:20;;;-1:-1:-1;;;;;;13724:30:641;;13721:50;;;13767:1;13764;13757:12;13721:50;13800:4;13788:17;;-1:-1:-1;13831:14:641;13827:27;;;13817:38;;13814:58;;;13868:1;13865;13858:12;13814:58;13356:522;;;;;:::o;13883:267::-;13972:6;13967:3;13960:19;14024:6;14017:5;14010:4;14005:3;14001:14;13988:43;-1:-1:-1;14076:1:641;14051:16;;;14069:4;14047:27;;;14040:38;;;;14132:2;14111:15;;;-1:-1:-1;;14107:29:641;14098:39;;;14094:50;;13883:267::o;14155:1363::-;14374:2;14363:9;14356:21;14426:6;14413:20;14408:2;14397:9;14393:18;14386:48;14495:4;14487:6;14483:17;14470:31;14465:2;14454:9;14450:18;14443:59;14564:2;14556:6;14552:15;14539:29;14533:3;14522:9;14518:19;14511:58;14631:2;14623:6;14619:15;14606:29;14600:3;14589:9;14585:19;14578:58;14698:3;14690:6;14686:16;14673:30;14667:3;14656:9;14652:19;14645:59;14766:3;14758:6;14754:16;14741:30;14735:3;14724:9;14720:19;14713:59;14337:4;14801:36;14832:3;14824:6;14820:16;14801:36;:::i;:::-;-1:-1:-1;;;;;14898:38:641;14856:6;14878:18;;;14871:66;;;;14997:3;14985:16;;14972:30;;15053:14;15049:27;;;-1:-1:-1;;15045:41:641;15021:66;;15011:94;;15101:1;15098;15091:12;15011:94;15127:31;;;;15181:19;;-1:-1:-1;;;;;15212:30:641;;15209:50;;;15255:1;15252;15245:12;15209:50;15303:6;15287:14;15283:27;15275:6;15271:40;15268:60;;;15324:1;15321;15314:12;15268:60;15365:2;15359:3;15348:9;15344:19;15337:31;15385:73;15453:3;15442:9;15438:19;15430:6;15423:4;15416:5;15412:16;15385:73;:::i;:::-;15377:81;;;;;15467:45;15506:4;15495:9;15491:20;15483:6;1480:13;1473:21;1461:34;;1410:91;15870:125;15910:4;15938:1;15935;15932:8;15929:34;;;15943:18;;:::i;:::-;-1:-1:-1;15980:9:641;;15870:125::o;16000:127::-;16061:10;16056:3;16052:20;16049:1;16042:31;16092:4;16089:1;16082:15;16116:4;16113:1;16106:15;17064:135;17103:3;-1:-1:-1;;17124:17:641;;17121:43;;;17144:18;;:::i;:::-;-1:-1:-1;17191:1:641;17180:13;;17064:135::o;19651:545::-;19744:4;19750:6;19810:11;19797:25;19904:2;19900:7;19889:8;19873:14;19869:29;19865:43;19845:18;19841:68;19831:96;;19923:1;19920;19913:12;19831:96;19950:33;;20002:20;;;-1:-1:-1;;;;;;20034:30:641;;20031:50;;;20077:1;20074;20067:12;20031:50;20110:4;20098:17;;-1:-1:-1;20161:1:641;20157:14;;;20141;20137:35;20127:46;;20124:66;;;20186:1;20183;20176:12;25639:168;25679:7;25745:1;25741;25737:6;25733:14;25730:1;25727:21;25722:1;25715:9;25708:17;25704:45;25701:71;;;25752:18;;:::i;:::-;-1:-1:-1;25792:9:641;;25639:168::o;25812:217::-;25852:1;25878;25868:132;;25922:10;25917:3;25913:20;25910:1;25903:31;25957:4;25954:1;25947:15;25985:4;25982:1;25975:15;25868:132;-1:-1:-1;26014:9:641;;25812:217::o;26725:383::-;26922:2;26911:9;26904:21;26885:4;26948:45;26989:2;26978:9;26974:18;26966:6;26948:45;:::i;:::-;27041:9;27033:6;27029:22;27024:2;27013:9;27009:18;27002:50;27069:33;27095:6;27087;27069:33;:::i;:::-;27061:41;26725:383;-1:-1:-1;;;;;26725:383:641:o;29247:274::-;29376:3;29414:6;29408:13;29430:53;29476:6;29471:3;29464:4;29456:6;29452:17;29430:53;:::i;:::-;29499:16;;;;;29247:274;-1:-1:-1;;29247:274:641:o;29929:127::-;29990:10;29985:3;29981:20;29978:1;29971:31;30021:4;30018:1;30011:15;30045:4;30042:1;30035:15;33171:245;33238:6;33291:2;33279:9;33270:7;33266:23;33262:32;33259:52;;;33307:1;33304;33297:12;33259:52;33339:9;33333:16;33358:28;33380:5;33358:28;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "77437": [
        {
          "start": 2023,
          "length": 32
        }
      ],
      "77439": [
        {
          "start": 1981,
          "length": 32
        }
      ],
      "77441": [
        {
          "start": 1939,
          "length": 32
        }
      ],
      "77446": [
        {
          "start": 4304,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "DOMAIN_SEPARATOR()": "3644e515",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "checkpoints(address,uint32)": "f1127ed8",
    "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": "84bb1e42",
    "claimCondition()": "d637ed59",
    "contractURI()": "e8a3d485",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "delegate(address)": "5c19a95c",
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "c3cda520",
    "delegates(address)": "587cde1e",
    "getPastTotalSupply(uint256)": "8e539e8c",
    "getPastVotes(address,uint256)": "3a46b1a8",
    "getSupplyClaimedByWallet(address)": "35b65e1f",
    "getVotes(address)": "9ab24eb0",
    "increaseAllowance(address,uint256)": "39509351",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nonces(address)": "7ecebe00",
    "numCheckpoints(address)": "6fcfff45",
    "owner()": "8da5cb5b",
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
    "primarySaleRecipient()": "079fe40e",
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": "426cfaf3",
    "setContractURI(string)": "938e3d7b",
    "setOwner(address)": "13af4035",
    "setPrimarySaleRecipient(address)": "6f4f2837",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": "eec8897c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_primarySaleRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"struct ERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getSupplyClaimedByWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primarySaleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"_condition\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setPrimarySaleRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDropSinglePhase.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Caller should own the `_amount` of tokens.\",\"params\":{\"_amount\":\"The number of tokens to burn.\"}},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)\":{\"details\":\"Lets an account claim tokens.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"details\":\"Delegate votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`\"},\"delegates(address)\":{\"details\":\"Get the address `account` is currently delegating to.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined\"},\"getPastVotes(address,uint256)\":{\"details\":\"Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined\"},\"getSupplyClaimedByWallet(address)\":{\"details\":\"Returns the supply claimed by claimer for active conditionId.\"},\"getVotes(address)\":{\"details\":\"Gets the current votes balance for `account`\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"primarySaleRecipient()\":{\"details\":\"Returns primary sale recipient address.\"},\"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"details\":\"Lets a contract admin set claim conditions.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setPrimarySaleRecipient(address)\":{\"details\":\"Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.\",\"params\":{\"_saleRecipient\":\"Address to be set as new recipient of primary sales.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))\":{\"details\":\"Checks a request to claim NFTs against the active claim condition's criteria.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimConditionUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)\":{\"notice\":\"Emitted when the contract's claim conditions are updated.\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are claimed via `claim`.\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner a given amount of their tokens.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setPrimarySaleRecipient(address)\":{\"notice\":\"Updates primary sale recipient.\"}},\"notice\":\"BASE:      ERC20Votes      EXTENSION: DropSinglePhase  The `ERC20Drop` contract uses the `DropSinglePhase` extensions, along with `ERC20Votes`.  It implements the ERC20 standard, along with the following additions to standard ERC20 logic:      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by                             presenting a message signed by the account.  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism tokens. It lets  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC20DropVote.sol\":\"ERC20DropVote\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/base/ERC20DropVote.sol\":{\"keccak256\":\"0x9b924d506af8b630d84acf304601ea334584c6f85874b56b409a2b3acc85dcb4\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://93275d48c0a9a61b758ea8ca26c352aa9e45d6c53337de85b936178835fe4e3d\",\"dweb:/ipfs/QmRqMwQ869w88s5qsPTC7Sd4G3Uj4HEadLM7VdwuqFcrG3\"]},\"contracts/eip/interface/IERC20.sol\":{\"keccak256\":\"0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592\",\"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA\"]},\"contracts/eip/interface/IERC20Metadata.sol\":{\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65\",\"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1\"]},\"contracts/eip/interface/IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DropSinglePhase.sol\":{\"keccak256\":\"0x836429b5346bd4f6a2078e5b2db2702a692afddc74f316a92fd6c1335f03ff3a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bc0858bb7a2c05013eb6352cc47087d6334824a32cc8545e549dddcf69a0dc31\",\"dweb:/ipfs/QmPMDq6F9G9u4nGEQTUPpUv7pm3cm3vY5hcb6ue9paEmGS\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/PrimarySale.sol\":{\"keccak256\":\"0x9ef1ad82fadf988a07f4034b92ccdb3281682693e41759a79042814d36095f42\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0d962b48453e1f50b808193135c2f14265324fa8b75fe3b405ef7836e38921f7\",\"dweb:/ipfs/QmZDLNsZQj9kNcb15nBuWRpPwDdDvJS2gtFwqEs2Lwxb1N\"]},\"contracts/extension/interface/IClaimCondition.sol\":{\"keccak256\":\"0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459\",\"dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDropSinglePhase.sol\":{\"keccak256\":\"0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9\",\"dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IPrimarySale.sol\":{\"keccak256\":\"0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869\",\"dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF\"]},\"contracts/interfaces/IWETH.sol\":{\"keccak256\":\"0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1\",\"dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU\"]},\"contracts/lib/CurrencyTransferLib.sol\":{\"keccak256\":\"0x4b0dc7c0ca9e463b2efbf3e8177a40bab333f5669ab368cad98534678a81cbc3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1d5e91c28bb509afcbb3da66bbbf03465de5b168937b604f1cab63397472388a\",\"dweb:/ipfs/QmTqs9U5eWAQzJxVwD9pMQAtjXxK59cvJ4xzYMUnfVCsp5\"]},\"contracts/lib/MerkleProof.sol\":{\"keccak256\":\"0xfeb51ecaba6f9c1649a143825dc3b7ca0eb9edff7787c7a54957dfd542f7ece0\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://8819ab0f7546a6a0dc126d5dbf019ba015563220689f661b1da4174f7ce87bbf\",\"dweb:/ipfs/QmT6Q9YQGMJbCWhE6G4ze8dsqjMyewnErTNGgLFSAHkFU7\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]},\"contracts/openzeppelin-presets/governance/utils/IVotes.sol\":{\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86\",\"dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY\"]},\"contracts/openzeppelin-presets/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x0429da8e9a940fceb58b83ea0425489dccf4f0c2178625dac6864c889c96f43f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1519284bd9276de5bb35f3fea2068e718518e179091ca494652b0fddfa1ea940\",\"dweb:/ipfs/QmTbZkyEFbgTLA8ehLgs29JLGaqrGdUNJQxagN8dFiiSma\"]},\"contracts/openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0x409682c602fff6428b40be9c454a3dca04e3c891a9dec03ad923da083b336312\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://692a8d672cf6a5c87d4ff10520e7f440496fa3896fe4b3f0bd15a5af6155e032\",\"dweb:/ipfs/QmXnzi7Y3rP8wfRy71j5BsRPZAAmbQ2SMGcQdEdt4N7fYT\"]},\"contracts/openzeppelin-presets/token/ERC20/extensions/ERC20Votes.sol\":{\"keccak256\":\"0x885363e8b8508655b2a319a9a8e12d3d5a0e4f5cadcf4f1330246039af20de40\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fad64730d16bbc0e0f0734b4a7eb423a089c0f970c1df22be0bfa90a65f7d9d8\",\"dweb:/ipfs/QmaDpR975EEVJnmNXq5Fkf2a7dQixdMKuxwk2ESg37tZE9\"]},\"contracts/openzeppelin-presets/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x293d8d7a3502950df5b9d6d36fcad85ca758f06dd946cdc8645cac1aa56686c4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cd805dbdcf6b7cebcd47201badbd7f7464e49eec51c4e0627b899ece1b04790\",\"dweb:/ipfs/QmRP3JYK4wzDaRrk9so6m433TuqHW9axAXLLnQAjCp2Gs4\"]},\"contracts/openzeppelin-presets/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/openzeppelin-presets/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"contracts/openzeppelin-presets/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xe7c8a90c658962ae2d706fb5a4e522404b11a06347d36186e0d64a26d8f58d2e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e6b4d213258d6693acd3b6131f723e01bf2629c48520103986c5ec039f144f8\",\"dweb:/ipfs/QmQvzsASAkfs4BwPSKE4Quu3dxzseHNBehNntLyGfdwJuN\"]},\"contracts/openzeppelin-presets/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]},\"contracts/openzeppelin-presets/utils/math/Math.sol\":{\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab84f13e6e6e0823854a0cddd49e96df052092d5919f95587607f0ed28a64cb6\",\"dweb:/ipfs/QmbNtqAq23ZDjCzHukQaa7B3y6rcobscm6FZF5PMQXcnVr\"]},\"contracts/openzeppelin-presets/utils/math/SafeCast.sol\":{\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1\",\"dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_primarySaleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "resetEligibility",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimConditionUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "fromDelegate",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "toDelegate",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "DelegateChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "previousBalance",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "newBalance",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DelegateVotesChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "PrimarySaleRecipientUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DOMAIN_SEPARATOR",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "pos",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkpoints",
          "outputs": [
            {
              "internalType": "struct ERC20Votes.Checkpoint",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "fromBlock",
                  "type": "uint32"
                },
                {
                  "internalType": "uint224",
                  "name": "votes",
                  "type": "uint224"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "claimCondition",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxClaimableSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityLimitPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "delegate"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "delegateBySig"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "delegates",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPastTotalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPastVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSupplyClaimedByWallet",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "nonces",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "numCheckpoints",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "permit"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "primarySaleRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IClaimCondition.ClaimCondition",
              "name": "_condition",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxClaimableSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                }
              ]
            },
            {
              "internalType": "bool",
              "name": "_resetClaimEligibility",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setClaimConditions"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_saleRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPrimarySaleRecipient"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_pricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "struct IDropSinglePhase.AllowlistProof",
              "name": "_allowlistProof",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "quantityLimitPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerToken",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isOverride",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "DOMAIN_SEPARATOR()": {
            "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
          },
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Caller should own the `_amount` of tokens.",
            "params": {
              "_amount": "The number of tokens to burn."
            }
          },
          "checkpoints(address,uint32)": {
            "details": "Get the `pos`-th checkpoint for `account`."
          },
          "claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
            "details": "Lets an account claim tokens."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "delegate(address)": {
            "details": "Delegate votes from the sender to `delegatee`."
          },
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "Delegates votes from signer to `delegatee`"
          },
          "delegates(address)": {
            "details": "Get the address `account` is currently delegating to."
          },
          "getPastTotalSupply(uint256)": {
            "details": "Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances. It is but NOT the sum of all the delegated votes! Requirements: - `blockNumber` must have been already mined"
          },
          "getPastVotes(address,uint256)": {
            "details": "Retrieve the number of votes for `account` at the end of `blockNumber`. Requirements: - `blockNumber` must have been already mined"
          },
          "getSupplyClaimedByWallet(address)": {
            "details": "Returns the supply claimed by claimer for active conditionId."
          },
          "getVotes(address)": {
            "details": "Gets the current votes balance for `account`"
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "nonces(address)": {
            "details": "See {IERC20Permit-nonces}."
          },
          "numCheckpoints(address)": {
            "details": "Get number of checkpoints for `account`."
          },
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
            "details": "See {IERC20Permit-permit}."
          },
          "primarySaleRecipient()": {
            "details": "Returns primary sale recipient address."
          },
          "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
            "details": "Lets a contract admin set claim conditions."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setPrimarySaleRecipient(address)": {
            "details": "Caller should be authorized to set primary sales info.                  See {_canSetPrimarySaleRecipient}.                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.",
            "params": {
              "_saleRecipient": "Address to be set as new recipient of primary sales."
            }
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": {
            "details": "Checks a request to claim NFTs against the active claim condition's criteria."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner a given amount of their tokens."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setPrimarySaleRecipient(address)": {
            "notice": "Updates primary sale recipient."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC20DropVote.sol": "ERC20DropVote"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC20DropVote.sol": {
        "keccak256": "0x9b924d506af8b630d84acf304601ea334584c6f85874b56b409a2b3acc85dcb4",
        "urls": [
          "bzz-raw://93275d48c0a9a61b758ea8ca26c352aa9e45d6c53337de85b936178835fe4e3d",
          "dweb:/ipfs/QmRqMwQ869w88s5qsPTC7Sd4G3Uj4HEadLM7VdwuqFcrG3"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20.sol": {
        "keccak256": "0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff",
        "urls": [
          "bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592",
          "dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Metadata.sol": {
        "keccak256": "0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734",
        "urls": [
          "bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65",
          "dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC20Permit.sol": {
        "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
        "urls": [
          "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
          "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
        ],
        "license": "MIT"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DropSinglePhase.sol": {
        "keccak256": "0x836429b5346bd4f6a2078e5b2db2702a692afddc74f316a92fd6c1335f03ff3a",
        "urls": [
          "bzz-raw://bc0858bb7a2c05013eb6352cc47087d6334824a32cc8545e549dddcf69a0dc31",
          "dweb:/ipfs/QmPMDq6F9G9u4nGEQTUPpUv7pm3cm3vY5hcb6ue9paEmGS"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/PrimarySale.sol": {
        "keccak256": "0x9ef1ad82fadf988a07f4034b92ccdb3281682693e41759a79042814d36095f42",
        "urls": [
          "bzz-raw://0d962b48453e1f50b808193135c2f14265324fa8b75fe3b405ef7836e38921f7",
          "dweb:/ipfs/QmZDLNsZQj9kNcb15nBuWRpPwDdDvJS2gtFwqEs2Lwxb1N"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimCondition.sol": {
        "keccak256": "0x391e69970031edb30dfa59f8db33c7446b349cd5ec505fd99f0f0b672b19e6d6",
        "urls": [
          "bzz-raw://fd9eafca6098421f3aa25bf0a0b24386facc764b7ecb8e6ce4a890afa3c6d459",
          "dweb:/ipfs/QmPXTSX2ie5wsZ6FyXWS4YMa7aPpYNyza9Rym1n799B5LU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDropSinglePhase.sol": {
        "keccak256": "0xe0a451031e98104d0f4879ec61feab4626c85b234c8db8c6cdbf5c9d4bb58a36",
        "urls": [
          "bzz-raw://b651b6128a69e35eadca6633bfa91529ca917edd0601537e509ba3c6056bc7a9",
          "dweb:/ipfs/QmakTGgGyaT9MTCsxuPJmMaGBRX2sBzmKZnqqNb5oiHmnZ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IPrimarySale.sol": {
        "keccak256": "0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004",
        "urls": [
          "bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869",
          "dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF"
        ],
        "license": "Apache-2.0"
      },
      "contracts/interfaces/IWETH.sol": {
        "keccak256": "0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b",
        "urls": [
          "bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1",
          "dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/CurrencyTransferLib.sol": {
        "keccak256": "0x4b0dc7c0ca9e463b2efbf3e8177a40bab333f5669ab368cad98534678a81cbc3",
        "urls": [
          "bzz-raw://1d5e91c28bb509afcbb3da66bbbf03465de5b168937b604f1cab63397472388a",
          "dweb:/ipfs/QmTqs9U5eWAQzJxVwD9pMQAtjXxK59cvJ4xzYMUnfVCsp5"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/MerkleProof.sol": {
        "keccak256": "0xfeb51ecaba6f9c1649a143825dc3b7ca0eb9edff7787c7a54957dfd542f7ece0",
        "urls": [
          "bzz-raw://8819ab0f7546a6a0dc126d5dbf019ba015563220689f661b1da4174f7ce87bbf",
          "dweb:/ipfs/QmT6Q9YQGMJbCWhE6G4ze8dsqjMyewnErTNGgLFSAHkFU7"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      },
      "contracts/openzeppelin-presets/governance/utils/IVotes.sol": {
        "keccak256": "0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0",
        "urls": [
          "bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86",
          "dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/token/ERC20/ERC20.sol": {
        "keccak256": "0x0429da8e9a940fceb58b83ea0425489dccf4f0c2178625dac6864c889c96f43f",
        "urls": [
          "bzz-raw://1519284bd9276de5bb35f3fea2068e718518e179091ca494652b0fddfa1ea940",
          "dweb:/ipfs/QmTbZkyEFbgTLA8ehLgs29JLGaqrGdUNJQxagN8dFiiSma"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/token/ERC20/extensions/ERC20Permit.sol": {
        "keccak256": "0x409682c602fff6428b40be9c454a3dca04e3c891a9dec03ad923da083b336312",
        "urls": [
          "bzz-raw://692a8d672cf6a5c87d4ff10520e7f440496fa3896fe4b3f0bd15a5af6155e032",
          "dweb:/ipfs/QmXnzi7Y3rP8wfRy71j5BsRPZAAmbQ2SMGcQdEdt4N7fYT"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/token/ERC20/extensions/ERC20Votes.sol": {
        "keccak256": "0x885363e8b8508655b2a319a9a8e12d3d5a0e4f5cadcf4f1330246039af20de40",
        "urls": [
          "bzz-raw://fad64730d16bbc0e0f0734b4a7eb423a089c0f970c1df22be0bfa90a65f7d9d8",
          "dweb:/ipfs/QmaDpR975EEVJnmNXq5Fkf2a7dQixdMKuxwk2ESg37tZE9"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0x293d8d7a3502950df5b9d6d36fcad85ca758f06dd946cdc8645cac1aa56686c4",
        "urls": [
          "bzz-raw://3cd805dbdcf6b7cebcd47201badbd7f7464e49eec51c4e0627b899ece1b04790",
          "dweb:/ipfs/QmRP3JYK4wzDaRrk9so6m433TuqHW9axAXLLnQAjCp2Gs4"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/utils/Counters.sol": {
        "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
        "urls": [
          "bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
          "dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/utils/cryptography/ECDSA.sol": {
        "keccak256": "0xe7c8a90c658962ae2d706fb5a4e522404b11a06347d36186e0d64a26d8f58d2e",
        "urls": [
          "bzz-raw://1e6b4d213258d6693acd3b6131f723e01bf2629c48520103986c5ec039f144f8",
          "dweb:/ipfs/QmQvzsASAkfs4BwPSKE4Quu3dxzseHNBehNntLyGfdwJuN"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/utils/cryptography/EIP712.sol": {
        "keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
        "urls": [
          "bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
          "dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/utils/math/Math.sol": {
        "keccak256": "0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2",
        "urls": [
          "bzz-raw://ab84f13e6e6e0823854a0cddd49e96df052092d5919f95587607f0ed28a64cb6",
          "dweb:/ipfs/QmbNtqAq23ZDjCzHukQaa7B3y6rcobscm6FZF5PMQXcnVr"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/utils/math/SafeCast.sol": {
        "keccak256": "0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7",
        "urls": [
          "bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1",
          "dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC20DropVote.sol",
    "id": 9844,
    "exportedSymbols": {
      "Context": [
        78641
      ],
      "ContractMetadata": [
        34723
      ],
      "Counters": [
        78715
      ],
      "CurrencyTransferLib": [
        64493
      ],
      "DropSinglePhase": [
        36774
      ],
      "ECDSA": [
        79903
      ],
      "EIP712": [
        80057
      ],
      "ERC20": [
        77414
      ],
      "ERC20DropVote": [
        9843
      ],
      "ERC20Permit": [
        77656
      ],
      "ERC20Votes": [
        78303
      ],
      "IClaimCondition": [
        49527
      ],
      "IContractMetadata": [
        49679
      ],
      "IDropSinglePhase": [
        49949
      ],
      "IERC20": [
        31216
      ],
      "IERC20Metadata": [
        31235
      ],
      "IERC20Permit": [
        31271
      ],
      "IMulticall": [
        50168
      ],
      "IOwnable": [
        50418
      ],
      "IPrimarySale": [
        50580
      ],
      "IVotes": [
        75542
      ],
      "IWETH": [
        55699
      ],
      "Math": [
        80145
      ],
      "MerkleProof": [
        64593
      ],
      "Multicall": [
        37872
      ],
      "Ownable": [
        38400
      ],
      "PrimarySale": [
        39318
      ],
      "SafeCast": [
        80538
      ],
      "SafeERC20": [
        78527
      ],
      "TWAddress": [
        65067
      ],
      "TWStrings": [
        65767
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4947:24",
    "nodes": [
      {
        "id": 9591,
        "nodeType": "PragmaDirective",
        "src": "39:23:24",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 9592,
        "nodeType": "ImportDirective",
        "src": "86:71:24",
        "nodes": [],
        "absolutePath": "contracts/openzeppelin-presets/token/ERC20/extensions/ERC20Votes.sol",
        "file": "../openzeppelin-presets/token/ERC20/extensions/ERC20Votes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 9844,
        "sourceUnit": 78304,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 9593,
        "nodeType": "ImportDirective",
        "src": "159:43:24",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 9844,
        "sourceUnit": 34724,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 9594,
        "nodeType": "ImportDirective",
        "src": "203:36:24",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 9844,
        "sourceUnit": 37873,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 9595,
        "nodeType": "ImportDirective",
        "src": "240:34:24",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 9844,
        "sourceUnit": 38401,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 9596,
        "nodeType": "ImportDirective",
        "src": "275:38:24",
        "nodes": [],
        "absolutePath": "contracts/extension/PrimarySale.sol",
        "file": "../extension/PrimarySale.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 9844,
        "sourceUnit": 39319,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 9597,
        "nodeType": "ImportDirective",
        "src": "314:42:24",
        "nodes": [],
        "absolutePath": "contracts/extension/DropSinglePhase.sol",
        "file": "../extension/DropSinglePhase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 9844,
        "sourceUnit": 36775,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 9598,
        "nodeType": "ImportDirective",
        "src": "358:40:24",
        "nodes": [],
        "absolutePath": "contracts/lib/CurrencyTransferLib.sol",
        "file": "../lib/CurrencyTransferLib.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 9844,
        "sourceUnit": 64494,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 9843,
        "nodeType": "ContractDefinition",
        "src": "1299:3686:24",
        "nodes": [
          {
            "id": 9635,
            "nodeType": "FunctionDefinition",
            "src": "1589:278:24",
            "nodes": [],
            "body": {
              "id": 9634,
              "nodeType": "Block",
              "src": "1765:102:24",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 9627,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9613,
                        "src": "1787:13:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 9626,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38393,
                      "src": "1775:11:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 9628,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1775:26:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9629,
                  "nodeType": "ExpressionStatement",
                  "src": "1775:26:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 9631,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9619,
                        "src": "1838:21:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 9630,
                      "name": "_setupPrimarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39311,
                      "src": "1811:26:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 9632,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1811:49:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9633,
                  "nodeType": "ExpressionStatement",
                  "src": "1811:49:24"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 9622,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 9615,
                    "src": "1749:5:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 9623,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 9617,
                    "src": "1756:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 9624,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 9621,
                  "name": "ERC20Permit",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 77656,
                  "src": "1737:11:24"
                },
                "nodeType": "ModifierInvocation",
                "src": "1737:27:24"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 9620,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9613,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1618:13:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9635,
                  "src": "1610:21:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9612,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1610:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9615,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1655:5:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9635,
                  "src": "1641:19:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 9614,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1641:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9617,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1684:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9635,
                  "src": "1670:21:24",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 9616,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1670:6:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9619,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "1709:21:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9635,
                  "src": "1701:29:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9618,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1701:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1600:136:24"
            },
            "returnParameters": {
              "id": 9625,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1765:0:24"
            },
            "scope": 9843,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 9658,
            "nodeType": "FunctionDefinition",
            "src": "2269:164:24",
            "nodes": [],
            "body": {
              "id": 9657,
              "nodeType": "Block",
              "src": "2317:116:24",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 9647,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 9643,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "2345:3:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 9644,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2345:10:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 9642,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 76925,
                            "src": "2335:9:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 9645,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2335:21:24",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 9646,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9638,
                          "src": "2360:7:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2335:32:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f7420656e6f7567682062616c616e6365",
                        "id": 9648,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2369:20:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        },
                        "value": "not enough balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_596712763af5ad819c1a1c8db05ac93e50918d28937626717ff5e1d919b4454a",
                          "typeString": "literal_string \"not enough balance\""
                        }
                      ],
                      "id": 9641,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2327:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 9649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2327:63:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9650,
                  "nodeType": "ExpressionStatement",
                  "src": "2327:63:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 9652,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2406:3:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 9653,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2406:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 9654,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9638,
                        "src": "2418:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 9651,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        78040
                      ],
                      "referencedDeclaration": 78040,
                      "src": "2400:5:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 9655,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2400:26:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9656,
                  "nodeType": "ExpressionStatement",
                  "src": "2400:26:24"
                }
              ]
            },
            "documentation": {
              "id": 9636,
              "nodeType": "StructuredDocumentation",
              "src": "2052:212:24",
              "text": "  @notice          Lets an owner a given amount of their tokens.\n  @dev             Caller should own the `_amount` of tokens.\n  @param _amount   The number of tokens to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "2278:4:24",
            "parameters": {
              "id": 9639,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9638,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2291:7:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9658,
                  "src": "2283:15:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9637,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2283:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2282:17:24"
            },
            "returnParameters": {
              "id": 9640,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2317:0:24"
            },
            "scope": 9843,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 9754,
            "nodeType": "FunctionDefinition",
            "src": "2722:925:24",
            "nodes": [],
            "body": {
              "id": 9753,
              "nodeType": "Block",
              "src": "2916:731:24",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 9673,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 9671,
                      "name": "_pricePerToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9667,
                      "src": "2930:14:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 9672,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2948:1:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2930:19:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 9684,
                  "nodeType": "IfStatement",
                  "src": "2926:103:24",
                  "trueBody": {
                    "id": 9683,
                    "nodeType": "Block",
                    "src": "2951:78:24",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 9678,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 9675,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "2973:3:24",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 9676,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "2973:9:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 9677,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2986:1:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2973:14:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "2156616c7565",
                              "id": 9679,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2989:8:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              },
                              "value": "!Value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_208006903b0d1b8c530b3b2de29e1f765aa4311b3f136f1a342e9de039eda1b1",
                                "typeString": "literal_string \"!Value\""
                              }
                            ],
                            "id": 9674,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2965:7:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 9680,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2965:33:24",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 9681,
                        "nodeType": "ExpressionStatement",
                        "src": "2965:33:24"
                      },
                      {
                        "functionReturnParameters": 9670,
                        "id": 9682,
                        "nodeType": "Return",
                        "src": "3012:7:24"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    9686
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 9686,
                      "mutability": "mutable",
                      "name": "totalPrice",
                      "nameLocation": "3047:10:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 9753,
                      "src": "3039:18:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 9685,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3039:7:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 9693,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 9692,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 9689,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 9687,
                            "name": "_quantityToClaim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9663,
                            "src": "3061:16:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 9688,
                            "name": "_pricePerToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9667,
                            "src": "3080:14:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3061:33:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 9690,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "3060:35:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 9691,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3098:7:24",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      },
                      "value": "1"
                    },
                    "src": "3060:45:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3039:66:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 9697,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 9695,
                          "name": "totalPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9686,
                          "src": "3123:10:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 9696,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3136:1:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3123:14:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7175616e7469747920746f6f206c6f77",
                        "id": 9698,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3139:18:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_95a3372d1911e2925e89e306668e1a589c72f142035fcdac95957bce7fe59721",
                          "typeString": "literal_string \"quantity too low\""
                        },
                        "value": "quantity too low"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_95a3372d1911e2925e89e306668e1a589c72f142035fcdac95957bce7fe59721",
                          "typeString": "literal_string \"quantity too low\""
                        }
                      ],
                      "id": 9694,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3115:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 9699,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3115:43:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9700,
                  "nodeType": "ExpressionStatement",
                  "src": "3115:43:24"
                },
                {
                  "assignments": [
                    9702
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 9702,
                      "mutability": "mutable",
                      "name": "validMsgValue",
                      "nameLocation": "3174:13:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 9753,
                      "src": "3169:18:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 9701,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3169:4:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 9703,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3169:18:24"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 9707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 9704,
                      "name": "_currency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9665,
                      "src": "3201:9:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 9705,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 64493,
                        "src": "3214:19:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$64493_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 9706,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "NATIVE_TOKEN",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64261,
                      "src": "3214:32:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3201:45:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 9723,
                    "nodeType": "Block",
                    "src": "3318:55:24",
                    "statements": [
                      {
                        "expression": {
                          "id": 9721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 9716,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9702,
                            "src": "3332:13:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 9720,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 9717,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "3348:3:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 9718,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "3348:9:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 9719,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3361:1:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3348:14:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3332:30:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 9722,
                        "nodeType": "ExpressionStatement",
                        "src": "3332:30:24"
                      }
                    ]
                  },
                  "id": 9724,
                  "nodeType": "IfStatement",
                  "src": "3197:176:24",
                  "trueBody": {
                    "id": 9715,
                    "nodeType": "Block",
                    "src": "3248:64:24",
                    "statements": [
                      {
                        "expression": {
                          "id": 9713,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 9708,
                            "name": "validMsgValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9702,
                            "src": "3262:13:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 9712,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 9709,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "3278:3:24",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 9710,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "3278:9:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 9711,
                              "name": "totalPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9686,
                              "src": "3291:10:24",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3278:23:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3262:39:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 9714,
                        "nodeType": "ExpressionStatement",
                        "src": "3262:39:24"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 9726,
                        "name": "validMsgValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9702,
                        "src": "3390:13:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c6964206d73672076616c7565",
                        "id": 9727,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3405:19:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        },
                        "value": "Invalid msg value"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de0d8376eff7771bcc57765656c140a92c651b9eeb4df686f809560770e7fe49",
                          "typeString": "literal_string \"Invalid msg value\""
                        }
                      ],
                      "id": 9725,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3382:7:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 9728,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3382:43:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9729,
                  "nodeType": "ExpressionStatement",
                  "src": "3382:43:24"
                },
                {
                  "assignments": [
                    9731
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 9731,
                      "mutability": "mutable",
                      "name": "saleRecipient",
                      "nameLocation": "3444:13:24",
                      "nodeType": "VariableDeclaration",
                      "scope": 9753,
                      "src": "3436:21:24",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 9730,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3436:7:24",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 9742,
                  "initialValue": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 9737,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 9732,
                        "name": "_primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9661,
                        "src": "3460:21:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 9735,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3493:1:24",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 9734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3485:7:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 9733,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3485:7:24",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 9736,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3485:10:24",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3460:35:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 9740,
                      "name": "_primarySaleRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9661,
                      "src": "3523:21:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 9741,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "3460:84:24",
                    "trueExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9738,
                        "name": "primarySaleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39275,
                        "src": "3498:20:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 9739,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3498:22:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3436:108:24"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 9746,
                        "name": "_currency",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9665,
                        "src": "3591:9:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 9747,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3602:3:24",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 9748,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3602:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 9749,
                        "name": "saleRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9731,
                        "src": "3614:13:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 9750,
                        "name": "totalPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9686,
                        "src": "3629:10:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 9743,
                        "name": "CurrencyTransferLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 64493,
                        "src": "3554:19:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CurrencyTransferLib_$64493_$",
                          "typeString": "type(library CurrencyTransferLib)"
                        }
                      },
                      "id": 9745,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferCurrency",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 64298,
                      "src": "3554:36:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256)"
                      }
                    },
                    "id": 9751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3554:86:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9752,
                  "nodeType": "ExpressionStatement",
                  "src": "3554:86:24"
                }
              ]
            },
            "baseFunctions": [
              36758
            ],
            "documentation": {
              "id": 9659,
              "nodeType": "StructuredDocumentation",
              "src": "2636:81:24",
              "text": "@dev Collects and distributes the primary sale value of tokens being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_collectPriceOnClaim",
            "nameLocation": "2731:20:24",
            "overrides": {
              "id": 9669,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2907:8:24"
            },
            "parameters": {
              "id": 9668,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9661,
                  "mutability": "mutable",
                  "name": "_primarySaleRecipient",
                  "nameLocation": "2769:21:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9754,
                  "src": "2761:29:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9660,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2761:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9663,
                  "mutability": "mutable",
                  "name": "_quantityToClaim",
                  "nameLocation": "2808:16:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9754,
                  "src": "2800:24:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9662,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2800:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9665,
                  "mutability": "mutable",
                  "name": "_currency",
                  "nameLocation": "2842:9:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9754,
                  "src": "2834:17:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9664,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2834:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9667,
                  "mutability": "mutable",
                  "name": "_pricePerToken",
                  "nameLocation": "2869:14:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9754,
                  "src": "2861:22:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9666,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2861:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2751:138:24"
            },
            "returnParameters": {
              "id": 9670,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2916:0:24"
            },
            "scope": 9843,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 9773,
            "nodeType": "FunctionDefinition",
            "src": "3702:224:24",
            "nodes": [],
            "body": {
              "id": 9772,
              "nodeType": "Block",
              "src": "3858:68:24",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 9766,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9757,
                        "src": "3874:3:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 9767,
                        "name": "_quantityBeingClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9759,
                        "src": "3879:21:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 9765,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        78017
                      ],
                      "referencedDeclaration": 78017,
                      "src": "3868:5:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 9768,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3868:33:24",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9769,
                  "nodeType": "ExpressionStatement",
                  "src": "3868:33:24"
                },
                {
                  "expression": {
                    "hexValue": "30",
                    "id": 9770,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3918:1:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "functionReturnParameters": 9764,
                  "id": 9771,
                  "nodeType": "Return",
                  "src": "3911:8:24"
                }
              ]
            },
            "baseFunctions": [
              36768
            ],
            "documentation": {
              "id": 9755,
              "nodeType": "StructuredDocumentation",
              "src": "3653:44:24",
              "text": "@dev Transfers the tokens being claimed."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "3711:22:24",
            "overrides": {
              "id": 9761,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3819:8:24"
            },
            "parameters": {
              "id": 9760,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9757,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "3742:3:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9773,
                  "src": "3734:11:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9756,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3734:7:24",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9759,
                  "mutability": "mutable",
                  "name": "_quantityBeingClaimed",
                  "nameLocation": "3755:21:24",
                  "nodeType": "VariableDeclaration",
                  "scope": 9773,
                  "src": "3747:29:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9758,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3747:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3733:44:24"
            },
            "returnParameters": {
              "id": 9764,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9763,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 9773,
                  "src": "3845:7:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9762,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3845:7:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3844:9:24"
            },
            "scope": 9843,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 9787,
            "nodeType": "FunctionDefinition",
            "src": "4021:125:24",
            "nodes": [],
            "body": {
              "id": 9786,
              "nodeType": "Block",
              "src": "4101:45:24",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 9784,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 9780,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4118:3:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 9781,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4118:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9782,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "4132:5:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 9783,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4132:7:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4118:21:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 9779,
                  "id": 9785,
                  "nodeType": "Return",
                  "src": "4111:28:24"
                }
              ]
            },
            "baseFunctions": [
              36773
            ],
            "documentation": {
              "id": 9774,
              "nodeType": "StructuredDocumentation",
              "src": "3932:84:24",
              "text": "@dev Checks whether platform fee info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetClaimConditions",
            "nameLocation": "4030:22:24",
            "overrides": {
              "id": 9776,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4077:8:24"
            },
            "parameters": {
              "id": 9775,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4052:2:24"
            },
            "returnParameters": {
              "id": 9779,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9778,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 9787,
                  "src": "4095:4:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9777,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4095:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4094:6:24"
            },
            "scope": 9843,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 9801,
            "nodeType": "FunctionDefinition",
            "src": "4242:121:24",
            "nodes": [],
            "body": {
              "id": 9800,
              "nodeType": "Block",
              "src": "4318:45:24",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 9798,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 9794,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4335:3:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 9795,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4335:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9796,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "4349:5:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 9797,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4349:7:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4335:21:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 9793,
                  "id": 9799,
                  "nodeType": "Return",
                  "src": "4328:28:24"
                }
              ]
            },
            "baseFunctions": [
              34722
            ],
            "documentation": {
              "id": 9788,
              "nodeType": "StructuredDocumentation",
              "src": "4152:85:24",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "4251:18:24",
            "overrides": {
              "id": 9790,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4294:8:24"
            },
            "parameters": {
              "id": 9789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4269:2:24"
            },
            "returnParameters": {
              "id": 9793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9792,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 9801,
                  "src": "4312:4:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9791,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4312:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4311:6:24"
            },
            "scope": 9843,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 9814,
            "nodeType": "FunctionDefinition",
            "src": "4451:102:24",
            "nodes": [],
            "body": {
              "id": 9813,
              "nodeType": "Block",
              "src": "4508:45:24",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 9811,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 9807,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4525:3:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 9808,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4525:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9809,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "4539:5:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 9810,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4539:7:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4525:21:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 9806,
                  "id": 9812,
                  "nodeType": "Return",
                  "src": "4518:28:24"
                }
              ]
            },
            "documentation": {
              "id": 9802,
              "nodeType": "StructuredDocumentation",
              "src": "4369:77:24",
              "text": "@dev Returns whether tokens can be minted in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canMint",
            "nameLocation": "4460:8:24",
            "parameters": {
              "id": 9803,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4468:2:24"
            },
            "returnParameters": {
              "id": 9806,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9805,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 9814,
                  "src": "4502:4:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9804,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4502:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4501:6:24"
            },
            "scope": 9843,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 9828,
            "nodeType": "FunctionDefinition",
            "src": "4637:115:24",
            "nodes": [],
            "body": {
              "id": 9827,
              "nodeType": "Block",
              "src": "4707:45:24",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 9825,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 9821,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4724:3:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 9822,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4724:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9823,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "4738:5:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 9824,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4738:7:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4724:21:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 9820,
                  "id": 9826,
                  "nodeType": "Return",
                  "src": "4717:28:24"
                }
              ]
            },
            "baseFunctions": [
              38399
            ],
            "documentation": {
              "id": 9815,
              "nodeType": "StructuredDocumentation",
              "src": "4559:73:24",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "4646:12:24",
            "overrides": {
              "id": 9817,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4683:8:24"
            },
            "parameters": {
              "id": 9816,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4658:2:24"
            },
            "returnParameters": {
              "id": 9820,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9819,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 9828,
                  "src": "4701:4:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9818,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4701:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4700:6:24"
            },
            "scope": 9843,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 9842,
            "nodeType": "FunctionDefinition",
            "src": "4853:130:24",
            "nodes": [],
            "body": {
              "id": 9841,
              "nodeType": "Block",
              "src": "4938:45:24",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 9839,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 9835,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4955:3:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 9836,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4955:10:24",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9837,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "4969:5:24",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 9838,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4969:7:24",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4955:21:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 9834,
                  "id": 9840,
                  "nodeType": "Return",
                  "src": "4948:28:24"
                }
              ]
            },
            "baseFunctions": [
              39317
            ],
            "documentation": {
              "id": 9829,
              "nodeType": "StructuredDocumentation",
              "src": "4758:90:24",
              "text": "@dev Returns whether primary sale recipient can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetPrimarySaleRecipient",
            "nameLocation": "4862:27:24",
            "overrides": {
              "id": 9831,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4914:8:24"
            },
            "parameters": {
              "id": 9830,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4889:2:24"
            },
            "returnParameters": {
              "id": 9834,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9833,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 9842,
                  "src": "4932:4:24",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9832,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4932:4:24",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4931:6:24"
            },
            "scope": 9843,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 9600,
              "name": "ContractMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 34723,
              "src": "1325:16:24"
            },
            "id": 9601,
            "nodeType": "InheritanceSpecifier",
            "src": "1325:16:24"
          },
          {
            "baseName": {
              "id": 9602,
              "name": "Multicall",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 37872,
              "src": "1343:9:24"
            },
            "id": 9603,
            "nodeType": "InheritanceSpecifier",
            "src": "1343:9:24"
          },
          {
            "baseName": {
              "id": 9604,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 38400,
              "src": "1354:7:24"
            },
            "id": 9605,
            "nodeType": "InheritanceSpecifier",
            "src": "1354:7:24"
          },
          {
            "baseName": {
              "id": 9606,
              "name": "ERC20Votes",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 78303,
              "src": "1363:10:24"
            },
            "id": 9607,
            "nodeType": "InheritanceSpecifier",
            "src": "1363:10:24"
          },
          {
            "baseName": {
              "id": 9608,
              "name": "PrimarySale",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 39318,
              "src": "1375:11:24"
            },
            "id": 9609,
            "nodeType": "InheritanceSpecifier",
            "src": "1375:11:24"
          },
          {
            "baseName": {
              "id": 9610,
              "name": "DropSinglePhase",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 36774,
              "src": "1388:15:24"
            },
            "id": 9611,
            "nodeType": "InheritanceSpecifier",
            "src": "1388:15:24"
          }
        ],
        "canonicalName": "ERC20DropVote",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 9599,
          "nodeType": "StructuredDocumentation",
          "src": "400:897:24",
          "text": "      BASE:      ERC20Votes\n      EXTENSION: DropSinglePhase\n  The `ERC20Drop` contract uses the `DropSinglePhase` extensions, along with `ERC20Votes`.\n  It implements the ERC20 standard, along with the following additions to standard ERC20 logic:\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2612 compliance: See {ERC20-permit} method, which can be used to change an account's ERC20 allowance by\n                             presenting a message signed by the account.\n  The `drop` mechanism in the `DropSinglePhase` extension is a distribution mechanism tokens. It lets\n  you set restrictions such as a price to charge, an allowlist etc. when an address atttempts to mint tokens."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          9843,
          36774,
          49949,
          49527,
          39318,
          50580,
          78303,
          77656,
          31271,
          77414,
          31235,
          31216,
          78641,
          75542,
          38400,
          50418,
          37872,
          50168,
          34723,
          49679
        ],
        "name": "ERC20DropVote",
        "nameLocation": "1308:13:24",
        "scope": 9844,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 24
}