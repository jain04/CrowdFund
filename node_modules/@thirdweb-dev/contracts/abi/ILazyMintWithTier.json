{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "tier",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tier",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "lazyMint(uint256,string,string,bytes)": "e28411ea"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tier\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"TokensLazyMinted(string,uint256,uint256,string,bytes)\":{\"details\":\"Emitted when tokens are lazy minted.\"}},\"kind\":\"dev\",\"methods\":{\"lazyMint(uint256,string,string,bytes)\":{\"params\":{\"amount\":\"The number of NFTs to lazy mint.\",\"baseURIForTokens\":\"The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                          of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"extraData\":\"Additional bytes data to be used at the discretion of the consumer of the contract.\",\"tier\":\"The tier for which these tokens are being lazy mitned. Here, `tier` is a unique string label                          that is used to group together different batches of lazy minted tokens under a common category.\"},\"returns\":{\"batchId\":\"        A unique integer identifier for the batch of NFTs lazy minted together.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"lazyMint(uint256,string,string,bytes)\":{\"notice\":\"Lazy mints a given amount of NFTs.\"}},\"notice\":\"Thirdweb's `LazyMintWithTier` is a contract extension for any base NFT contract. It lets you 'lazy mint' any number of NFTs  at once, for a particular tier. Here, 'lazy mint' means defining the metadata for particular tokenIds of your NFT contract,  without actually minting a non-zero balance of NFTs of those tokenIds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/ILazyMintWithTier.sol\":\"ILazyMintWithTier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/extension/interface/ILazyMintWithTier.sol\":{\"keccak256\":\"0x5289a851e3d011003c08ab4fb2eb88670492f55f10d956a99cabfe786cbe1c0d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://351c11112ee7a1d91af1b8cfc28014c0c8eddb8d16e4ac0d8dafd29d82857f55\",\"dweb:/ipfs/QmYxrySjcq67Hi5gNbUvnWeavT8BavdUbumpvU3yXiRpVh\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "tier",
              "type": "string",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tier",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "lazyMint(uint256,string,string,bytes)": {
            "params": {
              "amount": "The number of NFTs to lazy mint.",
              "baseURIForTokens": "The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                          of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "extraData": "Additional bytes data to be used at the discretion of the consumer of the contract.",
              "tier": "The tier for which these tokens are being lazy mitned. Here, `tier` is a unique string label                          that is used to group together different batches of lazy minted tokens under a common category."
            },
            "returns": {
              "batchId": "        A unique integer identifier for the batch of NFTs lazy minted together."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "lazyMint(uint256,string,string,bytes)": {
            "notice": "Lazy mints a given amount of NFTs."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/extension/interface/ILazyMintWithTier.sol": "ILazyMintWithTier"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/extension/interface/ILazyMintWithTier.sol": {
        "keccak256": "0x5289a851e3d011003c08ab4fb2eb88670492f55f10d956a99cabfe786cbe1c0d",
        "urls": [
          "bzz-raw://351c11112ee7a1d91af1b8cfc28014c0c8eddb8d16e4ac0d8dafd29d82857f55",
          "dweb:/ipfs/QmYxrySjcq67Hi5gNbUvnWeavT8BavdUbumpvU3yXiRpVh"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/extension/interface/ILazyMintWithTier.sol",
    "id": 50086,
    "exportedSymbols": {
      "ILazyMintWithTier": [
        50085
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:1691:180",
    "nodes": [
      {
        "id": 50056,
        "nodeType": "PragmaDirective",
        "src": "39:23:180",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 50085,
        "nodeType": "ContractDefinition",
        "src": "426:1303:180",
        "nodes": [
          {
            "id": 50070,
            "nodeType": "EventDefinition",
            "src": "510:180:180",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 50058,
              "nodeType": "StructuredDocumentation",
              "src": "460:45:180",
              "text": "@dev Emitted when tokens are lazy minted."
            },
            "name": "TokensLazyMinted",
            "nameLocation": "516:16:180",
            "parameters": {
              "id": 50069,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50060,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tier",
                  "nameLocation": "557:4:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50070,
                  "src": "542:19:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 50059,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "542:6:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50062,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "587:12:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50070,
                  "src": "571:28:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 50061,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "571:7:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50064,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endTokenId",
                  "nameLocation": "617:10:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50070,
                  "src": "609:18:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 50063,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "609:7:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50066,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "baseURI",
                  "nameLocation": "644:7:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50070,
                  "src": "637:14:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 50065,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "637:6:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50068,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "encryptedBaseURI",
                  "nameLocation": "667:16:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50070,
                  "src": "661:22:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 50067,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "661:5:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "532:157:180"
            }
          },
          {
            "id": 50084,
            "nodeType": "FunctionDefinition",
            "src": "1538:189:180",
            "nodes": [],
            "documentation": {
              "id": 50071,
              "nodeType": "StructuredDocumentation",
              "src": "696:837:180",
              "text": "  @notice Lazy mints a given amount of NFTs.\n  @param amount           The number of NFTs to lazy mint.\n  @param baseURIForTokens The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each\n                          of those NFTs is `${baseURIForTokens}/${tokenId}`.\n  @param tier             The tier for which these tokens are being lazy mitned. Here, `tier` is a unique string label\n                          that is used to group together different batches of lazy minted tokens under a common category.\n  @param extraData        Additional bytes data to be used at the discretion of the consumer of the contract.\n  @return batchId         A unique integer identifier for the batch of NFTs lazy minted together."
            },
            "functionSelector": "e28411ea",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lazyMint",
            "nameLocation": "1547:8:180",
            "parameters": {
              "id": 50080,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50073,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1573:6:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50084,
                  "src": "1565:14:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 50072,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1565:7:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50075,
                  "mutability": "mutable",
                  "name": "baseURIForTokens",
                  "nameLocation": "1605:16:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50084,
                  "src": "1589:32:180",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 50074,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1589:6:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50077,
                  "mutability": "mutable",
                  "name": "tier",
                  "nameLocation": "1647:4:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50084,
                  "src": "1631:20:180",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 50076,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1631:6:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50079,
                  "mutability": "mutable",
                  "name": "extraData",
                  "nameLocation": "1676:9:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50084,
                  "src": "1661:24:180",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 50078,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1661:5:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1555:136:180"
            },
            "returnParameters": {
              "id": 50083,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50082,
                  "mutability": "mutable",
                  "name": "batchId",
                  "nameLocation": "1718:7:180",
                  "nodeType": "VariableDeclaration",
                  "scope": 50084,
                  "src": "1710:15:180",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 50081,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1710:7:180",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1709:17:180"
            },
            "scope": 50085,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ILazyMintWithTier",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 50057,
          "nodeType": "StructuredDocumentation",
          "src": "86:338:180",
          "text": "  Thirdweb's `LazyMintWithTier` is a contract extension for any base NFT contract. It lets you 'lazy mint' any number of NFTs\n  at once, for a particular tier. Here, 'lazy mint' means defining the metadata for particular tokenIds of your NFT contract,\n  without actually minting a non-zero balance of NFTs of those tokenIds."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          50085
        ],
        "name": "ILazyMintWithTier",
        "nameLocation": "436:17:180",
        "scope": 50086,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 180
}