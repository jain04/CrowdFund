{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "restriction",
          "type": "bool"
        }
      ],
      "name": "OperatorRestriction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OPERATOR_FILTER_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorRestriction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_restriction",
          "type": "bool"
        }
      ],
      "name": "setOperatorRestriction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscription",
          "type": "address"
        }
      ],
      "name": "subscribeToRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "1646:8354:31:-:0;;;2076:345;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;413:42:117;516:4;2257:5:31;2264:7;1893:5:87;1885;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1908:17:87;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;2121:7:87;1935:31;;-1:-1:-1;1313:52:130;1323:30;1355:9;1313;:52::i;:::-;-1:-1:-1;;202:1:313;307:7;:22;2283:26:31::1;2295:13:::0;2283:11:::1;:26::i;:::-;2319:56;2344:17:::0;-1:-1:-1;;;;;2319:56:31;::::1;:24;:56::i;:::-;2385:29;2409:4;2385:23;:29::i;:::-;2076:345:::0;;;;;1646:8354;;2349:783:130;905:42;2484:45;:49;2480:646;;-1:-1:-1;;;;;2607:51:130;;;:55;2603:513;;2730:9;2726:289;;;2763:92;;-1:-1:-1;;;2763:92:130;;2817:4;2763:92;;;2336:34:641;-1:-1:-1;;;;;2406:15:641;;2386:18;;;2379:43;905:42:130;;2763:45;;2271:18:641;;2763:92:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2349:783;;:::o;2726:289::-;2902:94;;-1:-1:-1;;;2902:94:130;;2958:4;2902:94;;;2336:34:641;-1:-1:-1;;;;;2406:15:641;;2386:18;;;2379:43;905:42:130;;2902:47;;2271:18:641;;2902:94:130;2124:304:641;2603:513:130;3053:48;;-1:-1:-1;;;3053:48:130;;3095:4;3053:48;;;2579:51:641;905:42:130;;3053:33;;2552:18:641;;3053:48:130;;;;;;;;;;;;;;;;;;;2603:513;2349:783;;:::o;1421:172:132:-;1501:6;;;-1:-1:-1;;;;;1517:18:132;;;-1:-1:-1;;;;;;1517:18:132;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3430:334:139:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:139;;2843:2:641;3571:25:139;;;2825:21:641;2882:2;2862:18;;;2855:30;-1:-1:-1;;;2901:18:641;;;2894:45;2956:18;;3571:25:139;;;;;;;3531:76;3617:16;:36;;-1:-1:-1;;;;;3617:36:139;;-1:-1:-1;;;;;;3663:32:139;;;;;-1:-1:-1;;;3663:32:139;;;;;;;;3711:46;;3131:25:641;;;3711:46:139;;3119:2:641;3104:18;3711:46:139;;;;;;;3430:334;;:::o;457:160:129:-;528:19;:34;;-1:-1:-1;;528:34:129;;;;;;;;;;577:33;;3307:41:641;;;577:33:129;;3295:2:641;3280:18;577:33:129;;;;;;;457:160;:::o;1646:8354:31:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1646:8354:31;;;-1:-1:-1;1646:8354:31;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:641;93:13;;-1:-1:-1;;;;;135:31:641;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:885;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:641;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:641;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;912:3;907:2;902;894:6;890:15;886:24;883:33;880:53;;;929:1;926;919:12;880:53;951:1;942:10;;961:133;975:2;972:1;969:9;961:133;;;1063:14;;;1059:23;;1053:30;1032:14;;;1028:23;;1021:63;986:10;;;;961:133;;;1112:2;1109:1;1106:9;1103:80;;;1171:1;1166:2;1161;1153:6;1149:15;1145:24;1138:35;1103:80;1201:6;328:885;-1:-1:-1;;;;;;328:885:641:o;1218:901::-;1344:6;1352;1360;1368;1376;1429:3;1417:9;1408:7;1404:23;1400:33;1397:53;;;1446:1;1443;1436:12;1397:53;1469:40;1499:9;1469:40;:::i;:::-;1553:2;1538:18;;1532:25;1459:50;;-1:-1:-1;;;;;;1606:14:641;;;1603:34;;;1633:1;1630;1623:12;1603:34;1656:61;1709:7;1700:6;1689:9;1685:22;1656:61;:::i;:::-;1646:71;;1763:2;1752:9;1748:18;1742:25;1726:41;;1792:2;1782:8;1779:16;1776:36;;;1808:1;1805;1798:12;1776:36;;1831:63;1886:7;1875:8;1864:9;1860:24;1831:63;:::i;:::-;1821:73;;;1913:49;1958:2;1947:9;1943:18;1913:49;:::i;:::-;2005:3;1990:19;;1984:26;1903:59;;-1:-1:-1;;;;;;2039:31:641;;2029:42;;2019:70;;2085:1;2082;2075:12;2019:70;2108:5;2098:15;;;1218:901;;;;;;;;:::o;3359:380::-;3438:1;3434:12;;;;3481;;;3502:61;;3556:4;3548:6;3544:17;3534:27;;3502:61;3609:2;3601:6;3598:14;3578:18;3575:38;3572:161;;;3655:10;3650:3;3646:20;3643:1;3636:31;3690:4;3687:1;3680:15;3718:4;3715:1;3708:15;3572:161;;3359:380;;;:::o;:::-;1646:8354:31;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101af5760003560e01c8063600dd5ea116100e8578063600dd5ea1461044e5780636352211e1461046e57806363b45e2d1461048e57806370a08231146104a35780638da5cb5b146104c3578063938e3d7b146104d857806395d89b41146104f85780639bcf7a151461050d578063a22cb4651461052d578063aad3ec961461054d578063ac9650d814610560578063acd083f81461058d578063b24f2d39146105a2578063b88d4fde146105cd578063c87b56dd146105ed578063d37c353b1461060d578063e8a3d4851461062d578063e985e9c51461064257600080fd5b806301ffc9a7146101b457806306fdde03146101e9578063081812fc1461020b578063095ea7b31461023857806313af40351461025a57806318160ddd1461027a57806323b872dd1461029d5780632419f51b146102bd5780632a55205a146102dd5780632f92023a1461031c57806332f0cd641461033b5780633b1475a71461035b57806341f434341461037057806342842e0e1461039257806342966c68146103b25780634cc157df146103d2578063504c6e011461041457806357fd84551461042e575b600080fd5b3480156101c057600080fd5b506101d46101cf36600461227e565b61068b565b60405190151581526020015b60405180910390f35b3480156101f557600080fd5b506101fe6106f8565b6040516101e091906122f3565b34801561021757600080fd5b5061022b610226366004612306565b61078a565b6040516101e0919061231f565b34801561024457600080fd5b5061025861025336600461234f565b6107ce565b005b34801561026657600080fd5b50610258610275366004612379565b6107e7565b34801561028657600080fd5b50600154600054035b6040519081526020016101e0565b3480156102a957600080fd5b506102586102b8366004612394565b610820565b3480156102c957600080fd5b5061028f6102d8366004612306565b61084b565b3480156102e957600080fd5b506102fd6102f83660046123d0565b6108b9565b604080516001600160a01b0390931683526020830191909152016101e0565b34801561032857600080fd5b5061025861033736600461234f565b5050565b34801561034757600080fd5b50610258610356366004612400565b6108f6565b34801561036757600080fd5b50600e5461028f565b34801561037c57600080fd5b5061022b6daaeb6d7670e522a718067333cd4e81565b34801561039e57600080fd5b506102586103ad366004612394565b610967565b3480156103be57600080fd5b506102586103cd366004612306565b61098c565b3480156103de57600080fd5b506103f26103ed366004612306565b610997565b604080516001600160a01b03909316835261ffff9091166020830152016101e0565b34801561042057600080fd5b50600f546101d49060ff1681565b34801561043a57600080fd5b50610258610449366004612379565b610a02565b34801561045a57600080fd5b5061025861046936600461234f565b610a72565b34801561047a57600080fd5b5061022b610489366004612306565b610aa0565b34801561049a57600080fd5b50600c5461028f565b3480156104af57600080fd5b5061028f6104be366004612379565b610ab2565b3480156104cf57600080fd5b5061022b610b00565b3480156104e457600080fd5b506102586104f33660046124a8565b610b0f565b34801561050457600080fd5b506101fe610b3c565b34801561051957600080fd5b506102586105283660046124f0565b610b4b565b34801561053957600080fd5b50610258610548366004612515565b610b7a565b61025861055b36600461234f565b610b8e565b34801561056c57600080fd5b5061058061057b36600461254c565b610cab565b6040516101e091906125c0565b34801561059957600080fd5b5060005461028f565b3480156105ae57600080fd5b50600a546001600160a01b03811690600160a01b900461ffff166103f2565b3480156105d957600080fd5b506102586105e8366004612622565b610d9f565b3480156105f957600080fd5b506101fe610608366004612306565b610dcc565b34801561061957600080fd5b5061028f6106283660046126e5565b610e0d565b34801561063957600080fd5b506101fe610f17565b34801561064e57600080fd5b506101d461065d36600461275e565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b0319831614806106bc57506380ac58cd60e01b6001600160e01b03198316145b806106d75750635b5e139f60e01b6001600160e01b03198316145b806106f257506001600160e01b0319821663152a902d60e11b145b92915050565b60606002805461070790612791565b80601f016020809104026020016040519081016040528092919081815260200182805461073390612791565b80156107805780601f1061075557610100808354040283529160200191610780565b820191906000526020600020905b81548152906001019060200180831161076357829003601f168201915b5050505050905090565b600061079582610fa5565b6107b2576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b816107d881610fd0565b6107e28383611083565b505050565b6107ef611105565b6108145760405162461bcd60e51b815260040161080b906127cc565b60405180910390fd5b61081d81611128565b50565b826001600160a01b038116331461083a5761083a33610fd0565b61084584848461117a565b50505050565b6000610856600c5490565b82106108945760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161080b565b600c82815481106108a7576108a76127f4565b90600052602060002001549050919050565b6000806000806108c886610997565b90945084925061ffff1690506127106108e18287612820565b6108eb9190612855565b925050509250929050565b6108fe611105565b61095e5760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420617574686f72697a656420746f20736574206f70657261746f72207260448201526a32b9ba3934b1ba34b7b71760a91b606482015260840161080b565b61081d81611185565b826001600160a01b03811633146109815761098133610fd0565b6108458484846111cc565b61081d8160016111e7565b6000818152600b60209081526040808320815180830190925280546001600160a01b0316808352600190910154928201929092528291156109de57805160208201516109f8565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b610a0a611105565b610a675760405162461bcd60e51b815260206004820152602860248201527f4e6f7420617574686f72697a656420746f2073756273637269626520746f207260448201526732b3b4b9ba393c9760c11b606482015260840161080b565b61081d816001611396565b610a7a611105565b610a965760405162461bcd60e51b815260040161080b906127cc565b610337828261148e565b6000610aab82611512565b5192915050565b60006001600160a01b038216610adb576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6009546001600160a01b031690565b610b17611105565b610b335760405162461bcd60e51b815260040161080b906127cc565b61081d8161162c565b60606003805461070790612791565b610b53611105565b610b6f5760405162461bcd60e51b815260040161080b906127cc565b6107e283838361170e565b81610b8481610fd0565b6107e283836117b5565b60026010541415610be15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161080b565b6002601055600e54600054610bf7908390612869565b1115610c455760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f756768206c617a79206d696e74656420746f6b656e732e0000604482015260640161080b565b6000610c51838361184b565b905080836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de685604051610c9991815260200190565b60405180910390a45050600160105550565b6060816001600160401b03811115610cc557610cc561241d565b604051908082528060200260200182016040528015610cf857816020015b6060815260200190600190039081610ce35790505b50905060005b82811015610d9857610d6830858584818110610d1c57610d1c6127f4565b9050602002810190610d2e9190612881565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061185892505050565b828281518110610d7a57610d7a6127f4565b60200260200101819052508080610d90906128c7565b915050610cfe565b5092915050565b836001600160a01b0381163314610db957610db933610fd0565b610dc585858585611884565b5050505050565b60606000610dd9836118cf565b905080610de584611a6b565b604051602001610df69291906128e2565b604051602081830303815290604052915050919050565b6000610e17611105565b610e335760405162461bcd60e51b815260040161080b906127cc565b85610e685760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b604482015260640161080b565b6000600e549050610eb0818888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b7092505050565b600e919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d6001610ee68a84612869565b610ef09190612911565b88888888604051610f05959493929190612951565b60405180910390a25095945050505050565b60088054610f2490612791565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5090612791565b8015610f9d5780601f10610f7257610100808354040283529160200191610f9d565b820191906000526020600020905b815481529060010190602001808311610f8057829003601f168201915b505050505081565b60008054821080156106f2575050600090815260046020526040902054600160e01b900460ff161590565b600f5460ff161561081d576daaeb6d7670e522a718067333cd4e3b1561081d57604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c617113490611023903090859060040161298a565b602060405180830381865afa158015611040573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106491906129a4565b61081d5780604051633b79c77360e21b815260040161080b919061231f565b600061108e82610aa0565b9050806001600160a01b0316836001600160a01b031614156110c35760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216146110fa576110dd813361065d565b6110fa576040516367d9dca160e11b815260040160405180910390fd5b6107e2838383611bdd565b600061110f610b00565b6001600160a01b0316336001600160a01b031614905090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6107e2838383611c39565b600f805460ff19168215159081179091556040519081527f38475885990d8dfe9ca01f0ef160a1b5514426eab9ddbc953a3353410ba780969060200160405180910390a150565b6107e283838360405180602001604052806000815250610d9f565b60006111f283611512565b80519091508215611258576000336001600160a01b038316148061121b575061121b823361065d565b8061123657503361122b8661078a565b6001600160a01b0316145b90508061125657604051632ce44b5f60e11b815260040160405180910390fd5b505b61126460008583611bdd565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b17855591890180845292208054919490911661135e57600054821461135e57805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020612ac0833981519152908390a4505060018054810190555050565b6daaeb6d7670e522a718067333cd4e3b15610337576001600160a01b0382163b1561145d57801561142a57604051633e9f1edf60e11b81526daaeb6d7670e522a718067333cd4e90637d3e3dbe906113f4903090869060040161298a565b600060405180830381600087803b15801561140e57600080fd5b505af1158015611422573d6000803e3d6000fd5b505050505050565b60405163a0af290360e01b81526daaeb6d7670e522a718067333cd4e9063a0af2903906113f4903090869060040161298a565b604051632210724360e11b81526daaeb6d7670e522a718067333cd4e90634420e486906113f490309060040161231f565b6127108111156114b05760405162461bcd60e51b815260040161080b906129c1565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561161357600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906116115780516001600160a01b0316156115a8579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561160c579392505050565b6115a8565b505b604051636f96cda160e11b815260040160405180910390fd5b60006008805461163b90612791565b80601f016020809104026020016040519081016040528092919081815260200182805461166790612791565b80156116b45780601f10611689576101008083540402835291602001916116b4565b820191906000526020600020905b81548152906001019060200180831161169757829003601f168201915b505085519394506116d0936008935060208701925090506121cf565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a1681836040516117029291906129ea565b60405180910390a15050565b6127108111156117305760405162461bcd60e51b815260040161080b906129c1565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b6001600160a01b0382163314156117df5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000546106f28383611e11565b606061187d8383604051806060016040528060278152602001612a9960279139611e2b565b9392505050565b61188f848484611c39565b6118a1836001600160a01b0316611f06565b15610845576118b284848484611f15565b610845576040516368d2bf6b60e11b815260040160405180910390fd5b606060006118dc600c5490565b90506000600c80548060200260200160405190810160405280929190818152602001828054801561192c57602002820191906000526020600020905b815481526020019060010190808311611918575b5050505050905060005b82811015611a3057818181518110611950576119506127f4565b6020026020010151851015611a1e57600d6000838381518110611975576119756127f4565b60200260200101518152602001908152602001600020805461199690612791565b80601f01602080910402602001604051908101604052809291908181526020018280546119c290612791565b8015611a0f5780601f106119e457610100808354040283529160200191611a0f565b820191906000526020600020905b8154815290600101906020018083116119f257829003601f168201915b50505050509350505050919050565b611a29600182612869565b9050611936565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b604482015260640161080b565b606081611a8f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ab95780611aa3816128c7565b9150611ab29050600a83612855565b9150611a93565b6000816001600160401b03811115611ad357611ad361241d565b6040519080825280601f01601f191660200182016040528015611afd576020820181803683370190505b5090505b8415611b6857611b12600183612911565b9150611b1f600a86612a18565b611b2a906030612869565b60f81b818381518110611b3f57611b3f6127f4565b60200101906001600160f81b031916908160001a905350611b61600a86612855565b9450611b01565b949350505050565b600080611b7d8486612869565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d602090815260409091208551929450849350611bd49290918601906121cf565b50935093915050565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611c4482611512565b9050836001600160a01b031681600001516001600160a01b031614611c7b5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b0386161480611c995750611c99853361065d565b80611cb4575033611ca98461078a565b6001600160a01b0316145b905080611cd457604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038416611cfb57604051633a954ecd60e21b815260040160405180910390fd5b611d0760008487611bdd565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b42909216919091021783558701808452922080549193909116611dda576000548214611dda57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b0316600080516020612ac083398151915260405160405180910390a4610dc5565b610337828260405180602001604052806000815250611ffd565b6060611e3684611f06565b611e915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161080b565b600080856001600160a01b031685604051611eac9190612a2c565b600060405180830381855af49150503d8060008114611ee7576040519150601f19603f3d011682016040523d82523d6000602084013e611eec565b606091505b5091509150611efc828286612196565b9695505050505050565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611f4a903390899088908890600401612a48565b6020604051808303816000875af1925050508015611f85575060408051601f3d908101601f19168201909252611f8291810190612a7b565b60015b611fe0573d808015611fb3576040519150601f19603f3d011682016040523d82523d6000602084013e611fb8565b606091505b508051611fd8576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6000546001600160a01b03841661202657604051622e076360e81b815260040160405180910390fd5b826120445760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501906120dd90611f06565b15612153575b60405182906001600160a01b03881690600090600080516020612ac0833981519152908290a461211c6000878480600101955087611f15565b612139576040516368d2bf6b60e11b815260040160405180910390fd5b8082106120e357826000541461214e57600080fd5b612186565b5b6040516001830192906001600160a01b03881690600090600080516020612ac0833981519152908290a4808210612154575b5060009081556108459085838684565b606083156121a557508161187d565b8251156121b55782518084602001fd5b8160405162461bcd60e51b815260040161080b91906122f3565b8280546121db90612791565b90600052602060002090601f0160209004810192826121fd5760008555612243565b82601f1061221657805160ff1916838001178555612243565b82800160010185558215612243579182015b82811115612243578251825591602001919060010190612228565b5061224f929150612253565b5090565b5b8082111561224f5760008155600101612254565b6001600160e01b03198116811461081d57600080fd5b60006020828403121561229057600080fd5b813561187d81612268565b60005b838110156122b657818101518382015260200161229e565b838111156108455750506000910152565b600081518084526122df81602086016020860161229b565b601f01601f19169290920160200192915050565b60208152600061187d60208301846122c7565b60006020828403121561231857600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461234a57600080fd5b919050565b6000806040838503121561236257600080fd5b61236b83612333565b946020939093013593505050565b60006020828403121561238b57600080fd5b61187d82612333565b6000806000606084860312156123a957600080fd5b6123b284612333565b92506123c060208501612333565b9150604084013590509250925092565b600080604083850312156123e357600080fd5b50508035926020909101359150565b801515811461081d57600080fd5b60006020828403121561241257600080fd5b813561187d816123f2565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561244d5761244d61241d565b604051601f8501601f19908116603f011681019082821181831017156124755761247561241d565b8160405280935085815286868601111561248e57600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156124ba57600080fd5b81356001600160401b038111156124d057600080fd5b8201601f810184136124e157600080fd5b611b6884823560208401612433565b60008060006060848603121561250557600080fd5b833592506123c060208501612333565b6000806040838503121561252857600080fd5b61253183612333565b91506020830135612541816123f2565b809150509250929050565b6000806020838503121561255f57600080fd5b82356001600160401b038082111561257657600080fd5b818501915085601f83011261258a57600080fd5b81358181111561259957600080fd5b8660208260051b85010111156125ae57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561261557603f198886030184526126038583516122c7565b945092850192908501906001016125e7565b5092979650505050505050565b6000806000806080858703121561263857600080fd5b61264185612333565b935061264f60208601612333565b92506040850135915060608501356001600160401b0381111561267157600080fd5b8501601f8101871361268257600080fd5b61269187823560208401612433565b91505092959194509250565b60008083601f8401126126af57600080fd5b5081356001600160401b038111156126c657600080fd5b6020830191508360208285010111156126de57600080fd5b9250929050565b6000806000806000606086880312156126fd57600080fd5b8535945060208601356001600160401b038082111561271b57600080fd5b61272789838a0161269d565b9096509450604088013591508082111561274057600080fd5b5061274d8882890161269d565b969995985093965092949392505050565b6000806040838503121561277157600080fd5b61277a83612333565b915061278860208401612333565b90509250929050565b600181811c908216806127a557607f821691505b602082108114156127c657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561283a5761283a61280a565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826128645761286461283f565b500490565b6000821982111561287c5761287c61280a565b500190565b6000808335601e1984360301811261289857600080fd5b8301803591506001600160401b038211156128b257600080fd5b6020019150368190038213156126de57600080fd5b60006000198214156128db576128db61280a565b5060010190565b600083516128f481846020880161229b565b83519083019061290881836020880161229b565b01949350505050565b6000828210156129235761292361280a565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b85815260606020820152600061296b606083018688612928565b828103604084015261297e818587612928565b98975050505050505050565b6001600160a01b0392831681529116602082015260400190565b6000602082840312156129b657600080fd5b815161187d816123f2565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6040815260006129fd60408301856122c7565b8281036020840152612a0f81856122c7565b95945050505050565b600082612a2757612a2761283f565b500690565b60008251612a3e81846020870161229b565b9190910192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611efc908301846122c7565b600060208284031215612a8d57600080fd5b815161187d8161226856fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212206d01553107c4b8effb911df0f2416fc58ec0359224ed02e377d691ccea792e9564736f6c634300080c0033",
    "sourceMap": "1646:8354:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2671:444;;;;;;;;;;-1:-1:-1;2671:444:31;;;;;:::i;:::-;;:::i;:::-;;;565:14:641;;558:22;540:41;;528:2;513:18;2671:444:31;;;;;;;;6131:98:87;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;7617:200::-;;;;;;;;;;-1:-1:-1;7617:200:87;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7103:208:31:-;;;;;;;;;;-1:-1:-1;7103:208:31;;;;;:::i;:::-;;:::i;:::-;;1133:173:132;;;;;;;;;;-1:-1:-1;1133:173:132;;;;;:::i;:::-;;:::i;2284:306:87:-;;;;;;;;;;-1:-1:-1;2543:12:87;;2337:7;2527:13;:28;2284:306;;;2510:25:641;;;2498:2;2483:18;2284:306:87;2364:177:641;7358:208:31;;;;;;;;;;-1:-1:-1;7358:208:31;;;;;:::i;:::-;;:::i;1277:203:114:-;;;;;;;;;;-1:-1:-1;1277:203:114;;;;;:::i;:::-;;:::i;1421:347:139:-;;;;;;;;;;-1:-1:-1;1421:347:139;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;3324:32:641;;;3306:51;;3388:2;3373:18;;3366:34;;;;3279:18;1421:347:139;3132:274:641;5785:80:31;;;;;;;;;;-1:-1:-1;5785:80:31;;;;;:::i;:::-;;;;243:208:129;;;;;;;;;;-1:-1:-1;243:208:129;;;;;:::i;:::-;;:::i;6308:112:31:-;;;;;;;;;;-1:-1:-1;6392:21:31;;6308:112;;806:142:130;;;;;;;;;;;;905:42;806:142;;7617:216:31;;;;;;;;;;-1:-1:-1;7617:216:31;;;;;:::i;:::-;;:::i;6139:87::-;;;;;;;;;;-1:-1:-1;6139:87:31;;;;;:::i;:::-;;:::i;2008:381:139:-;;;;;;;;;;-1:-1:-1;2008:381:139;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4211:32:641;;;4193:51;;4292:6;4280:19;;;4275:2;4260:18;;4253:47;4166:18;2008:381:139;4021:285:641;205:31:129;;;;;;;;;;-1:-1:-1;205:31:129;;;;;;;;530:199:117;;;;;;;;;;-1:-1:-1;530:199:117;;;;;:::i;:::-;;:::i;3087:256:139:-;;;;;;;;;;-1:-1:-1;3087:256:139;;;;;:::i;:::-;;:::i;5946:123:87:-;;;;;;;;;;-1:-1:-1;5946:123:87;;;;;:::i;:::-;;:::i;980:96:114:-;;;;;;;;;;-1:-1:-1;1054:8:114;:15;980:96;;3372:203:87;;;;;;;;;;-1:-1:-1;3372:203:87;;;;;:::i;:::-;;:::i;871:86:132:-;;;;;;;;;;;;;:::i;1003:188:116:-;;;;;;;;;;-1:-1:-1;1003:188:116;;;;;:::i;:::-;;:::i;6293:102:87:-;;;;;;;;;;;;;:::i;4281:288:139:-;;;;;;;;;;-1:-1:-1;4281:288:139;;;;;:::i;:::-;;:::i;6835:227:31:-;;;;;;;;;;-1:-1:-1;6835:227:31;;;;;:::i;:::-;;:::i;4842:533::-;;;;;;:::i;:::-;;:::i;698:319:127:-;;;;;;;;;;-1:-1:-1;698:319:127;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6498:105:31:-;;;;;;;;;;-1:-1:-1;6557:7:31;6583:13;6498:105;;2499:144:139;;;;;;;;;;-1:-1:-1;2599:16:139;;-1:-1:-1;;;;;2599:16:139;;;-1:-1:-1;;;2624:10:139;;;;2499:144;;7884:249:31;;;;;;;;;;-1:-1:-1;7884:249:31;;;;;:::i;:::-;;:::i;3529:224::-;;;;;;;;;;-1:-1:-1;3529:224:31;;;;;:::i;:::-;;:::i;1254:592:125:-;;;;;;;;;;-1:-1:-1;1254:592:125;;;;;:::i;:::-;;:::i;565:34:116:-;;;;;;;;;;;;;:::i;8232:162:87:-;;;;;;;;;;-1:-1:-1;8232:162:87;;;;;:::i;:::-;-1:-1:-1;;;;;8352:25:87;;;8329:4;8352:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;8232:162;2671:444:31;2774:4;-1:-1:-1;;;;;;;;;2809:25:31;;;;:100;;-1:-1:-1;;;;;;;;;;2884:25:31;;;2809:100;:175;;;-1:-1:-1;;;;;;;;;;2959:25:31;;;2809:175;:274;;;-1:-1:-1;;;;;;;3042:41:31;;-1:-1:-1;;;3042:41:31;2809:274;2790:293;2671:444;-1:-1:-1;;2671:444:31:o;6131:98:87:-;6185:13;6217:5;6210:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6131:98;:::o;7617:200::-;7685:7;7709:16;7717:7;7709;:16::i;:::-;7704:64;;7734:34;;-1:-1:-1;;;7734:34:87;;;;;;;;;;;7704:64;-1:-1:-1;7786:24:87;;;;:15;:24;;;;;;-1:-1:-1;;;;;7786:24:87;;7617:200::o;7103:208:31:-;7248:8;1812:30:130;1833:8;1812:20;:30::i;:::-;7272:32:31::1;7286:8;7296:7;7272:13;:32::i;:::-;7103:208:::0;;;:::o;1133:173:132:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:132;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;7358:208:31:-;7506:4;-1:-1:-1;;;;;1639:18:130;;1647:10;1639:18;1635:81;;1673:32;1694:10;1673:20;:32::i;:::-;7522:37:31::1;7541:4;7547:2;7551:7;7522:18;:37::i;:::-;7358:208:::0;;;;:::o;1277:203:114:-;1341:7;1374:17;1054:8;:15;;980:96;1374:17;1364:6;:27;1360:81;;1407:23;;-1:-1:-1;;;1407:23:114;;10633:2:641;1407:23:114;;;10615:21:641;10672:2;10652:18;;;10645:30;-1:-1:-1;;;10691:18:641;;;10684:43;10744:18;;1407:23:114;10431:337:641;1360:81:114;1457:8;1466:6;1457:16;;;;;;;;:::i;:::-;;;;;;;;;1450:23;;1277:203;;;:::o;1421:347:139:-;1558:16;1576:21;1614:17;1633:11;1648:31;1671:7;1648:22;:31::i;:::-;1613:66;;-1:-1:-1;1613:66:139;;-1:-1:-1;1613:66:139;;;-1:-1:-1;1755:6:139;1736:15;1613:66;1736:9;:15;:::i;:::-;1735:26;;;;:::i;:::-;1719:42;;1603:165;;1421:347;;;;;:::o;243:208:129:-;321:28;:26;:28::i;:::-;313:84;;;;-1:-1:-1;;;313:84:129;;11669:2:641;313:84:129;;;11651:21:641;11708:2;11688:18;;;11681:30;11747:34;11727:18;;;11720:62;-1:-1:-1;;;11798:18:641;;;11791:41;11849:19;;313:84:129;11467:407:641;313:84:129;407:37;431:12;407:23;:37::i;7617:216:31:-;7769:4;-1:-1:-1;;;;;1639:18:130;;1647:10;1639:18;1635:81;;1673:32;1694:10;1673:20;:32::i;:::-;7785:41:31::1;7808:4;7814:2;7818:7;7785:22;:41::i;6139:87::-:0;6198:21;6204:8;6214:4;6198:5;:21::i;2008:381:139:-;2088:7;2152:29;;;:19;:29;;;;;;;;2115:66;;;;;;;;;;-1:-1:-1;;;;;2115:66:139;;;;;;;;;;;;;;;;2088:7;;2211:39;:171;;2327:25;;2361:19;;;;2211:171;;;2270:16;;-1:-1:-1;;;;;2270:16:139;;;-1:-1:-1;;;2295:10:139;;;;2211:171;2192:190;;;;;2008:381;;;:::o;530:199:117:-;609:28;:26;:28::i;:::-;601:81;;;;-1:-1:-1;;;601:81:117;;12081:2:641;601:81:117;;;12063:21:641;12120:2;12100:18;;;12093:30;12159:34;12139:18;;;12132:62;-1:-1:-1;;;12210:18:641;;;12203:38;12258:19;;601:81:117;11879:404:641;601:81:117;692:30;702:13;717:4;692:9;:30::i;3087:256:139:-;3199:20;:18;:20::i;:::-;3194:76;;3235:24;;-1:-1:-1;;;3235:24:139;;;;;;;:::i;3194:76::-;3280:56;3305:17;3324:11;3280:24;:56::i;5946:123:87:-;6010:7;6036:21;6049:7;6036:12;:21::i;:::-;:26;;5946:123;-1:-1:-1;;5946:123:87:o;3372:203::-;3436:7;-1:-1:-1;;;;;3459:19:87;;3455:60;;3487:28;;-1:-1:-1;;;3487:28:87;;;;;;;;;;;3455:60;-1:-1:-1;;;;;;3540:19:87;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;3540:27:87;;3372:203::o;871:86:132:-;944:6;;-1:-1:-1;;;;;944:6:132;;871:86::o;1003:188:116:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:116;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;6293:102:87:-;6349:13;6381:7;6374:14;;;;;:::i;4281:288:139:-;4428:20;:18;:20::i;:::-;4423:76;;4464:24;;-1:-1:-1;;;4464:24:139;;;;;;;:::i;4423:76::-;4509:53;4535:8;4545:10;4557:4;4509:25;:53::i;6835:227:31:-;6988:8;1812:30:130;1833:8;1812:20;:30::i;:::-;7012:43:31::1;7036:8;7046;7012:23;:43::i;4842:533::-:0;245:1:313;548:7;;:19;;540:63;;;;-1:-1:-1;;;540:63:313;;12490:2:641;540:63:313;;;12472:21:641;12529:2;12509:18;;;12502:30;12568:33;12548:18;;;12541:61;12619:18;;540:63:313;12288:355:641;540:63:313;245:1;678:7;:18;4978:21:31::1;::::0;4949:13:::1;::::0;:25:::1;::::0;4965:9;;4949:25:::1;:::i;:::-;:50;;4941:93;;;::::0;-1:-1:-1;;;4941:93:31;;12983:2:641;4941:93:31::1;::::0;::::1;12965:21:641::0;13022:2;13002:18;;;12995:30;13061:32;13041:18;;;13034:60;13111:18;;4941:93:31::1;12781:354:641::0;4941:93:31::1;5155:20;5178:44;5201:9;5212;5178:22;:44::i;:::-;5155:67;;5344:12;5333:9;-1:-1:-1::0;;;;;5307:61:31::1;5321:10;-1:-1:-1::0;;;;;5307:61:31::1;;5358:9;5307:61;;;;2510:25:641::0;;2498:2;2483:18;;2364:177;5307:61:31::1;;;;;;;;-1:-1:-1::0;;202:1:313;851:7;:22;-1:-1:-1;4842:533:31:o;698:319:127:-;775:22;831:4;-1:-1:-1;;;;;819:24:127;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:127;;-1:-1:-1;;;922:54:127:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;7884:249:31:-;8063:4;-1:-1:-1;;;;;1639:18:130;;1647:10;1639:18;1635:81;;1673:32;1694:10;1673:20;:32::i;:::-;8079:47:31::1;8102:4;8108:2;8112:7;8121:4;8079:22;:47::i;:::-;7884:249:::0;;;;;:::o;3529:224::-;3603:13;3628:22;3653:21;3665:8;3653:11;:21::i;:::-;3628:46;;3715:8;3725:19;:8;:17;:19::i;:::-;3698:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3684:62;;;3529:224;;;:::o;1254:592:125:-;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:125;;;;;;;:::i;1436:70::-;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:125;;14483:2:641;1548:15:125;;;14465:21:641;14522:1;14502:18;;;14495:29;-1:-1:-1;;;14540:18:641;;;14533:35;14585:18;;1548:15:125;14281:328:641;1516:58:125;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:125;;-1:-1:-1;;;1669:55:125:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:125;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;565:34:116:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;9558:172:87:-;9615:4;9678:13;;9668:7;:23;9638:85;;;;-1:-1:-1;;9696:20:87;;;;:11;:20;;;;;:27;-1:-1:-1;;;9696:27:87;;;;9695:28;;9558:172::o;1866:477:130:-;2055:19;;;;2051:286;;;905:42;2094:45;:49;2090:237;;2168:67;;-1:-1:-1;;;2168:67:130;;905:42;;2168;;:67;;2219:4;;2226:8;;2168:67;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2163:150;;2285:8;2266:28;;-1:-1:-1;;;2266:28:130;;;;;;;;:::i;7164:392:87:-;7244:13;7260:24;7276:7;7260:15;:24::i;:::-;7244:40;;7304:5;-1:-1:-1;;;;;7298:11:87;:2;-1:-1:-1;;;;;7298:11:87;;7294:48;;;7318:24;;-1:-1:-1;;;7318:24:87;;;;;;;;;;;7294:48;719:10:325;-1:-1:-1;;;;;7357:21:87;;;7353:158;;7397:37;7414:5;719:10:325;8232:162:87;:::i;7397:37::-;7392:119;;7461:35;;-1:-1:-1;;;7461:35:87;;;;;;;;;;;7392:119;7521:28;7530:2;7534:7;7543:5;7521:8;:28::i;9448:115:31:-;9512:4;9549:7;:5;:7::i;:::-;-1:-1:-1;;;;;9535:21:31;:10;-1:-1:-1;;;;;9535:21:31;;9528:28;;9448:115;:::o;1421:172:132:-;1501:6;;;-1:-1:-1;;;;;1517:18:132;;;-1:-1:-1;;;;;;1517:18:132;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;8456:164:87:-;8585:28;8595:4;8601:2;8605:7;8585:9;:28::i;457:160:129:-;528:19;:34;;-1:-1:-1;;528:34:129;;;;;;;;;;577:33;;540:41:641;;;577:33:129;;528:2:641;513:18;577:33:129;;;;;;;457:160;:::o;8686:179:87:-;8819:39;8836:4;8842:2;8846:7;8819:39;;;;;;;;;;;;:16;:39::i;16073:2355::-;16152:35;16190:21;16203:7;16190:12;:21::i;:::-;16237:18;;16152:59;;-1:-1:-1;16266:284:87;;;;16299:22;719:10:325;-1:-1:-1;;;;;16325:20:87;;;;:76;;-1:-1:-1;16365:36:87;16382:4;719:10:325;8232:162:87;:::i;16365:36::-;16325:132;;;-1:-1:-1;719:10:325;16421:20:87;16433:7;16421:11;:20::i;:::-;-1:-1:-1;;;;;16421:36:87;;16325:132;16299:159;;16478:17;16473:66;;16504:35;;-1:-1:-1;;;16504:35:87;;;;;;;;;;;16473:66;16285:265;16266:284;16673:35;16690:1;16694:7;16703:4;16673:8;:35::i;:::-;-1:-1:-1;;;;;17032:18:87;;;16998:31;17032:18;;;:12;:18;;;;;;;;17064:24;;-1:-1:-1;;;;;;;;;;17064:24:87;;;;;;;;;-1:-1:-1;;;;;;17064:24:87;;;;17102:29;;;;;17087:1;17102:29;;;;;;;;-1:-1:-1;;;;;;17102:29:87;;;;;;;;;;17261:20;;;:11;:20;;;;;;17295;;-1:-1:-1;;;;17362:15:87;17329:49;;;-1:-1:-1;;;17329:49:87;-1:-1:-1;;;;;;17329:49:87;;;;;;;;;;17392:22;-1:-1:-1;;;17392:22:87;;;17680:11;;;17739:24;;;;;17781:13;;17032:18;;17739:24;;17781:13;17777:377;;17988:13;;17973:11;:28;17969:171;;18025:20;;18093:28;;;;-1:-1:-1;;;;;18067:54:87;-1:-1:-1;;;18067:54:87;-1:-1:-1;;;;;;18067:54:87;;;-1:-1:-1;;;;;18025:20:87;;18067:54;;;;17969:171;-1:-1:-1;;18179:35:87;;18206:7;;-1:-1:-1;18202:1:87;;-1:-1:-1;;;;;;18179:35:87;;;-1:-1:-1;;;;;;;;;;;18179:35:87;18202:1;;18179:35;-1:-1:-1;;18397:12:87;:14;;;;;;-1:-1:-1;;16073:2355:87:o;2349:783:130:-;905:42;2484:45;:49;2480:646;;-1:-1:-1;;;;;2607:51:130;;;:55;2603:513;;2730:9;2726:289;;;2763:92;;-1:-1:-1;;;2763:92:130;;905:42;;2763:45;;:92;;2817:4;;2824:30;;2763:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5785:80:31;;:::o;2726:289:130:-;2902:94;;-1:-1:-1;;;2902:94:130;;905:42;;2902:47;;:94;;2958:4;;2965:30;;2902:94;;;:::i;2603:513::-;3053:48;;-1:-1:-1;;;3053:48:130;;905:42;;3053:33;;:48;;3095:4;;3053:48;;;:::i;3430:334:139:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:139;;;;;;;:::i;3531:76::-;3617:16;:36;;-1:-1:-1;;;;;3617:36:139;;-1:-1:-1;;;;;;3663:32:139;;;;;-1:-1:-1;;;3663:32:139;;;;;;;;3711:46;;2510:25:641;;;3711:46:139;;2498:2:641;2483:18;3711:46:139;;;;;;;3430:334;;:::o;4715:1174:87:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;4825:7:87;4923:13;;4916:4;:20;4912:913;;;4960:31;4994:17;;;:11;:17;;;;;;;;;4960:51;;;;;;;;;-1:-1:-1;;;;;4960:51:87;;;;-1:-1:-1;;;4960:51:87;;-1:-1:-1;;;;;4960:51:87;;;;;;;;-1:-1:-1;;;4960:51:87;;;;;;;;;;;;;;5033:774;;5086:14;;-1:-1:-1;;;;;5086:28:87;;5082:107;;5153:9;4715:1174;-1:-1:-1;;;4715:1174:87:o;5082:107::-;-1:-1:-1;;;5549:6:87;5597:17;;;;:11;:17;;;;;;;;;5585:29;;;;;;;;;-1:-1:-1;;;;;5585:29:87;;;;;-1:-1:-1;;;5585:29:87;;-1:-1:-1;;;;;5585:29:87;;;;;;;;-1:-1:-1;;;5585:29:87;;;;;;;;;;;;;5648:28;5644:115;;5719:9;4715:1174;-1:-1:-1;;;4715:1174:87:o;5644:115::-;5506:279;;;4938:887;4912:913;5851:31;;-1:-1:-1;;;5851:31:87;;;;;;;;;;;1273:185:116;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:116;;1339:35;;-1:-1:-1;1384:18:116;;:11;;-1:-1:-1;1384:18:116;;;;-1:-1:-1;1384:18:116;-1:-1:-1;1384:18:116;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4671:362:139:-;4818:6;4811:4;:13;4807:69;;;4840:25;;-1:-1:-1;;;4840:25:139;;;;;;;:::i;4807:69::-;4918:49;;;;;;;;-1:-1:-1;;;;;4918:49:139;;;;;;;;;;;;;-1:-1:-1;4886:29:139;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4886:81:139;;;;;;;;;;;-1:-1:-1;4886:81:139;;;;;;;4983:43;;2510:25:641;;;4918:49:139;;4886:29;;4983:43;;2483:18:641;4983:43:139;;;;;;;4671:362;;;:::o;7884:282:87:-;-1:-1:-1;;;;;7982:24:87;;719:10:325;7982:24:87;7978:54;;;8015:17;;-1:-1:-1;;;8015:17:87;;;;;;;;;;;7978:54;719:10:325;8043:32:87;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;8043:42:87;;;;;;;;;;;;:53;;-1:-1:-1;;8043:53:87;;;;;;;;;;8111:48;;540:41:641;;;8043:42:87;;719:10:325;8111:48:87;;513:18:641;8111:48:87;;;;;;;7884:282;;:::o;8708:232:31:-;8828:20;8879:13;8902:31;8912:9;8923;8902;:31::i;6538:198:281:-;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6645:84;6538:198;-1:-1:-1;;;6538:198:281:o;8931:381:87:-;9092:28;9102:4;9108:2;9112:7;9092:9;:28::i;:::-;9134:15;:2;-1:-1:-1;;;;;9134:13:87;;:15::i;:::-;9130:176;;;9168:56;9199:4;9205:2;9209:7;9218:5;9168:30;:56::i;:::-;9163:143;;9251:40;;-1:-1:-1;;;9251:40:87;;;;;;;;;;;2153:390:114;2215:13;2240:25;2268:17;1054:8;:15;;980:96;2268:17;2240:45;;2295:24;2322:8;2295:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2346:9;2341:161;2365:17;2361:1;:21;2341:161;;;2421:7;2429:1;2421:10;;;;;;;;:::i;:::-;;;;;;;2410:8;:21;2406:86;;;2458:7;:19;2466:7;2474:1;2466:10;;;;;;;;:::i;:::-;;;;;;;2458:19;;;;;;;;;;;2451:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:390;;;:::o;2406:86::-;2384:6;2389:1;2384:6;;:::i;:::-;;;2341:161;;;-1:-1:-1;2511:25:114;;-1:-1:-1;;;2511:25:114;;17020:2:641;2511:25:114;;;17002:21:641;17059:2;17039:18;;;17032:30;-1:-1:-1;;;17078:18:641;;;17071:45;17133:18;;2511:25:114;16818:339:641;305:703:285;361:13;578:10;574:51;;-1:-1:-1;;604:10:285;;;;;;;;;;;;-1:-1:-1;;;604:10:285;;;;;305:703::o;574:51::-;649:5;634:12;688:75;695:9;;688:75;;720:8;;;;:::i;:::-;;-1:-1:-1;742:10:285;;-1:-1:-1;750:2:285;742:10;;:::i;:::-;;;688:75;;;772:19;804:6;-1:-1:-1;;;;;794:17:285;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;794:17:285;;772:39;;821:150;828:10;;821:150;;854:11;864:1;854:11;;:::i;:::-;;-1:-1:-1;922:10:285;930:2;922:5;:10;:::i;:::-;909:24;;:2;:24;:::i;:::-;896:39;;879:6;886;879:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;879:56:285;;;;;;;;-1:-1:-1;949:11:285;958:2;949:11;;:::i;:::-;;;821:150;;;994:6;305:703;-1:-1:-1;;;;305:703:285:o;2840:362:114:-;2990:25;;3054:24;3065:13;3054:8;:24;:::i;:::-;3126:8;:22;;;;;;;;;;;;;-1:-1:-1;3159:16:114;;;:7;3126:22;3159:16;;;;;;;:36;;3044:34;;-1:-1:-1;3044:34:114;;-1:-1:-1;3159:36:114;;:16;;:36;;;;:::i;:::-;;2840:362;;;;;;:::o;18539:189:87:-;18649:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;18649:29:87;-1:-1:-1;;;;;18649:29:87;;;;;;;;;18693:28;;18649:24;;18693:28;;;;;;;18539:189;;;:::o;13614:2082::-;13724:35;13762:21;13775:7;13762:12;:21::i;:::-;13724:59;;13820:4;-1:-1:-1;;;;;13798:26:87;:13;:18;;;-1:-1:-1;;;;;13798:26:87;;13794:67;;13833:28;;-1:-1:-1;;;13833:28:87;;;;;;;;;;;13794:67;13872:22;719:10:325;-1:-1:-1;;;;;13898:20:87;;;;:72;;-1:-1:-1;13934:36:87;13951:4;719:10:325;8232:162:87;:::i;13934:36::-;13898:124;;;-1:-1:-1;719:10:325;13986:20:87;13998:7;13986:11;:20::i;:::-;-1:-1:-1;;;;;13986:36:87;;13898:124;13872:151;;14039:17;14034:66;;14065:35;;-1:-1:-1;;;14065:35:87;;;;;;;;;;;14034:66;-1:-1:-1;;;;;14114:16:87;;14110:52;;14139:23;;-1:-1:-1;;;14139:23:87;;;;;;;;;;;14110:52;14278:35;14295:1;14299:7;14308:4;14278:8;:35::i;:::-;-1:-1:-1;;;;;14603:18:87;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14603:31:87;;;-1:-1:-1;;;;;14603:31:87;;;-1:-1:-1;;14603:31:87;;;;;;;14648:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14648:29:87;;;;;;;;;;;14726:20;;;:11;:20;;;;;;14760:18;;-1:-1:-1;;;;;;14792:49:87;;;;-1:-1:-1;;;14825:15:87;14792:49;;;;;;;;;;15111:11;;15170:24;;;;;15212:13;;14726:20;;15170:24;;15212:13;15208:377;;15419:13;;15404:11;:28;15400:171;;15456:20;;15524:28;;;;-1:-1:-1;;;;;15498:54:87;-1:-1:-1;;;15498:54:87;-1:-1:-1;;;;;;15498:54:87;;;-1:-1:-1;;;;;15456:20:87;;15498:54;;;;15400:171;14579:1016;;;15629:7;15625:2;-1:-1:-1;;;;;15610:27:87;15619:4;-1:-1:-1;;;;;15610:27:87;-1:-1:-1;;;;;;;;;;;15610:27:87;;;;;;;;;15647:42;7358:208:31;9809:102:87;9877:27;9887:2;9891:8;9877:27;;;;;;;;;;;;:9;:27::i;6922:387:281:-;7063:12;7095:18;7106:6;7095:10;:18::i;:::-;7087:69;;;;-1:-1:-1;;;7087:69:281;;17481:2:641;7087:69:281;;;17463:21:641;17520:2;17500:18;;;17493:30;17559:34;17539:18;;;17532:62;-1:-1:-1;;;17610:18:641;;;17603:36;17656:19;;7087:69:281;17279:402:641;7087:69:281;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:281;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;:::-;7244:58;6922:387;-1:-1:-1;;;;;;6922:387:281:o;1137:320::-;-1:-1:-1;;;;;1427:19:281;;:23;;;1137:320::o;19209:650:87:-;19387:72;;-1:-1:-1;;;19387:72:87;;19367:4;;-1:-1:-1;;;;;19387:36:87;;;;;:72;;719:10:325;;19438:4:87;;19444:7;;19453:5;;19387:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19387:72:87;;;;;;;;-1:-1:-1;;19387:72:87;;;;;;;;;;;;:::i;:::-;;;19383:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19618:13:87;;19614:229;;19663:40;;-1:-1:-1;;;19663:40:87;;;;;;;;;;;19614:229;19803:6;19797:13;19788:6;19784:2;19780:15;19773:38;19383:470;-1:-1:-1;;;;;;19505:55:87;-1:-1:-1;;;19505:55:87;;-1:-1:-1;19209:650:87;;;;;;:::o;10271:1708::-;10389:20;10412:13;-1:-1:-1;;;;;10439:16:87;;10435:48;;10464:19;;-1:-1:-1;;;10464:19:87;;;;;;;;;;;10435:48;10497:13;10493:44;;10519:18;;-1:-1:-1;;;10519:18:87;;;;;;;;;;;10493:44;-1:-1:-1;;;;;10880:16:87;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;;;;;10938:49:87;;-1:-1:-1;;;;;10880:44:87;;;;;;;10938:49;;;-1:-1:-1;;;;;;;;;10880:44:87;;;;;;10938:49;;;;;;;;;;;;;;;;11002:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;11051:66:87;;;-1:-1:-1;;;11101:15:87;11051:66;;;;;;;;;;;;;11002:25;;11195:23;;;;11237:15;;:13;:15::i;:::-;11233:618;;;11272:308;11302:38;;11327:12;;-1:-1:-1;;;;;11302:38:87;;;11319:1;;-1:-1:-1;;;;;;;;;;;11302:38:87;11319:1;;11302:38;11367:69;11406:1;11410:2;11414:14;;;;;;11430:5;11367:30;:69::i;:::-;11362:172;;11471:40;;-1:-1:-1;;;11471:40:87;;;;;;;;;;;11362:172;11575:3;11560:12;:18;11272:308;;11659:12;11642:13;;:29;11638:43;;11673:8;;;11638:43;11233:618;;;11720:117;11750:40;;11775:14;;;;;-1:-1:-1;;;;;11750:40:87;;;11767:1;;-1:-1:-1;;;;;;;;;;;11750:40:87;11767:1;;11750:40;11832:3;11817:12;:18;11720:117;;11233:618;-1:-1:-1;11864:13:87;:28;;;11912:60;;11945:2;11949:12;11963:8;11912:60;:::i;7529:692:281:-;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:281;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:281;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:641;-1:-1:-1;;;;;;88:32:641;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:641;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:641;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:641:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:641;;1343:180;-1:-1:-1;1343:180:641:o;1528:203::-;-1:-1:-1;;;;;1692:32:641;;;;1674:51;;1662:2;1647:18;;1528:203::o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:641;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:641:o;2173:186::-;2232:6;2285:2;2273:9;2264:7;2260:23;2256:32;2253:52;;;2301:1;2298;2291:12;2253:52;2324:29;2343:9;2324:29;:::i;2546:328::-;2623:6;2631;2639;2692:2;2680:9;2671:7;2667:23;2663:32;2660:52;;;2708:1;2705;2698:12;2660:52;2731:29;2750:9;2731:29;:::i;:::-;2721:39;;2779:38;2813:2;2802:9;2798:18;2779:38;:::i;:::-;2769:48;;2864:2;2853:9;2849:18;2836:32;2826:42;;2546:328;;;;;:::o;2879:248::-;2947:6;2955;3008:2;2996:9;2987:7;2983:23;2979:32;2976:52;;;3024:1;3021;3014:12;2976:52;-1:-1:-1;;3047:23:641;;;3117:2;3102:18;;;3089:32;;-1:-1:-1;2879:248:641:o;3411:118::-;3497:5;3490:13;3483:21;3476:5;3473:32;3463:60;;3519:1;3516;3509:12;3534:241;3590:6;3643:2;3631:9;3622:7;3618:23;3614:32;3611:52;;;3659:1;3656;3649:12;3611:52;3698:9;3685:23;3717:28;3739:5;3717:28;:::i;4311:127::-;4372:10;4367:3;4363:20;4360:1;4353:31;4403:4;4400:1;4393:15;4427:4;4424:1;4417:15;4443:632;4508:5;-1:-1:-1;;;;;4579:2:641;4571:6;4568:14;4565:40;;;4585:18;;:::i;:::-;4660:2;4654:9;4628:2;4714:15;;-1:-1:-1;;4710:24:641;;;4736:2;4706:33;4702:42;4690:55;;;4760:18;;;4780:22;;;4757:46;4754:72;;;4806:18;;:::i;:::-;4846:10;4842:2;4835:22;4875:6;4866:15;;4905:6;4897;4890:22;4945:3;4936:6;4931:3;4927:16;4924:25;4921:45;;;4962:1;4959;4952:12;4921:45;5012:6;5007:3;5000:4;4992:6;4988:17;4975:44;5067:1;5060:4;5051:6;5043;5039:19;5035:30;5028:41;;;;4443:632;;;;;:::o;5080:451::-;5149:6;5202:2;5190:9;5181:7;5177:23;5173:32;5170:52;;;5218:1;5215;5208:12;5170:52;5258:9;5245:23;-1:-1:-1;;;;;5283:6:641;5280:30;5277:50;;;5323:1;5320;5313:12;5277:50;5346:22;;5399:4;5391:13;;5387:27;-1:-1:-1;5377:55:641;;5428:1;5425;5418:12;5377:55;5451:74;5517:7;5512:2;5499:16;5494:2;5490;5486:11;5451:74;:::i;5536:322::-;5613:6;5621;5629;5682:2;5670:9;5661:7;5657:23;5653:32;5650:52;;;5698:1;5695;5688:12;5650:52;5734:9;5721:23;5711:33;;5763:38;5797:2;5786:9;5782:18;5763:38;:::i;5863:315::-;5928:6;5936;5989:2;5977:9;5968:7;5964:23;5960:32;5957:52;;;6005:1;6002;5995:12;5957:52;6028:29;6047:9;6028:29;:::i;:::-;6018:39;;6107:2;6096:9;6092:18;6079:32;6120:28;6142:5;6120:28;:::i;:::-;6167:5;6157:15;;;5863:315;;;;;:::o;6183:626::-;6280:6;6288;6341:2;6329:9;6320:7;6316:23;6312:32;6309:52;;;6357:1;6354;6347:12;6309:52;6397:9;6384:23;-1:-1:-1;;;;;6467:2:641;6459:6;6456:14;6453:34;;;6483:1;6480;6473:12;6453:34;6521:6;6510:9;6506:22;6496:32;;6566:7;6559:4;6555:2;6551:13;6547:27;6537:55;;6588:1;6585;6578:12;6537:55;6628:2;6615:16;6654:2;6646:6;6643:14;6640:34;;;6670:1;6667;6660:12;6640:34;6723:7;6718:2;6708:6;6705:1;6701:14;6697:2;6693:23;6689:32;6686:45;6683:65;;;6744:1;6741;6734:12;6683:65;6775:2;6767:11;;;;;6797:6;;-1:-1:-1;6183:626:641;;-1:-1:-1;;;;6183:626:641:o;6814:801::-;6974:4;7003:2;7043;7032:9;7028:18;7073:2;7062:9;7055:21;7096:6;7131;7125:13;7162:6;7154;7147:22;7200:2;7189:9;7185:18;7178:25;;7262:2;7252:6;7249:1;7245:14;7234:9;7230:30;7226:39;7212:53;;7300:2;7292:6;7288:15;7321:1;7331:255;7345:6;7342:1;7339:13;7331:255;;;7438:2;7434:7;7422:9;7414:6;7410:22;7406:36;7401:3;7394:49;7466:40;7499:6;7490;7484:13;7466:40;:::i;:::-;7456:50;-1:-1:-1;7564:12:641;;;;7529:15;;;;7367:1;7360:9;7331:255;;;-1:-1:-1;7603:6:641;;6814:801;-1:-1:-1;;;;;;;6814:801:641:o;7620:667::-;7715:6;7723;7731;7739;7792:3;7780:9;7771:7;7767:23;7763:33;7760:53;;;7809:1;7806;7799:12;7760:53;7832:29;7851:9;7832:29;:::i;:::-;7822:39;;7880:38;7914:2;7903:9;7899:18;7880:38;:::i;:::-;7870:48;;7965:2;7954:9;7950:18;7937:32;7927:42;;8020:2;8009:9;8005:18;7992:32;-1:-1:-1;;;;;8039:6:641;8036:30;8033:50;;;8079:1;8076;8069:12;8033:50;8102:22;;8155:4;8147:13;;8143:27;-1:-1:-1;8133:55:641;;8184:1;8181;8174:12;8133:55;8207:74;8273:7;8268:2;8255:16;8250:2;8246;8242:11;8207:74;:::i;:::-;8197:84;;;7620:667;;;;;;;:::o;8292:348::-;8344:8;8354:6;8408:3;8401:4;8393:6;8389:17;8385:27;8375:55;;8426:1;8423;8416:12;8375:55;-1:-1:-1;8449:20:641;;-1:-1:-1;;;;;8481:30:641;;8478:50;;;8524:1;8521;8514:12;8478:50;8561:4;8553:6;8549:17;8537:29;;8613:3;8606:4;8597:6;8589;8585:19;8581:30;8578:39;8575:59;;;8630:1;8627;8620:12;8575:59;8292:348;;;;;:::o;8645:788::-;8745:6;8753;8761;8769;8777;8830:2;8818:9;8809:7;8805:23;8801:32;8798:52;;;8846:1;8843;8836:12;8798:52;8882:9;8869:23;8859:33;;8943:2;8932:9;8928:18;8915:32;-1:-1:-1;;;;;9007:2:641;8999:6;8996:14;8993:34;;;9023:1;9020;9013:12;8993:34;9062:59;9113:7;9104:6;9093:9;9089:22;9062:59;:::i;:::-;9140:8;;-1:-1:-1;9036:85:641;-1:-1:-1;9228:2:641;9213:18;;9200:32;;-1:-1:-1;9244:16:641;;;9241:36;;;9273:1;9270;9263:12;9241:36;;9312:61;9365:7;9354:8;9343:9;9339:24;9312:61;:::i;:::-;8645:788;;;;-1:-1:-1;8645:788:641;;-1:-1:-1;9392:8:641;;9286:87;8645:788;-1:-1:-1;;;8645:788:641:o;9438:260::-;9506:6;9514;9567:2;9555:9;9546:7;9542:23;9538:32;9535:52;;;9583:1;9580;9573:12;9535:52;9606:29;9625:9;9606:29;:::i;:::-;9596:39;;9654:38;9688:2;9677:9;9673:18;9654:38;:::i;:::-;9644:48;;9438:260;;;;;:::o;9703:380::-;9782:1;9778:12;;;;9825;;;9846:61;;9900:4;9892:6;9888:17;9878:27;;9846:61;9953:2;9945:6;9942:14;9922:18;9919:38;9916:161;;;9999:10;9994:3;9990:20;9987:1;9980:31;10034:4;10031:1;10024:15;10062:4;10059:1;10052:15;9916:161;;9703:380;;;:::o;10088:338::-;10290:2;10272:21;;;10329:2;10309:18;;;10302:30;-1:-1:-1;;;10363:2:641;10348:18;;10341:44;10417:2;10402:18;;10088:338::o;10773:127::-;10834:10;10829:3;10825:20;10822:1;10815:31;10865:4;10862:1;10855:15;10889:4;10886:1;10879:15;10905:127;10966:10;10961:3;10957:20;10954:1;10947:31;10997:4;10994:1;10987:15;11021:4;11018:1;11011:15;11037:168;11077:7;11143:1;11139;11135:6;11131:14;11128:1;11125:21;11120:1;11113:9;11106:17;11102:45;11099:71;;;11150:18;;:::i;:::-;-1:-1:-1;11190:9:641;;11037:168::o;11210:127::-;11271:10;11266:3;11262:20;11259:1;11252:31;11302:4;11299:1;11292:15;11326:4;11323:1;11316:15;11342:120;11382:1;11408;11398:35;;11413:18;;:::i;:::-;-1:-1:-1;11447:9:641;;11342:120::o;12648:128::-;12688:3;12719:1;12715:6;12712:1;12709:13;12706:39;;;12725:18;;:::i;:::-;-1:-1:-1;12761:9:641;;12648:128::o;13140:521::-;13217:4;13223:6;13283:11;13270:25;13377:2;13373:7;13362:8;13346:14;13342:29;13338:43;13318:18;13314:68;13304:96;;13396:1;13393;13386:12;13304:96;13423:33;;13475:20;;;-1:-1:-1;;;;;;13507:30:641;;13504:50;;;13550:1;13547;13540:12;13504:50;13583:4;13571:17;;-1:-1:-1;13614:14:641;13610:27;;;13600:38;;13597:58;;;13651:1;13648;13641:12;13666:135;13705:3;-1:-1:-1;;13726:17:641;;13723:43;;;13746:18;;:::i;:::-;-1:-1:-1;13793:1:641;13782:13;;13666:135::o;13806:470::-;13985:3;14023:6;14017:13;14039:53;14085:6;14080:3;14073:4;14065:6;14061:17;14039:53;:::i;:::-;14155:13;;14114:16;;;;14177:57;14155:13;14114:16;14211:4;14199:17;;14177:57;:::i;:::-;14250:20;;13806:470;-1:-1:-1;;;;13806:470:641:o;14614:125::-;14654:4;14682:1;14679;14676:8;14673:34;;;14687:18;;:::i;:::-;-1:-1:-1;14724:9:641;;14614:125::o;14744:267::-;14833:6;14828:3;14821:19;14885:6;14878:5;14871:4;14866:3;14862:14;14849:43;-1:-1:-1;14937:1:641;14912:16;;;14930:4;14908:27;;;14901:38;;;;14993:2;14972:15;;;-1:-1:-1;;14968:29:641;14959:39;;;14955:50;;14744:267::o;15016:506::-;15259:6;15248:9;15241:25;15302:2;15297;15286:9;15282:18;15275:30;15222:4;15328:62;15386:2;15375:9;15371:18;15363:6;15355;15328:62;:::i;:::-;15438:9;15430:6;15426:22;15421:2;15410:9;15406:18;15399:50;15466;15509:6;15501;15493;15466:50;:::i;:::-;15458:58;15016:506;-1:-1:-1;;;;;;;;15016:506:641:o;15527:304::-;-1:-1:-1;;;;;15757:15:641;;;15739:34;;15809:15;;15804:2;15789:18;;15782:43;15689:2;15674:18;;15527:304::o;15836:245::-;15903:6;15956:2;15944:9;15935:7;15931:23;15927:32;15924:52;;;15972:1;15969;15962:12;15924:52;16004:9;15998:16;16023:28;16045:5;16023:28;:::i;16086:339::-;16288:2;16270:21;;;16327:2;16307:18;;;16300:30;-1:-1:-1;;;16361:2:641;16346:18;;16339:45;16416:2;16401:18;;16086:339::o;16430:383::-;16627:2;16616:9;16609:21;16590:4;16653:45;16694:2;16683:9;16679:18;16671:6;16653:45;:::i;:::-;16746:9;16738:6;16734:22;16729:2;16718:9;16714:18;16707:50;16774:33;16800:6;16792;16774:33;:::i;:::-;16766:41;16430:383;-1:-1:-1;;;;;16430:383:641:o;17162:112::-;17194:1;17220;17210:35;;17225:18;;:::i;:::-;-1:-1:-1;17259:9:641;;17162:112::o;17686:274::-;17815:3;17853:6;17847:13;17869:53;17915:6;17910:3;17903:4;17895:6;17891:17;17869:53;:::i;:::-;17938:16;;;;;17686:274;-1:-1:-1;;17686:274:641:o;17965:489::-;-1:-1:-1;;;;;18234:15:641;;;18216:34;;18286:15;;18281:2;18266:18;;18259:43;18333:2;18318:18;;18311:34;;;18381:3;18376:2;18361:18;;18354:31;;;18159:4;;18402:46;;18428:19;;18420:6;18402:46;:::i;18459:249::-;18528:6;18581:2;18569:9;18560:7;18556:23;18552:32;18549:52;;;18597:1;18594;18587:12;18549:52;18629:9;18623:16;18648:30;18672:5;18648:30;:::i",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "OPERATOR_FILTER_REGISTRY()": "41f43434",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "claim(address,uint256)": "aad3ec96",
    "contractURI()": "e8a3d485",
    "getApproved(uint256)": "081812fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToClaim()": "acd083f8",
    "nextTokenIdToMint()": "3b1475a7",
    "operatorRestriction()": "504c6e01",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOperatorRestriction(bool)": "32f0cd64",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "subscribeToRegistry(address)": "57fd8455",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "totalSupply()": "18160ddd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256)": "2f92023a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"restriction\",\"type\":\"bool\"}],\"name\":\"OperatorRestriction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorRestriction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_restriction\",\"type\":\"bool\"}],\"name\":\"setOperatorRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscription\",\"type\":\"address\"}],\"name\":\"subscribeToRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {ERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\",\"params\":{\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"claim(address,uint256)\":{\"details\":\"The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.\",\"params\":{\"_quantity\":\"The number of NFTs to mint.\",\"_receiver\":\"The recipient of the NFT to mint.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"ID of a token.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                           of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"Additional bytes data to be used at the discretion of the consumer of the contract.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {ERC721-_safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {ERC721-_safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {ERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {ERC721-_transferFrom}.\"},\"verifyClaim(address,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner or approved operator burn the NFT of the given tokenId.\"},\"claim(address,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens the given tokenId belongs to.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToClaim()\":{\"notice\":\"The tokenId assigned to the next new NFT to be claimed.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"},\"verifyClaim(address,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"notice\":\"BASE:      ERC721A      EXTENSION: LazyMint  The `ERC721LazyMint` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.  It includes the following additions to standard ERC721 logic:      - Lazy minting      - Contract metadata for royalty support on platforms such as OpenSea that use        off-chain information to distribute roaylties.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2981 compliance for royalty support on NFT marketplaces.  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'  of  NFTs means actually assigning an owner to an NFT.  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,  without paying the gas cost for actually minting the NFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC721LazyMint.sol\":\"ERC721LazyMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/base/ERC721LazyMint.sol\":{\"keccak256\":\"0xf74ab866c24fd4400d8515c9a374c451cbe5110157d6f9d2b276e1eb4313f0a7\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0240c9efef3260d1b182bcd42f275c25bffff1fb6b27d57cf620d4d669a9ef3d\",\"dweb:/ipfs/QmabM9bzRMCMZAQB64TU8aNLrNi2pyEuGT4MbQ2vfNmjEY\"]},\"contracts/eip/ERC165.sol\":{\"keccak256\":\"0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c\",\"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr\"]},\"contracts/eip/ERC721AVirtualApprove.sol\":{\"keccak256\":\"0xe0e8f69caff529e6a79200c5aa62b407402e4198a325b1966078803ed1f83e10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://de48cf6e1690a78c72a234c944e8cbb062a1f1e22a9b9706f4c44ca8164f42ea\",\"dweb:/ipfs/QmY57TNb9QjxpLcM9fuU89o3C76jLw7BmkoZ2CqGgzxFAj\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf\",\"dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He\"]},\"contracts/eip/interface/IERC721.sol\":{\"keccak256\":\"0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676\",\"dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT\"]},\"contracts/eip/interface/IERC721A.sol\":{\"keccak256\":\"0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8\",\"dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5\"]},\"contracts/eip/interface/IERC721Metadata.sol\":{\"keccak256\":\"0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e\",\"dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4\"]},\"contracts/eip/interface/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0xc0aa1014d8e7dac53199204ea1e95d2488ad5aa85420d97853d3f8dee96f5f67\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://e7ebb973ce9804b0ef03b0a6336dd4da4ace59543ab499fe84ba60f8495ee8d7\",\"dweb:/ipfs/Qmdee8gPVFtQ6sP44bRdtKVkykm8Q41bpxfFrPfXkaxRt5\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DefaultOperatorFilterer.sol\":{\"keccak256\":\"0xbd2d5c15430a1428c354148f46472ada3b5fc741c5dfc095b29b21c31bc6733a\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://5ed920e97d76272b856f6a61af2bd57037baa546cf8e37b52dd924103f0cf0bd\",\"dweb:/ipfs/QmWfgfUzpmF2Mcfwr7GFrDJPzYTUmUmg8DusFt9VLdrbVt\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/OperatorFilterToggle.sol\":{\"keccak256\":\"0x7f4a59c3d0cd32b1b22a87eeaf74f395e8c56b2729e2418960c4c6dbfaf70329\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://193acd7afa57a8410ff53978c316114df95268a22601862acab8f60f695b52ac\",\"dweb:/ipfs/QmQx3Ary3ZEo9EKZ53W81rVP9dUGX4vxsB6UbFUNk3vfzA\"]},\"contracts/extension/OperatorFilterer.sol\":{\"keccak256\":\"0x07cd43aa984894eb75eeb89625b1473f32da42294cd9f122ca0730a5dfa661d5\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://3e25985648a00dd2df05c827a819f21b30ad496ed0053a7c31aeab01666ec69e\",\"dweb:/ipfs/QmZt9RPr7hxV3txHhFp7Gt7eJsTda3yFfTTe23i3csRudf\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485\",\"dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1\"]},\"contracts/extension/interface/IClaimableERC721.sol\":{\"keccak256\":\"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929\",\"dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOperatorFilterRegistry.sol\":{\"keccak256\":\"0xd43ac6f703d7692f51537838fcee1a17a6d1414a5965c41351f147b211d0d2da\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://cbfa4ac6486f17865b1f28cdbc93d89a268988aecd75435f15cf2c74d6f04e34\",\"dweb:/ipfs/QmQcBAWV5d3cD4z7euEasc6WYYTpkS1eHHEF1bVk6nbhSg\"]},\"contracts/extension/interface/IOperatorFilterToggle.sol\":{\"keccak256\":\"0xff05e83218d75f27210f20357d27849a2963b82830ca673a25c787f14b4203b1\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://36434c142d2e2f74a826f1240f8c12432eba0924fa7c888514592c46d4071674\",\"dweb:/ipfs/QmYntnzMvf6Duc9yhFyP4eheicbfUvBGcaXde9xqCrXPan\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b\",\"dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]},\"contracts/openzeppelin-presets/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623\",\"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6\"]},\"contracts/openzeppelin-presets/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BalanceQueryForZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintZeroQuantity"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OperatorNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToNonERC721ReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "URIQueryForNonexistentToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "restriction",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OperatorRestriction",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPERATOR_FILTER_REGISTRY",
          "outputs": [
            {
              "internalType": "contract IOperatorFilterRegistry",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "operatorRestriction",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_restriction",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOperatorRestriction"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_subscription",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "subscribeToRegistry"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {ERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "burn(uint256)": {
            "details": "ERC721A's `_burn(uint256,bool)` internally checks for token approvals.",
            "params": {
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "claim(address,uint256)": {
            "details": "The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.",
            "params": {
              "_quantity": "The number of NFTs to mint.",
              "_receiver": "The recipient of the NFT to mint."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "ID of a token."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each                           of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "Additional bytes data to be used at the discretion of the consumer of the contract."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {ERC721-_safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {ERC721-_safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {ERC721-setApprovalForAll}."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "totalSupply()": {
            "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {ERC721-_transferFrom}."
          },
          "verifyClaim(address,uint256)": {
            "details": "Checks a request to claim NFTs against a custom condition.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner or approved operator burn the NFT of the given tokenId."
          },
          "claim(address,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens the given tokenId belongs to."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToClaim()": {
            "notice": "The tokenId assigned to the next new NFT to be claimed."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          },
          "verifyClaim(address,uint256)": {
            "notice": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC721LazyMint.sol": "ERC721LazyMint"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC721LazyMint.sol": {
        "keccak256": "0xf74ab866c24fd4400d8515c9a374c451cbe5110157d6f9d2b276e1eb4313f0a7",
        "urls": [
          "bzz-raw://0240c9efef3260d1b182bcd42f275c25bffff1fb6b27d57cf620d4d669a9ef3d",
          "dweb:/ipfs/QmabM9bzRMCMZAQB64TU8aNLrNi2pyEuGT4MbQ2vfNmjEY"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC165.sol": {
        "keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
        "urls": [
          "bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
          "dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
        ],
        "license": "MIT"
      },
      "contracts/eip/ERC721AVirtualApprove.sol": {
        "keccak256": "0xe0e8f69caff529e6a79200c5aa62b407402e4198a325b1966078803ed1f83e10",
        "urls": [
          "bzz-raw://de48cf6e1690a78c72a234c944e8cbb062a1f1e22a9b9706f4c44ca8164f42ea",
          "dweb:/ipfs/QmY57TNb9QjxpLcM9fuU89o3C76jLw7BmkoZ2CqGgzxFAj"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9",
        "urls": [
          "bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf",
          "dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC721.sol": {
        "keccak256": "0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049",
        "urls": [
          "bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676",
          "dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721A.sol": {
        "keccak256": "0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd",
        "urls": [
          "bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8",
          "dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721Metadata.sol": {
        "keccak256": "0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb",
        "urls": [
          "bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e",
          "dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC721Receiver.sol": {
        "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
        "urls": [
          "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
          "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
        ],
        "license": "MIT"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0xc0aa1014d8e7dac53199204ea1e95d2488ad5aa85420d97853d3f8dee96f5f67",
        "urls": [
          "bzz-raw://e7ebb973ce9804b0ef03b0a6336dd4da4ace59543ab499fe84ba60f8495ee8d7",
          "dweb:/ipfs/Qmdee8gPVFtQ6sP44bRdtKVkykm8Q41bpxfFrPfXkaxRt5"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DefaultOperatorFilterer.sol": {
        "keccak256": "0xbd2d5c15430a1428c354148f46472ada3b5fc741c5dfc095b29b21c31bc6733a",
        "urls": [
          "bzz-raw://5ed920e97d76272b856f6a61af2bd57037baa546cf8e37b52dd924103f0cf0bd",
          "dweb:/ipfs/QmWfgfUzpmF2Mcfwr7GFrDJPzYTUmUmg8DusFt9VLdrbVt"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/OperatorFilterToggle.sol": {
        "keccak256": "0x7f4a59c3d0cd32b1b22a87eeaf74f395e8c56b2729e2418960c4c6dbfaf70329",
        "urls": [
          "bzz-raw://193acd7afa57a8410ff53978c316114df95268a22601862acab8f60f695b52ac",
          "dweb:/ipfs/QmQx3Ary3ZEo9EKZ53W81rVP9dUGX4vxsB6UbFUNk3vfzA"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/OperatorFilterer.sol": {
        "keccak256": "0x07cd43aa984894eb75eeb89625b1473f32da42294cd9f122ca0730a5dfa661d5",
        "urls": [
          "bzz-raw://3e25985648a00dd2df05c827a819f21b30ad496ed0053a7c31aeab01666ec69e",
          "dweb:/ipfs/QmZt9RPr7hxV3txHhFp7Gt7eJsTda3yFfTTe23i3csRudf"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350",
        "urls": [
          "bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485",
          "dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimableERC721.sol": {
        "keccak256": "0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960",
        "urls": [
          "bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929",
          "dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOperatorFilterRegistry.sol": {
        "keccak256": "0xd43ac6f703d7692f51537838fcee1a17a6d1414a5965c41351f147b211d0d2da",
        "urls": [
          "bzz-raw://cbfa4ac6486f17865b1f28cdbc93d89a268988aecd75435f15cf2c74d6f04e34",
          "dweb:/ipfs/QmQcBAWV5d3cD4z7euEasc6WYYTpkS1eHHEF1bVk6nbhSg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/interface/IOperatorFilterToggle.sol": {
        "keccak256": "0xff05e83218d75f27210f20357d27849a2963b82830ca673a25c787f14b4203b1",
        "urls": [
          "bzz-raw://36434c142d2e2f74a826f1240f8c12432eba0924fa7c888514592c46d4071674",
          "dweb:/ipfs/QmYntnzMvf6Duc9yhFyP4eheicbfUvBGcaXde9xqCrXPan"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385",
        "urls": [
          "bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b",
          "dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8"
        ],
        "license": "Apache-2.0"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      },
      "contracts/openzeppelin-presets/security/ReentrancyGuard.sol": {
        "keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
        "urls": [
          "bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
          "dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
        ],
        "license": "MIT"
      },
      "contracts/openzeppelin-presets/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC721LazyMint.sol",
    "id": 12179,
    "exportedSymbols": {
      "BatchMintMetadata": [
        34496
      ],
      "ContractMetadata": [
        34723
      ],
      "DefaultOperatorFilterer": [
        34762
      ],
      "ERC721A": [
        29541
      ],
      "ERC721LazyMint": [
        12178
      ],
      "IClaimableERC721": [
        49640
      ],
      "IContractMetadata": [
        49679
      ],
      "IERC165": [
        31146
      ],
      "IERC2981": [
        31290
      ],
      "ILazyMint": [
        50054
      ],
      "IMulticall": [
        50168
      ],
      "IOwnable": [
        50418
      ],
      "IRoyalty": [
        50644
      ],
      "LazyMint": [
        37538
      ],
      "Multicall": [
        37872
      ],
      "OperatorFilterer": [
        38148
      ],
      "Ownable": [
        38400
      ],
      "ReentrancyGuard": [
        76642
      ],
      "Royalty": [
        39646
      ],
      "TWAddress": [
        65067
      ],
      "TWStrings": [
        65767
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:9962:31",
    "nodes": [
      {
        "id": 11765,
        "nodeType": "PragmaDirective",
        "src": "39:23:31",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 11767,
        "nodeType": "ImportDirective",
        "src": "86:59:31",
        "nodes": [],
        "absolutePath": "contracts/eip/ERC721AVirtualApprove.sol",
        "file": "../eip/ERC721AVirtualApprove.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 29542,
        "symbolAliases": [
          {
            "foreign": {
              "id": 11766,
              "name": "ERC721A",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 29541,
              "src": "95:7:31",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_ERC721A_$29541_$",
                "typeString": "type(contract ERC721A)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 11768,
        "nodeType": "ImportDirective",
        "src": "147:43:31",
        "nodes": [],
        "absolutePath": "contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 34724,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11769,
        "nodeType": "ImportDirective",
        "src": "191:36:31",
        "nodes": [],
        "absolutePath": "contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 37873,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11770,
        "nodeType": "ImportDirective",
        "src": "228:34:31",
        "nodes": [],
        "absolutePath": "contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 38401,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11771,
        "nodeType": "ImportDirective",
        "src": "263:34:31",
        "nodes": [],
        "absolutePath": "contracts/extension/Royalty.sol",
        "file": "../extension/Royalty.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 39647,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11772,
        "nodeType": "ImportDirective",
        "src": "298:44:31",
        "nodes": [],
        "absolutePath": "contracts/extension/BatchMintMetadata.sol",
        "file": "../extension/BatchMintMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 34497,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11773,
        "nodeType": "ImportDirective",
        "src": "343:35:31",
        "nodes": [],
        "absolutePath": "contracts/extension/LazyMint.sol",
        "file": "../extension/LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 37539,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11774,
        "nodeType": "ImportDirective",
        "src": "379:53:31",
        "nodes": [],
        "absolutePath": "contracts/extension/interface/IClaimableERC721.sol",
        "file": "../extension/interface/IClaimableERC721.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 49641,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11775,
        "nodeType": "ImportDirective",
        "src": "433:50:31",
        "nodes": [],
        "absolutePath": "contracts/extension/DefaultOperatorFilterer.sol",
        "file": "../extension/DefaultOperatorFilterer.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 34763,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11776,
        "nodeType": "ImportDirective",
        "src": "485:30:31",
        "nodes": [],
        "absolutePath": "contracts/lib/TWStrings.sol",
        "file": "../lib/TWStrings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 65768,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 11777,
        "nodeType": "ImportDirective",
        "src": "516:62:31",
        "nodes": [],
        "absolutePath": "contracts/openzeppelin-presets/security/ReentrancyGuard.sol",
        "file": "../openzeppelin-presets/security/ReentrancyGuard.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 12179,
        "sourceUnit": 76643,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 12178,
        "nodeType": "ContractDefinition",
        "src": "1646:8354:31",
        "nodes": [
          {
            "id": 11801,
            "nodeType": "UsingForDirective",
            "src": "1863:28:31",
            "nodes": [],
            "libraryName": {
              "id": 11799,
              "name": "TWStrings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 65767,
              "src": "1869:9:31"
            },
            "typeName": {
              "id": 11800,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1883:7:31",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 11832,
            "nodeType": "FunctionDefinition",
            "src": "2076:345:31",
            "nodes": [],
            "body": {
              "id": 11831,
              "nodeType": "Block",
              "src": "2273:148:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 11819,
                        "name": "_defaultAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11803,
                        "src": "2295:13:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 11818,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38393,
                      "src": "2283:11:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 11820,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2283:26:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11821,
                  "nodeType": "ExpressionStatement",
                  "src": "2283:26:31"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 11823,
                        "name": "_royaltyRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11809,
                        "src": "2344:17:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 11824,
                        "name": "_royaltyBps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11811,
                        "src": "2363:11:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "id": 11822,
                      "name": "_setupDefaultRoyaltyInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39577,
                      "src": "2319:24:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 11825,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2319:56:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11826,
                  "nodeType": "ExpressionStatement",
                  "src": "2319:56:31"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "74727565",
                        "id": 11828,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2409:4:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 11827,
                      "name": "_setOperatorRestriction",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37988,
                      "src": "2385:23:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bool_$returns$__$",
                        "typeString": "function (bool)"
                      }
                    },
                    "id": 11829,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2385:29:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11830,
                  "nodeType": "ExpressionStatement",
                  "src": "2385:29:31"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 11814,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11805,
                    "src": "2257:5:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 11815,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11807,
                    "src": "2264:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 11816,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 11813,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29541,
                  "src": "2249:7:31"
                },
                "nodeType": "ModifierInvocation",
                "src": "2249:23:31"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 11812,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11803,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "2105:13:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11832,
                  "src": "2097:21:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11802,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2097:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11805,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "2142:5:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11832,
                  "src": "2128:19:31",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 11804,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2128:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11807,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "2171:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11832,
                  "src": "2157:21:31",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 11806,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2157:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11809,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "2196:17:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11832,
                  "src": "2188:25:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11808,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2188:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11811,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "2231:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11832,
                  "src": "2223:19:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 11810,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2223:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2087:161:31"
            },
            "returnParameters": {
              "id": 11817,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2273:0:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 11863,
            "nodeType": "FunctionDefinition",
            "src": "2671:444:31",
            "nodes": [],
            "body": {
              "id": 11862,
              "nodeType": "Block",
              "src": "2780:335:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 11860,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 11853,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11849,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 11845,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11843,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11835,
                            "src": "2809:11:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783031666663396137",
                            "id": 11844,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2824:10:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_33540519_by_1",
                              "typeString": "int_const 33540519"
                            },
                            "value": "0x01ffc9a7"
                          },
                          "src": "2809:25:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 11848,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11846,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11835,
                            "src": "2884:11:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783830616335386364",
                            "id": 11847,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2899:10:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2158778573_by_1",
                              "typeString": "int_const 2158778573"
                            },
                            "value": "0x80ac58cd"
                          },
                          "src": "2884:25:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2809:100:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 11852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 11850,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11835,
                          "src": "2959:11:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30783562356531333966",
                          "id": 11851,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2974:10:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1532892063_by_1",
                            "typeString": "int_const 1532892063"
                          },
                          "value": "0x5b5e139f"
                        },
                        "src": "2959:25:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "2809:175:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 11859,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 11854,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11835,
                        "src": "3042:11:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 11856,
                              "name": "IERC2981",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 31290,
                              "src": "3062:8:31",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$31290_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$31290_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            ],
                            "id": 11855,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3057:4:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 11857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3057:14:31",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$31290",
                            "typeString": "type(contract IERC2981)"
                          }
                        },
                        "id": 11858,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "3057:26:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "3042:41:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2809:274:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 11842,
                  "id": 11861,
                  "nodeType": "Return",
                  "src": "2790:293:31"
                }
              ]
            },
            "baseFunctions": [
              28306,
              31145
            ],
            "documentation": {
              "id": 11833,
              "nodeType": "StructuredDocumentation",
              "src": "2607:59:31",
              "text": "@dev See ERC165: https://eips.ethereum.org/EIPS/eip-165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "2680:17:31",
            "overrides": {
              "id": 11839,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 11837,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29541,
                  "src": "2747:7:31"
                },
                {
                  "id": 11838,
                  "name": "IERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31146,
                  "src": "2756:7:31"
                }
              ],
              "src": "2738:26:31"
            },
            "parameters": {
              "id": 11836,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11835,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "2705:11:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11863,
                  "src": "2698:18:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 11834,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2698:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2697:20:31"
            },
            "returnParameters": {
              "id": 11842,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11841,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11863,
                  "src": "2774:4:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 11840,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2774:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2773:6:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 11890,
            "nodeType": "FunctionDefinition",
            "src": "3529:224:31",
            "nodes": [],
            "body": {
              "id": 11889,
              "nodeType": "Block",
              "src": "3618:135:31",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    11873
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 11873,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "3642:8:31",
                      "nodeType": "VariableDeclaration",
                      "scope": 11889,
                      "src": "3628:22:31",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 11872,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3628:6:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 11877,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 11875,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11866,
                        "src": "3665:8:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 11874,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34443,
                      "src": "3653:11:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 11876,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3653:21:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3628:46:31"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 11882,
                            "name": "batchUri",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11873,
                            "src": "3715:8:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 11883,
                                "name": "_tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11866,
                                "src": "3725:8:31",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 11884,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 65649,
                              "src": "3725:17:31",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 11885,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3725:19:31",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 11880,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3698:3:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 11881,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3698:16:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 11886,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3698:47:31",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 11879,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3691:6:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 11878,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3691:6:31",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 11887,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3691:55:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 11871,
                  "id": 11888,
                  "nodeType": "Return",
                  "src": "3684:62:31"
                }
              ]
            },
            "baseFunctions": [
              28550
            ],
            "documentation": {
              "id": 11864,
              "nodeType": "StructuredDocumentation",
              "src": "3307:217:31",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "3538:8:31",
            "overrides": {
              "id": 11868,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3585:8:31"
            },
            "parameters": {
              "id": 11867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11866,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3555:8:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11890,
                  "src": "3547:16:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11865,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3547:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3546:18:31"
            },
            "returnParameters": {
              "id": 11871,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11870,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11890,
                  "src": "3603:13:31",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 11869,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3603:6:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3602:15:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 11931,
            "nodeType": "FunctionDefinition",
            "src": "4842:533:31",
            "nodes": [],
            "body": {
              "id": 11930,
              "nodeType": "Block",
              "src": "4931:444:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 11905,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11903,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11901,
                            "name": "_currentIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28191,
                            "src": "4949:13:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 11902,
                            "name": "_quantity",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11895,
                            "src": "4965:9:31",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4949:25:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "id": 11904,
                          "name": "nextTokenIdToLazyMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 37472,
                          "src": "4978:21:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4949:50:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420656e6f756768206c617a79206d696e74656420746f6b656e732e",
                        "id": 11906,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5001:32:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_95155f1f93ce33c8fa6f8129b089083ff41dbb9470fcdf0202fd62641d97efad",
                          "typeString": "literal_string \"Not enough lazy minted tokens.\""
                        },
                        "value": "Not enough lazy minted tokens."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_95155f1f93ce33c8fa6f8129b089083ff41dbb9470fcdf0202fd62641d97efad",
                          "typeString": "literal_string \"Not enough lazy minted tokens.\""
                        }
                      ],
                      "id": 11900,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4941:7:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11907,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4941:93:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11908,
                  "nodeType": "ExpressionStatement",
                  "src": "4941:93:31"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 11910,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5056:3:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 11911,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5056:10:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 11912,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11895,
                        "src": "5068:9:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 11909,
                      "name": "verifyClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11940,
                      "src": "5044:11:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) view"
                      }
                    },
                    "id": 11913,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5044:34:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11914,
                  "nodeType": "ExpressionStatement",
                  "src": "5044:34:31"
                },
                {
                  "assignments": [
                    11916
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 11916,
                      "mutability": "mutable",
                      "name": "startTokenId",
                      "nameLocation": "5163:12:31",
                      "nodeType": "VariableDeclaration",
                      "scope": 11930,
                      "src": "5155:20:31",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 11915,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5155:7:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 11921,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 11918,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11893,
                        "src": "5201:9:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 11919,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11895,
                        "src": "5212:9:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 11917,
                      "name": "_transferTokensOnClaim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12107,
                      "src": "5178:22:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256) returns (uint256)"
                      }
                    },
                    "id": 11920,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5178:44:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5155:67:31"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 11923,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5321:3:31",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 11924,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5321:10:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 11925,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11893,
                        "src": "5333:9:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 11926,
                        "name": "startTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11916,
                        "src": "5344:12:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 11927,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11895,
                        "src": "5358:9:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 11922,
                      "name": "TokensClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 49623,
                      "src": "5307:13:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,uint256)"
                      }
                    },
                    "id": 11928,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5307:61:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11929,
                  "nodeType": "EmitStatement",
                  "src": "5302:66:31"
                }
              ]
            },
            "baseFunctions": [
              49631
            ],
            "documentation": {
              "id": 11891,
              "nodeType": "StructuredDocumentation",
              "src": "3941:896:31",
              "text": "  @notice          Lets an address claim multiple lazy minted NFTs at once to a recipient.\n                   This function prevents any reentrant calls, and is not allowed to be overridden.\n                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`\n                   functions to create custom logic for verification and claiming,\n                   for e.g. price collection, allowlist, max quantity, etc.\n  @dev             The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.\n                   The logic in `transferTokensOnClaim` does actual minting of tokens,\n                   can also be used to apply other state changes.\n  @param _receiver  The recipient of the NFT to mint.\n  @param _quantity  The number of NFTs to mint."
            },
            "functionSelector": "aad3ec96",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 11898,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 11897,
                  "name": "nonReentrant",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 76641,
                  "src": "4918:12:31"
                },
                "nodeType": "ModifierInvocation",
                "src": "4918:12:31"
              }
            ],
            "name": "claim",
            "nameLocation": "4851:5:31",
            "parameters": {
              "id": 11896,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11893,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "4865:9:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11931,
                  "src": "4857:17:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11892,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4857:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11895,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "4884:9:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11931,
                  "src": "4876:17:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11894,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4876:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4856:38:31"
            },
            "returnParameters": {
              "id": 11899,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4931:0:31"
            },
            "scope": 12178,
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 11940,
            "nodeType": "FunctionDefinition",
            "src": "5785:80:31",
            "nodes": [],
            "body": {
              "id": 11939,
              "nodeType": "Block",
              "src": "5863:2:31",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              49639
            ],
            "documentation": {
              "id": 11932,
              "nodeType": "StructuredDocumentation",
              "src": "5381:399:31",
              "text": "  @notice          Override this function to add logic for claim verification, based on conditions\n                   such as allowlist, price, max quantity etc.\n  @dev             Checks a request to claim NFTs against a custom condition.\n  @param _claimer   Caller of the claim function.\n  @param _quantity  The number of NFTs being claimed."
            },
            "functionSelector": "2f92023a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyClaim",
            "nameLocation": "5794:11:31",
            "parameters": {
              "id": 11937,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11934,
                  "mutability": "mutable",
                  "name": "_claimer",
                  "nameLocation": "5814:8:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11940,
                  "src": "5806:16:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11933,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5806:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11936,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "5832:9:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11940,
                  "src": "5824:17:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11935,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5824:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5805:37:31"
            },
            "returnParameters": {
              "id": 11938,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5863:0:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 11952,
            "nodeType": "FunctionDefinition",
            "src": "6139:87:31",
            "nodes": [],
            "body": {
              "id": 11951,
              "nodeType": "Block",
              "src": "6188:38:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 11947,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11943,
                        "src": "6204:8:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 11948,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6214:4:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 11946,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        29254,
                        29436
                      ],
                      "referencedDeclaration": 29436,
                      "src": "6198:5:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (uint256,bool)"
                      }
                    },
                    "id": 11949,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6198:21:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11950,
                  "nodeType": "ExpressionStatement",
                  "src": "6198:21:31"
                }
              ]
            },
            "documentation": {
              "id": 11941,
              "nodeType": "StructuredDocumentation",
              "src": "5871:263:31",
              "text": "  @notice         Lets an owner or approved operator burn the NFT of the given tokenId.\n  @dev            ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\n  @param _tokenId The tokenId of the NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "6148:4:31",
            "parameters": {
              "id": 11944,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11943,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "6161:8:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11952,
                  "src": "6153:16:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11942,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6153:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6152:18:31"
            },
            "returnParameters": {
              "id": 11945,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6188:0:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 11961,
            "nodeType": "FunctionDefinition",
            "src": "6308:112:31",
            "nodes": [],
            "body": {
              "id": 11960,
              "nodeType": "Block",
              "src": "6375:45:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 11958,
                    "name": "nextTokenIdToLazyMint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 37472,
                    "src": "6392:21:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 11957,
                  "id": 11959,
                  "nodeType": "Return",
                  "src": "6385:28:31"
                }
              ]
            },
            "documentation": {
              "id": 11953,
              "nodeType": "StructuredDocumentation",
              "src": "6232:71:31",
              "text": "@notice The tokenId assigned to the next new NFT to be lazy minted."
            },
            "functionSelector": "3b1475a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToMint",
            "nameLocation": "6317:17:31",
            "parameters": {
              "id": 11954,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6334:2:31"
            },
            "returnParameters": {
              "id": 11957,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11956,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11961,
                  "src": "6366:7:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11955,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6366:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6365:9:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 11970,
            "nodeType": "FunctionDefinition",
            "src": "6498:105:31",
            "nodes": [],
            "body": {
              "id": 11969,
              "nodeType": "Block",
              "src": "6566:37:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 11967,
                    "name": "_currentIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 28191,
                    "src": "6583:13:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 11966,
                  "id": 11968,
                  "nodeType": "Return",
                  "src": "6576:20:31"
                }
              ]
            },
            "documentation": {
              "id": 11962,
              "nodeType": "StructuredDocumentation",
              "src": "6426:67:31",
              "text": "@notice The tokenId assigned to the next new NFT to be claimed."
            },
            "functionSelector": "acd083f8",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToClaim",
            "nameLocation": "6507:18:31",
            "parameters": {
              "id": 11963,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6525:2:31"
            },
            "returnParameters": {
              "id": 11966,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11965,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11970,
                  "src": "6557:7:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11964,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6557:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6556:9:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 11991,
            "nodeType": "FunctionDefinition",
            "src": "6835:227:31",
            "nodes": [],
            "body": {
              "id": 11990,
              "nodeType": "Block",
              "src": "7002:60:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 11986,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11973,
                        "src": "7036:8:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 11987,
                        "name": "approved",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11975,
                        "src": "7046:8:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 11983,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "7012:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721LazyMint_$12178_$",
                          "typeString": "type(contract super ERC721LazyMint)"
                        }
                      },
                      "id": 11985,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setApprovalForAll",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28661,
                      "src": "7012:23:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bool_$returns$__$",
                        "typeString": "function (address,bool)"
                      }
                    },
                    "id": 11988,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7012:43:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11989,
                  "nodeType": "ExpressionStatement",
                  "src": "7012:43:31"
                }
              ]
            },
            "baseFunctions": [
              28661
            ],
            "documentation": {
              "id": 11971,
              "nodeType": "StructuredDocumentation",
              "src": "6790:40:31",
              "text": "@dev See {ERC721-setApprovalForAll}."
            },
            "functionSelector": "a22cb465",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 11980,
                    "name": "operator",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11973,
                    "src": "6988:8:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 11981,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 11979,
                  "name": "onlyAllowedOperatorApproval",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 38051,
                  "src": "6960:27:31"
                },
                "nodeType": "ModifierInvocation",
                "src": "6960:37:31"
              }
            ],
            "name": "setApprovalForAll",
            "nameLocation": "6844:17:31",
            "overrides": {
              "id": 11978,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 11977,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29541,
                  "src": "6943:7:31"
                }
              ],
              "src": "6934:17:31"
            },
            "parameters": {
              "id": 11976,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11973,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "6870:8:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11991,
                  "src": "6862:16:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11972,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6862:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11975,
                  "mutability": "mutable",
                  "name": "approved",
                  "nameLocation": "6885:8:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 11991,
                  "src": "6880:13:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 11974,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6880:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6861:33:31"
            },
            "returnParameters": {
              "id": 11982,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7002:0:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 12012,
            "nodeType": "FunctionDefinition",
            "src": "7103:208:31",
            "nodes": [],
            "body": {
              "id": 12011,
              "nodeType": "Block",
              "src": "7262:49:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 12007,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11994,
                        "src": "7286:8:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 12008,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11996,
                        "src": "7296:7:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 12004,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "7272:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721LazyMint_$12178_$",
                          "typeString": "type(contract super ERC721LazyMint)"
                        }
                      },
                      "id": 12006,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "approve",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28605,
                      "src": "7272:13:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 12009,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7272:32:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12010,
                  "nodeType": "ExpressionStatement",
                  "src": "7272:32:31"
                }
              ]
            },
            "baseFunctions": [
              28605
            ],
            "documentation": {
              "id": 11992,
              "nodeType": "StructuredDocumentation",
              "src": "7068:30:31",
              "text": "@dev See {ERC721-approve}."
            },
            "functionSelector": "095ea7b3",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 12001,
                    "name": "operator",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 11994,
                    "src": "7248:8:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 12002,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 12000,
                  "name": "onlyAllowedOperatorApproval",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 38051,
                  "src": "7220:27:31"
                },
                "nodeType": "ModifierInvocation",
                "src": "7220:37:31"
              }
            ],
            "name": "approve",
            "nameLocation": "7112:7:31",
            "overrides": {
              "id": 11999,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 11998,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29541,
                  "src": "7203:7:31"
                }
              ],
              "src": "7194:17:31"
            },
            "parameters": {
              "id": 11997,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11994,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "7128:8:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12012,
                  "src": "7120:16:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11993,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7120:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11996,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "7146:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12012,
                  "src": "7138:15:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11995,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7138:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7119:35:31"
            },
            "returnParameters": {
              "id": 12003,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7262:0:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 12036,
            "nodeType": "FunctionDefinition",
            "src": "7358:208:31",
            "nodes": [],
            "body": {
              "id": 12035,
              "nodeType": "Block",
              "src": "7512:54:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 12030,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12015,
                        "src": "7541:4:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 12031,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12017,
                        "src": "7547:2:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 12032,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12019,
                        "src": "7551:7:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 12027,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "7522:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721LazyMint_$12178_$",
                          "typeString": "type(contract super ERC721LazyMint)"
                        }
                      },
                      "id": 12029,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28697,
                      "src": "7522:18:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 12033,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7522:37:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12034,
                  "nodeType": "ExpressionStatement",
                  "src": "7522:37:31"
                }
              ]
            },
            "baseFunctions": [
              28697
            ],
            "documentation": {
              "id": 12013,
              "nodeType": "StructuredDocumentation",
              "src": "7317:36:31",
              "text": "@dev See {ERC721-_transferFrom}."
            },
            "functionSelector": "23b872dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 12024,
                    "name": "from",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12015,
                    "src": "7506:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 12025,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 12023,
                  "name": "onlyAllowedOperator",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 38041,
                  "src": "7486:19:31"
                },
                "nodeType": "ModifierInvocation",
                "src": "7486:25:31"
              }
            ],
            "name": "transferFrom",
            "nameLocation": "7367:12:31",
            "overrides": {
              "id": 12022,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 12021,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29541,
                  "src": "7477:7:31"
                }
              ],
              "src": "7468:17:31"
            },
            "parameters": {
              "id": 12020,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12015,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "7397:4:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12036,
                  "src": "7389:12:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12014,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7389:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12017,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "7419:2:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12036,
                  "src": "7411:10:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12016,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7411:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12019,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "7439:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12036,
                  "src": "7431:15:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12018,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7431:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7379:73:31"
            },
            "returnParameters": {
              "id": 12026,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7512:0:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 12060,
            "nodeType": "FunctionDefinition",
            "src": "7617:216:31",
            "nodes": [],
            "body": {
              "id": 12059,
              "nodeType": "Block",
              "src": "7775:58:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 12054,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12039,
                        "src": "7808:4:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 12055,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12041,
                        "src": "7814:2:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 12056,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12043,
                        "src": "7818:7:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 12051,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "7785:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721LazyMint_$12178_$",
                          "typeString": "type(contract super ERC721LazyMint)"
                        }
                      },
                      "id": 12053,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28716,
                      "src": "7785:22:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 12057,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7785:41:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12058,
                  "nodeType": "ExpressionStatement",
                  "src": "7785:41:31"
                }
              ]
            },
            "baseFunctions": [
              28716
            ],
            "documentation": {
              "id": 12037,
              "nodeType": "StructuredDocumentation",
              "src": "7572:40:31",
              "text": "@dev See {ERC721-_safeTransferFrom}."
            },
            "functionSelector": "42842e0e",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 12048,
                    "name": "from",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12039,
                    "src": "7769:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 12049,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 12047,
                  "name": "onlyAllowedOperator",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 38041,
                  "src": "7749:19:31"
                },
                "nodeType": "ModifierInvocation",
                "src": "7749:25:31"
              }
            ],
            "name": "safeTransferFrom",
            "nameLocation": "7626:16:31",
            "overrides": {
              "id": 12046,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 12045,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29541,
                  "src": "7740:7:31"
                }
              ],
              "src": "7731:17:31"
            },
            "parameters": {
              "id": 12044,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12039,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "7660:4:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12060,
                  "src": "7652:12:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12038,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7652:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12041,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "7682:2:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12060,
                  "src": "7674:10:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12040,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7674:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12043,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "7702:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12060,
                  "src": "7694:15:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12042,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7694:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7642:73:31"
            },
            "returnParameters": {
              "id": 12050,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7775:0:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 12087,
            "nodeType": "FunctionDefinition",
            "src": "7884:249:31",
            "nodes": [],
            "body": {
              "id": 12086,
              "nodeType": "Block",
              "src": "8069:64:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 12080,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12063,
                        "src": "8102:4:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 12081,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12065,
                        "src": "8108:2:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 12082,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12067,
                        "src": "8112:7:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 12083,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12069,
                        "src": "8121:4:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 12077,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "8079:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721LazyMint_$12178_$",
                          "typeString": "type(contract super ERC721LazyMint)"
                        }
                      },
                      "id": 12079,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28752,
                      "src": "8079:22:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,address,uint256,bytes memory)"
                      }
                    },
                    "id": 12084,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8079:47:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12085,
                  "nodeType": "ExpressionStatement",
                  "src": "8079:47:31"
                }
              ]
            },
            "baseFunctions": [
              28752
            ],
            "documentation": {
              "id": 12061,
              "nodeType": "StructuredDocumentation",
              "src": "7839:40:31",
              "text": "@dev See {ERC721-_safeTransferFrom}."
            },
            "functionSelector": "b88d4fde",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 12074,
                    "name": "from",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 12063,
                    "src": "8063:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 12075,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 12073,
                  "name": "onlyAllowedOperator",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 38041,
                  "src": "8043:19:31"
                },
                "nodeType": "ModifierInvocation",
                "src": "8043:25:31"
              }
            ],
            "name": "safeTransferFrom",
            "nameLocation": "7893:16:31",
            "overrides": {
              "id": 12072,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 12071,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29541,
                  "src": "8034:7:31"
                }
              ],
              "src": "8025:17:31"
            },
            "parameters": {
              "id": 12070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12063,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "7927:4:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12087,
                  "src": "7919:12:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12062,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7919:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12065,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "7949:2:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12087,
                  "src": "7941:10:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12064,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7941:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12067,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "7969:7:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12087,
                  "src": "7961:15:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12066,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7961:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12069,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "7999:4:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12087,
                  "src": "7986:17:31",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 12068,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7986:5:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7909:100:31"
            },
            "returnParameters": {
              "id": 12076,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8069:0:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 12107,
            "nodeType": "FunctionDefinition",
            "src": "8708:232:31",
            "nodes": [],
            "body": {
              "id": 12106,
              "nodeType": "Block",
              "src": "8854:86:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 12099,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 12097,
                      "name": "startTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12095,
                      "src": "8864:12:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 12098,
                      "name": "_currentIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28191,
                      "src": "8879:13:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8864:28:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 12100,
                  "nodeType": "ExpressionStatement",
                  "src": "8864:28:31"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 12102,
                        "name": "_receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12090,
                        "src": "8912:9:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 12103,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12092,
                        "src": "8923:9:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 12101,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        28791,
                        28954
                      ],
                      "referencedDeclaration": 28791,
                      "src": "8902:9:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 12104,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8902:31:31",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12105,
                  "nodeType": "ExpressionStatement",
                  "src": "8902:31:31"
                }
              ]
            },
            "documentation": {
              "id": 12088,
              "nodeType": "StructuredDocumentation",
              "src": "8321:382:31",
              "text": "  @notice          Mints tokens to receiver on claim.\n                   Any state changes related to `claim` must be applied\n                   here by overriding this function.\n  @dev             Override this function to add logic for state updation.\n                   When overriding, apply any state changes before `_safeMint`."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferTokensOnClaim",
            "nameLocation": "8717:22:31",
            "parameters": {
              "id": 12093,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12090,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "8748:9:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12107,
                  "src": "8740:17:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12089,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8740:7:31",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12092,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "8767:9:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12107,
                  "src": "8759:17:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12091,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8759:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8739:38:31"
            },
            "returnParameters": {
              "id": 12096,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12095,
                  "mutability": "mutable",
                  "name": "startTokenId",
                  "nameLocation": "8836:12:31",
                  "nodeType": "VariableDeclaration",
                  "scope": 12107,
                  "src": "8828:20:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12094,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8828:7:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8827:22:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 12121,
            "nodeType": "FunctionDefinition",
            "src": "9032:115:31",
            "nodes": [],
            "body": {
              "id": 12120,
              "nodeType": "Block",
              "src": "9102:45:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 12118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 12114,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "9119:3:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 12115,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "9119:10:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 12116,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "9133:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 12117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9133:7:31",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9119:21:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 12113,
                  "id": 12119,
                  "nodeType": "Return",
                  "src": "9112:28:31"
                }
              ]
            },
            "baseFunctions": [
              37537
            ],
            "documentation": {
              "id": 12108,
              "nodeType": "StructuredDocumentation",
              "src": "8946:81:31",
              "text": "@dev Returns whether lazy minting can be done in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canLazyMint",
            "nameLocation": "9041:12:31",
            "overrides": {
              "id": 12110,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9078:8:31"
            },
            "parameters": {
              "id": 12109,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9053:2:31"
            },
            "returnParameters": {
              "id": 12113,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12112,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12121,
                  "src": "9096:4:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12111,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9096:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9095:6:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 12135,
            "nodeType": "FunctionDefinition",
            "src": "9243:121:31",
            "nodes": [],
            "body": {
              "id": 12134,
              "nodeType": "Block",
              "src": "9319:45:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 12132,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 12128,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "9336:3:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 12129,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "9336:10:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 12130,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "9350:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 12131,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9350:7:31",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9336:21:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 12127,
                  "id": 12133,
                  "nodeType": "Return",
                  "src": "9329:28:31"
                }
              ]
            },
            "baseFunctions": [
              34722
            ],
            "documentation": {
              "id": 12122,
              "nodeType": "StructuredDocumentation",
              "src": "9153:85:31",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "9252:18:31",
            "overrides": {
              "id": 12124,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9295:8:31"
            },
            "parameters": {
              "id": 12123,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9270:2:31"
            },
            "returnParameters": {
              "id": 12127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12126,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12135,
                  "src": "9313:4:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12125,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9313:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9312:6:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 12149,
            "nodeType": "FunctionDefinition",
            "src": "9448:115:31",
            "nodes": [],
            "body": {
              "id": 12148,
              "nodeType": "Block",
              "src": "9518:45:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 12146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 12142,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "9535:3:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 12143,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "9535:10:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 12144,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "9549:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 12145,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9549:7:31",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9535:21:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 12141,
                  "id": 12147,
                  "nodeType": "Return",
                  "src": "9528:28:31"
                }
              ]
            },
            "baseFunctions": [
              38399
            ],
            "documentation": {
              "id": 12136,
              "nodeType": "StructuredDocumentation",
              "src": "9370:73:31",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "9457:12:31",
            "overrides": {
              "id": 12138,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9494:8:31"
            },
            "parameters": {
              "id": 12137,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9469:2:31"
            },
            "returnParameters": {
              "id": 12141,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12140,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12149,
                  "src": "9512:4:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12139,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9512:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9511:6:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 12163,
            "nodeType": "FunctionDefinition",
            "src": "9654:121:31",
            "nodes": [],
            "body": {
              "id": 12162,
              "nodeType": "Block",
              "src": "9730:45:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 12160,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 12156,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "9747:3:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 12157,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "9747:10:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 12158,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "9761:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 12159,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9761:7:31",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9747:21:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 12155,
                  "id": 12161,
                  "nodeType": "Return",
                  "src": "9740:28:31"
                }
              ]
            },
            "baseFunctions": [
              39645
            ],
            "documentation": {
              "id": 12150,
              "nodeType": "StructuredDocumentation",
              "src": "9569:80:31",
              "text": "@dev Returns whether royalty info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetRoyaltyInfo",
            "nameLocation": "9663:18:31",
            "overrides": {
              "id": 12152,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9706:8:31"
            },
            "parameters": {
              "id": 12151,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9681:2:31"
            },
            "returnParameters": {
              "id": 12155,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12154,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12163,
                  "src": "9724:4:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12153,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9724:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9723:6:31"
            },
            "scope": 12178,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 12177,
            "nodeType": "FunctionDefinition",
            "src": "9874:124:31",
            "nodes": [],
            "body": {
              "id": 12176,
              "nodeType": "Block",
              "src": "9953:45:31",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 12174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 12170,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "9970:3:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 12171,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "9970:10:31",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 12172,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38352,
                        "src": "9984:5:31",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 12173,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9984:7:31",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9970:21:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 12169,
                  "id": 12175,
                  "nodeType": "Return",
                  "src": "9963:28:31"
                }
              ]
            },
            "baseFunctions": [
              37993
            ],
            "documentation": {
              "id": 12164,
              "nodeType": "StructuredDocumentation",
              "src": "9781:88:31",
              "text": "@dev Returns whether operator restriction can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOperatorRestriction",
            "nameLocation": "9883:26:31",
            "overrides": {
              "id": 12166,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9929:8:31"
            },
            "parameters": {
              "id": 12165,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9909:2:31"
            },
            "returnParameters": {
              "id": 12169,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12168,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 12177,
                  "src": "9947:4:31",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 12167,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9947:4:31",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9946:6:31"
            },
            "scope": 12178,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 11779,
              "name": "ERC721A",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29541,
              "src": "1677:7:31"
            },
            "id": 11780,
            "nodeType": "InheritanceSpecifier",
            "src": "1677:7:31"
          },
          {
            "baseName": {
              "id": 11781,
              "name": "ContractMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 34723,
              "src": "1690:16:31"
            },
            "id": 11782,
            "nodeType": "InheritanceSpecifier",
            "src": "1690:16:31"
          },
          {
            "baseName": {
              "id": 11783,
              "name": "Multicall",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 37872,
              "src": "1712:9:31"
            },
            "id": 11784,
            "nodeType": "InheritanceSpecifier",
            "src": "1712:9:31"
          },
          {
            "baseName": {
              "id": 11785,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 38400,
              "src": "1727:7:31"
            },
            "id": 11786,
            "nodeType": "InheritanceSpecifier",
            "src": "1727:7:31"
          },
          {
            "baseName": {
              "id": 11787,
              "name": "Royalty",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 39646,
              "src": "1740:7:31"
            },
            "id": 11788,
            "nodeType": "InheritanceSpecifier",
            "src": "1740:7:31"
          },
          {
            "baseName": {
              "id": 11789,
              "name": "BatchMintMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 34496,
              "src": "1753:17:31"
            },
            "id": 11790,
            "nodeType": "InheritanceSpecifier",
            "src": "1753:17:31"
          },
          {
            "baseName": {
              "id": 11791,
              "name": "LazyMint",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 37538,
              "src": "1776:8:31"
            },
            "id": 11792,
            "nodeType": "InheritanceSpecifier",
            "src": "1776:8:31"
          },
          {
            "baseName": {
              "id": 11793,
              "name": "IClaimableERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 49640,
              "src": "1790:16:31"
            },
            "id": 11794,
            "nodeType": "InheritanceSpecifier",
            "src": "1790:16:31"
          },
          {
            "baseName": {
              "id": 11795,
              "name": "DefaultOperatorFilterer",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 34762,
              "src": "1812:23:31"
            },
            "id": 11796,
            "nodeType": "InheritanceSpecifier",
            "src": "1812:23:31"
          },
          {
            "baseName": {
              "id": 11797,
              "name": "ReentrancyGuard",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 76642,
              "src": "1841:15:31"
            },
            "id": 11798,
            "nodeType": "InheritanceSpecifier",
            "src": "1841:15:31"
          }
        ],
        "canonicalName": "ERC721LazyMint",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 11778,
          "nodeType": "StructuredDocumentation",
          "src": "580:1064:31",
          "text": "      BASE:      ERC721A\n      EXTENSION: LazyMint\n  The `ERC721LazyMint` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.\n  It includes the following additions to standard ERC721 logic:\n      - Lazy minting\n      - Contract metadata for royalty support on platforms such as OpenSea that use\n        off-chain information to distribute roaylties.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2981 compliance for royalty support on NFT marketplaces.\n  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'\n  of  NFTs means actually assigning an owner to an NFT.\n  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,\n  without paying the gas cost for actually minting the NFTs."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          12178,
          76642,
          34762,
          38148,
          37994,
          50395,
          49640,
          37538,
          34496,
          50054,
          39646,
          50644,
          31290,
          38400,
          50418,
          37872,
          50168,
          34723,
          49679,
          29541,
          31493,
          31539,
          31422,
          26795,
          31146,
          78641
        ],
        "name": "ERC721LazyMint",
        "nameLocation": "1655:14:31",
        "scope": 12179,
        "usedErrors": [
          31434,
          31437,
          31440,
          31443,
          31446,
          31449,
          31452,
          31455,
          31458,
          31461,
          31464,
          31467,
          31470,
          38005
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 31
}